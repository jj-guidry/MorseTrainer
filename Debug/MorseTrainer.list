
MorseTrainer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d3c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08001df8  08001df8  00011df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ef4  08001ef4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001ef4  08001ef4  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ef4  08001ef4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ef4  08001ef4  00011ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ef8  08001ef8  00011ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  08001f58  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08001f58  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002799  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d37  00000000  00000000  00022860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000350  00000000  00000000  00023598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000025c  00000000  00000000  000238e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019b3e  00000000  00000000  00023b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004834  00000000  00000000  0003d682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009af0d  00000000  00000000  00041eb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000ee4  00000000  00000000  000dcdc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000ddca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001de0 	.word	0x08001de0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	08001de0 	.word	0x08001de0

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <uart_send_char>:

char state = START; // init to start state

void SystemClock_Config(void);

void uart_send_char(char ch){
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	0002      	movs	r2, r0
 8000238:	1dfb      	adds	r3, r7, #7
 800023a:	701a      	strb	r2, [r3, #0]
	while (!(USART5->ISR & (1 << 7)));
 800023c:	46c0      	nop			; (mov r8, r8)
 800023e:	4b07      	ldr	r3, [pc, #28]	; (800025c <uart_send_char+0x2c>)
 8000240:	69db      	ldr	r3, [r3, #28]
 8000242:	2280      	movs	r2, #128	; 0x80
 8000244:	4013      	ands	r3, r2
 8000246:	d0fa      	beq.n	800023e <uart_send_char+0xe>
	USART5->TDR = ch;
 8000248:	4a04      	ldr	r2, [pc, #16]	; (800025c <uart_send_char+0x2c>)
 800024a:	1dfb      	adds	r3, r7, #7
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	b29b      	uxth	r3, r3
 8000250:	8513      	strh	r3, [r2, #40]	; 0x28
}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	46bd      	mov	sp, r7
 8000256:	b002      	add	sp, #8
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	40005000 	.word	0x40005000

08000260 <uart_send_string>:

void uart_send_string(const char* str) {
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
    while (*str) {  // Continue until the null terminator is encountered
 8000268:	e007      	b.n	800027a <uart_send_string+0x1a>
        uart_send_char(*str);
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	0018      	movs	r0, r3
 8000270:	f7ff ffde 	bl	8000230 <uart_send_char>
        str++;  // Move to the next character in the string
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	3301      	adds	r3, #1
 8000278:	607b      	str	r3, [r7, #4]
    while (*str) {  // Continue until the null terminator is encountered
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d1f3      	bne.n	800026a <uart_send_string+0xa>
    }
}
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	46c0      	nop			; (mov r8, r8)
 8000286:	46bd      	mov	sp, r7
 8000288:	b002      	add	sp, #8
 800028a:	bd80      	pop	{r7, pc}

0800028c <uart_send_hex>:
    char buffer[12];  // Buffer to hold the string representation of the integer
    snprintf(buffer, sizeof(buffer), "%d", value);  // Convert the integer to a string
    uart_send_string(buffer);  // Send the string over UART
}

void uart_send_hex(int value) {
 800028c:	b590      	push	{r4, r7, lr}
 800028e:	b087      	sub	sp, #28
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
    char buffer[12];  // Buffer to hold the string representation of the integer
    snprintf(buffer, sizeof(buffer), "%x", value);  // Convert the integer to a string
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a07      	ldr	r2, [pc, #28]	; (80002b4 <uart_send_hex+0x28>)
 8000298:	240c      	movs	r4, #12
 800029a:	1938      	adds	r0, r7, r4
 800029c:	210c      	movs	r1, #12
 800029e:	f001 f8e5 	bl	800146c <sniprintf>
    uart_send_string(buffer);  // Send the string over UART
 80002a2:	193b      	adds	r3, r7, r4
 80002a4:	0018      	movs	r0, r3
 80002a6:	f7ff ffdb 	bl	8000260 <uart_send_string>
}
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	46bd      	mov	sp, r7
 80002ae:	b007      	add	sp, #28
 80002b0:	bd90      	pop	{r4, r7, pc}
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	08001dfc 	.word	0x08001dfc

080002b8 <init_uart>:

void init_uart(){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	RCC->AHBENR |= 3 << 19; // enable GPIOB and GPIOC clocks
 80002bc:	4b42      	ldr	r3, [pc, #264]	; (80003c8 <init_uart+0x110>)
 80002be:	695a      	ldr	r2, [r3, #20]
 80002c0:	4b41      	ldr	r3, [pc, #260]	; (80003c8 <init_uart+0x110>)
 80002c2:	21c0      	movs	r1, #192	; 0xc0
 80002c4:	0349      	lsls	r1, r1, #13
 80002c6:	430a      	orrs	r2, r1
 80002c8:	615a      	str	r2, [r3, #20]
	RCC->APB1ENR |= 1 << 20;
 80002ca:	4b3f      	ldr	r3, [pc, #252]	; (80003c8 <init_uart+0x110>)
 80002cc:	69da      	ldr	r2, [r3, #28]
 80002ce:	4b3e      	ldr	r3, [pc, #248]	; (80003c8 <init_uart+0x110>)
 80002d0:	2180      	movs	r1, #128	; 0x80
 80002d2:	0349      	lsls	r1, r1, #13
 80002d4:	430a      	orrs	r2, r1
 80002d6:	61da      	str	r2, [r3, #28]
	// set MODER's to alternate function
	GPIOC->MODER |= 1 << 25;
 80002d8:	4b3c      	ldr	r3, [pc, #240]	; (80003cc <init_uart+0x114>)
 80002da:	681a      	ldr	r2, [r3, #0]
 80002dc:	4b3b      	ldr	r3, [pc, #236]	; (80003cc <init_uart+0x114>)
 80002de:	2180      	movs	r1, #128	; 0x80
 80002e0:	0489      	lsls	r1, r1, #18
 80002e2:	430a      	orrs	r2, r1
 80002e4:	601a      	str	r2, [r3, #0]
	GPIOC->MODER &= ~(1 << 24);
 80002e6:	4b39      	ldr	r3, [pc, #228]	; (80003cc <init_uart+0x114>)
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	4b38      	ldr	r3, [pc, #224]	; (80003cc <init_uart+0x114>)
 80002ec:	4938      	ldr	r1, [pc, #224]	; (80003d0 <init_uart+0x118>)
 80002ee:	400a      	ands	r2, r1
 80002f0:	601a      	str	r2, [r3, #0]

	GPIOD->MODER |= (1<<5);
 80002f2:	4b38      	ldr	r3, [pc, #224]	; (80003d4 <init_uart+0x11c>)
 80002f4:	681a      	ldr	r2, [r3, #0]
 80002f6:	4b37      	ldr	r3, [pc, #220]	; (80003d4 <init_uart+0x11c>)
 80002f8:	2120      	movs	r1, #32
 80002fa:	430a      	orrs	r2, r1
 80002fc:	601a      	str	r2, [r3, #0]
	GPIOD->MODER &= ~(1<<4);
 80002fe:	4b35      	ldr	r3, [pc, #212]	; (80003d4 <init_uart+0x11c>)
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	4b34      	ldr	r3, [pc, #208]	; (80003d4 <init_uart+0x11c>)
 8000304:	2110      	movs	r1, #16
 8000306:	438a      	bics	r2, r1
 8000308:	601a      	str	r2, [r3, #0]

	// configure pc12 for UART5_TX (AF2)
	GPIOC->AFR[1] |= 2 << 16;
 800030a:	4b30      	ldr	r3, [pc, #192]	; (80003cc <init_uart+0x114>)
 800030c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800030e:	4b2f      	ldr	r3, [pc, #188]	; (80003cc <init_uart+0x114>)
 8000310:	2180      	movs	r1, #128	; 0x80
 8000312:	0289      	lsls	r1, r1, #10
 8000314:	430a      	orrs	r2, r1
 8000316:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOC->AFR[1] &= ~(0xd << 16);
 8000318:	4b2c      	ldr	r3, [pc, #176]	; (80003cc <init_uart+0x114>)
 800031a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800031c:	4b2b      	ldr	r3, [pc, #172]	; (80003cc <init_uart+0x114>)
 800031e:	492e      	ldr	r1, [pc, #184]	; (80003d8 <init_uart+0x120>)
 8000320:	400a      	ands	r2, r1
 8000322:	625a      	str	r2, [r3, #36]	; 0x24

	// configure pd2 for UART5_RX (AF2)
	GPIOD->AFR[0] |= 2 << 8;
 8000324:	4b2b      	ldr	r3, [pc, #172]	; (80003d4 <init_uart+0x11c>)
 8000326:	6a1a      	ldr	r2, [r3, #32]
 8000328:	4b2a      	ldr	r3, [pc, #168]	; (80003d4 <init_uart+0x11c>)
 800032a:	2180      	movs	r1, #128	; 0x80
 800032c:	0089      	lsls	r1, r1, #2
 800032e:	430a      	orrs	r2, r1
 8000330:	621a      	str	r2, [r3, #32]
	GPIOD->AFR[0] &= ~(0xd << 8);
 8000332:	4b28      	ldr	r3, [pc, #160]	; (80003d4 <init_uart+0x11c>)
 8000334:	6a1a      	ldr	r2, [r3, #32]
 8000336:	4b27      	ldr	r3, [pc, #156]	; (80003d4 <init_uart+0x11c>)
 8000338:	4928      	ldr	r1, [pc, #160]	; (80003dc <init_uart+0x124>)
 800033a:	400a      	ands	r2, r1
 800033c:	621a      	str	r2, [r3, #32]

	// first, turn off the UE bit
	USART5->CR1 &= ~1;
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <init_uart+0x128>)
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	4b27      	ldr	r3, [pc, #156]	; (80003e0 <init_uart+0x128>)
 8000344:	2101      	movs	r1, #1
 8000346:	438a      	bics	r2, r1
 8000348:	601a      	str	r2, [r3, #0]

	// set word length to 8 bits
	USART5->CR1 &= ~(1<<28);
 800034a:	4b25      	ldr	r3, [pc, #148]	; (80003e0 <init_uart+0x128>)
 800034c:	681a      	ldr	r2, [r3, #0]
 800034e:	4b24      	ldr	r3, [pc, #144]	; (80003e0 <init_uart+0x128>)
 8000350:	4924      	ldr	r1, [pc, #144]	; (80003e4 <init_uart+0x12c>)
 8000352:	400a      	ands	r2, r1
 8000354:	601a      	str	r2, [r3, #0]
	USART5->CR1 &= ~(1<<12);
 8000356:	4b22      	ldr	r3, [pc, #136]	; (80003e0 <init_uart+0x128>)
 8000358:	681a      	ldr	r2, [r3, #0]
 800035a:	4b21      	ldr	r3, [pc, #132]	; (80003e0 <init_uart+0x128>)
 800035c:	4922      	ldr	r1, [pc, #136]	; (80003e8 <init_uart+0x130>)
 800035e:	400a      	ands	r2, r1
 8000360:	601a      	str	r2, [r3, #0]

	// set for 1 stop bit
	USART5->CR2 &= ~(3<<12);
 8000362:	4b1f      	ldr	r3, [pc, #124]	; (80003e0 <init_uart+0x128>)
 8000364:	685a      	ldr	r2, [r3, #4]
 8000366:	4b1e      	ldr	r3, [pc, #120]	; (80003e0 <init_uart+0x128>)
 8000368:	4920      	ldr	r1, [pc, #128]	; (80003ec <init_uart+0x134>)
 800036a:	400a      	ands	r2, r1
 800036c:	605a      	str	r2, [r3, #4]

	// no parity
	USART5->CR1 &= ~(1<<10);
 800036e:	4b1c      	ldr	r3, [pc, #112]	; (80003e0 <init_uart+0x128>)
 8000370:	681a      	ldr	r2, [r3, #0]
 8000372:	4b1b      	ldr	r3, [pc, #108]	; (80003e0 <init_uart+0x128>)
 8000374:	491e      	ldr	r1, [pc, #120]	; (80003f0 <init_uart+0x138>)
 8000376:	400a      	ands	r2, r1
 8000378:	601a      	str	r2, [r3, #0]

	// 16x over-sampling
	USART5->CR1 &= ~(1<<15);
 800037a:	4b19      	ldr	r3, [pc, #100]	; (80003e0 <init_uart+0x128>)
 800037c:	681a      	ldr	r2, [r3, #0]
 800037e:	4b18      	ldr	r3, [pc, #96]	; (80003e0 <init_uart+0x128>)
 8000380:	491c      	ldr	r1, [pc, #112]	; (80003f4 <init_uart+0x13c>)
 8000382:	400a      	ands	r2, r1
 8000384:	601a      	str	r2, [r3, #0]

	// baud rate 115200
	USART5->BRR = 0x1a1;
 8000386:	4b16      	ldr	r3, [pc, #88]	; (80003e0 <init_uart+0x128>)
 8000388:	22a2      	movs	r2, #162	; 0xa2
 800038a:	32ff      	adds	r2, #255	; 0xff
 800038c:	60da      	str	r2, [r3, #12]

	// enable receiver and transmitter
	USART5->CR1 |= 3 << 2;
 800038e:	4b14      	ldr	r3, [pc, #80]	; (80003e0 <init_uart+0x128>)
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <init_uart+0x128>)
 8000394:	210c      	movs	r1, #12
 8000396:	430a      	orrs	r2, r1
 8000398:	601a      	str	r2, [r3, #0]

	// enable UART
	USART5->CR1 |= 1;
 800039a:	4b11      	ldr	r3, [pc, #68]	; (80003e0 <init_uart+0x128>)
 800039c:	681a      	ldr	r2, [r3, #0]
 800039e:	4b10      	ldr	r3, [pc, #64]	; (80003e0 <init_uart+0x128>)
 80003a0:	2101      	movs	r1, #1
 80003a2:	430a      	orrs	r2, r1
 80003a4:	601a      	str	r2, [r3, #0]

	// wait for things to work?
	while(!(USART5->ISR & (1<<22)) || !(USART5->ISR & (1<<21)));
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	4b0d      	ldr	r3, [pc, #52]	; (80003e0 <init_uart+0x128>)
 80003aa:	69da      	ldr	r2, [r3, #28]
 80003ac:	2380      	movs	r3, #128	; 0x80
 80003ae:	03db      	lsls	r3, r3, #15
 80003b0:	4013      	ands	r3, r2
 80003b2:	d0f9      	beq.n	80003a8 <init_uart+0xf0>
 80003b4:	4b0a      	ldr	r3, [pc, #40]	; (80003e0 <init_uart+0x128>)
 80003b6:	69da      	ldr	r2, [r3, #28]
 80003b8:	2380      	movs	r3, #128	; 0x80
 80003ba:	039b      	lsls	r3, r3, #14
 80003bc:	4013      	ands	r3, r2
 80003be:	d0f3      	beq.n	80003a8 <init_uart+0xf0>

}
 80003c0:	46c0      	nop			; (mov r8, r8)
 80003c2:	46c0      	nop			; (mov r8, r8)
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	40021000 	.word	0x40021000
 80003cc:	48000800 	.word	0x48000800
 80003d0:	feffffff 	.word	0xfeffffff
 80003d4:	48000c00 	.word	0x48000c00
 80003d8:	fff2ffff 	.word	0xfff2ffff
 80003dc:	fffff2ff 	.word	0xfffff2ff
 80003e0:	40005000 	.word	0x40005000
 80003e4:	efffffff 	.word	0xefffffff
 80003e8:	ffffefff 	.word	0xffffefff
 80003ec:	ffffcfff 	.word	0xffffcfff
 80003f0:	fffffbff 	.word	0xfffffbff
 80003f4:	ffff7fff 	.word	0xffff7fff

080003f8 <EXTI0_1_IRQHandler>:


void EXTI0_1_IRQHandler(){
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0

	// ack interrupt -> clear 1st bit of EXTI->PR
	EXTI->PR = 1<<1;
 80003fe:	4b28      	ldr	r3, [pc, #160]	; (80004a0 <EXTI0_1_IRQHandler+0xa8>)
 8000400:	2202      	movs	r2, #2
 8000402:	615a      	str	r2, [r3, #20]

	// toggle pc7 led
	if((GPIOA->IDR >> 1) & 1){ // button pin is high (triggered by rising edge)
 8000404:	2390      	movs	r3, #144	; 0x90
 8000406:	05db      	lsls	r3, r3, #23
 8000408:	691b      	ldr	r3, [r3, #16]
 800040a:	2202      	movs	r2, #2
 800040c:	4013      	ands	r3, r2
 800040e:	d015      	beq.n	800043c <EXTI0_1_IRQHandler+0x44>

		GPIOC->BSRR = (1 << 7); // turn on led
 8000410:	4b24      	ldr	r3, [pc, #144]	; (80004a4 <EXTI0_1_IRQHandler+0xac>)
 8000412:	2280      	movs	r2, #128	; 0x80
 8000414:	619a      	str	r2, [r3, #24]

		// stop the inactivity timer
		TIM2->CR1 &= ~1;
 8000416:	2380      	movs	r3, #128	; 0x80
 8000418:	05db      	lsls	r3, r3, #23
 800041a:	681a      	ldr	r2, [r3, #0]
 800041c:	2380      	movs	r3, #128	; 0x80
 800041e:	05db      	lsls	r3, r3, #23
 8000420:	2101      	movs	r1, #1
 8000422:	438a      	bics	r2, r1
 8000424:	601a      	str	r2, [r3, #0]
		TIM2->CNT = 0;
 8000426:	2380      	movs	r3, #128	; 0x80
 8000428:	05db      	lsls	r3, r3, #23
 800042a:	2200      	movs	r2, #0
 800042c:	625a      	str	r2, [r3, #36]	; 0x24

		// start activity timer
		TIM6->CR1 |= 1;
 800042e:	4b1e      	ldr	r3, [pc, #120]	; (80004a8 <EXTI0_1_IRQHandler+0xb0>)
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	4b1d      	ldr	r3, [pc, #116]	; (80004a8 <EXTI0_1_IRQHandler+0xb0>)
 8000434:	2101      	movs	r1, #1
 8000436:	430a      	orrs	r2, r1
 8000438:	601a      	str	r2, [r3, #0]

		// start inactivity timer
		TIM2->CR1 |= 1;

	}
}
 800043a:	e02d      	b.n	8000498 <EXTI0_1_IRQHandler+0xa0>
		GPIOC->BSRR = (1 << 7) << 16; // turn off the led
 800043c:	4b19      	ldr	r3, [pc, #100]	; (80004a4 <EXTI0_1_IRQHandler+0xac>)
 800043e:	2280      	movs	r2, #128	; 0x80
 8000440:	0412      	lsls	r2, r2, #16
 8000442:	619a      	str	r2, [r3, #24]
		int count = (int) TIM6->CNT;
 8000444:	4b18      	ldr	r3, [pc, #96]	; (80004a8 <EXTI0_1_IRQHandler+0xb0>)
 8000446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000448:	607b      	str	r3, [r7, #4]
		TIM6->CR1 &= ~1;
 800044a:	4b17      	ldr	r3, [pc, #92]	; (80004a8 <EXTI0_1_IRQHandler+0xb0>)
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	4b16      	ldr	r3, [pc, #88]	; (80004a8 <EXTI0_1_IRQHandler+0xb0>)
 8000450:	2101      	movs	r1, #1
 8000452:	438a      	bics	r2, r1
 8000454:	601a      	str	r2, [r3, #0]
		TIM6->CNT = 0;
 8000456:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <EXTI0_1_IRQHandler+0xb0>)
 8000458:	2200      	movs	r2, #0
 800045a:	625a      	str	r2, [r3, #36]	; 0x24
		if(count < 1150){
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4a13      	ldr	r2, [pc, #76]	; (80004ac <EXTI0_1_IRQHandler+0xb4>)
 8000460:	4293      	cmp	r3, r2
 8000462:	dc08      	bgt.n	8000476 <EXTI0_1_IRQHandler+0x7e>
			state = morse_tree[(int)state][0];
 8000464:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <EXTI0_1_IRQHandler+0xb8>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	001a      	movs	r2, r3
 800046a:	4b12      	ldr	r3, [pc, #72]	; (80004b4 <EXTI0_1_IRQHandler+0xbc>)
 800046c:	0052      	lsls	r2, r2, #1
 800046e:	5cd2      	ldrb	r2, [r2, r3]
 8000470:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <EXTI0_1_IRQHandler+0xb8>)
 8000472:	701a      	strb	r2, [r3, #0]
 8000474:	e008      	b.n	8000488 <EXTI0_1_IRQHandler+0x90>
			state = morse_tree[(int)state][1];
 8000476:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <EXTI0_1_IRQHandler+0xb8>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	4a0e      	ldr	r2, [pc, #56]	; (80004b4 <EXTI0_1_IRQHandler+0xbc>)
 800047c:	005b      	lsls	r3, r3, #1
 800047e:	18d3      	adds	r3, r2, r3
 8000480:	3301      	adds	r3, #1
 8000482:	781a      	ldrb	r2, [r3, #0]
 8000484:	4b0a      	ldr	r3, [pc, #40]	; (80004b0 <EXTI0_1_IRQHandler+0xb8>)
 8000486:	701a      	strb	r2, [r3, #0]
		TIM2->CR1 |= 1;
 8000488:	2380      	movs	r3, #128	; 0x80
 800048a:	05db      	lsls	r3, r3, #23
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	2380      	movs	r3, #128	; 0x80
 8000490:	05db      	lsls	r3, r3, #23
 8000492:	2101      	movs	r1, #1
 8000494:	430a      	orrs	r2, r1
 8000496:	601a      	str	r2, [r3, #0]
}
 8000498:	46c0      	nop			; (mov r8, r8)
 800049a:	46bd      	mov	sp, r7
 800049c:	b002      	add	sp, #8
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40010400 	.word	0x40010400
 80004a4:	48000800 	.word	0x48000800
 80004a8:	40001000 	.word	0x40001000
 80004ac:	0000047d 	.word	0x0000047d
 80004b0:	20000078 	.word	0x20000078
 80004b4:	08001e04 	.word	0x08001e04

080004b8 <TIM2_IRQHandler>:

void TIM2_IRQHandler(){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0

	// check if interrupt triggered from 3 inactive time units (end of curr dit/dash)
	// or from 7 inactive time units (end of word, send a space)

	uart_send_hex(TIM2->SR);
 80004bc:	2380      	movs	r3, #128	; 0x80
 80004be:	05db      	lsls	r3, r3, #23
 80004c0:	691b      	ldr	r3, [r3, #16]
 80004c2:	0018      	movs	r0, r3
 80004c4:	f7ff fee2 	bl	800028c <uart_send_hex>
	if((TIM2->SR >> 1) & 1){
 80004c8:	2380      	movs	r3, #128	; 0x80
 80004ca:	05db      	lsls	r3, r3, #23
 80004cc:	691b      	ldr	r3, [r3, #16]
 80004ce:	2202      	movs	r2, #2
 80004d0:	4013      	ands	r3, r2
 80004d2:	d010      	beq.n	80004f6 <TIM2_IRQHandler+0x3e>
		// interrupt source: 3 inactive time units
		TIM2->SR &= ~(1<<1); // clear CC1IF bit
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	05db      	lsls	r3, r3, #23
 80004d8:	691a      	ldr	r2, [r3, #16]
 80004da:	2380      	movs	r3, #128	; 0x80
 80004dc:	05db      	lsls	r3, r3, #23
 80004de:	2102      	movs	r1, #2
 80004e0:	438a      	bics	r2, r1
 80004e2:	611a      	str	r2, [r3, #16]
		// and send the current char to serial port
		uart_send_char(node_decode[(int)state]);
 80004e4:	4b15      	ldr	r3, [pc, #84]	; (800053c <TIM2_IRQHandler+0x84>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	001a      	movs	r2, r3
 80004ea:	4b15      	ldr	r3, [pc, #84]	; (8000540 <TIM2_IRQHandler+0x88>)
 80004ec:	5c9b      	ldrb	r3, [r3, r2]
 80004ee:	0018      	movs	r0, r3
 80004f0:	f7ff fe9e 	bl	8000230 <uart_send_char>
 80004f4:	e01c      	b.n	8000530 <TIM2_IRQHandler+0x78>
	} else if(TIM2->SR & 1){
 80004f6:	2380      	movs	r3, #128	; 0x80
 80004f8:	05db      	lsls	r3, r3, #23
 80004fa:	691b      	ldr	r3, [r3, #16]
 80004fc:	2201      	movs	r2, #1
 80004fe:	4013      	ands	r3, r2
 8000500:	d016      	beq.n	8000530 <TIM2_IRQHandler+0x78>
		// interrupt source: 7 inactive time units
		TIM2->SR &= ~1; // clear UIF flag
 8000502:	2380      	movs	r3, #128	; 0x80
 8000504:	05db      	lsls	r3, r3, #23
 8000506:	691a      	ldr	r2, [r3, #16]
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	05db      	lsls	r3, r3, #23
 800050c:	2101      	movs	r1, #1
 800050e:	438a      	bics	r2, r1
 8000510:	611a      	str	r2, [r3, #16]
		TIM2->CR1 &= ~1; // stop the timer
 8000512:	2380      	movs	r3, #128	; 0x80
 8000514:	05db      	lsls	r3, r3, #23
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	05db      	lsls	r3, r3, #23
 800051c:	2101      	movs	r1, #1
 800051e:	438a      	bics	r2, r1
 8000520:	601a      	str	r2, [r3, #0]
		// send a space, since this means end of current work
		uart_send_char(' ');
 8000522:	2020      	movs	r0, #32
 8000524:	f7ff fe84 	bl	8000230 <uart_send_char>
		TIM2->CNT = 0;
 8000528:	2380      	movs	r3, #128	; 0x80
 800052a:	05db      	lsls	r3, r3, #23
 800052c:	2200      	movs	r2, #0
 800052e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	// restart state
	state = START;
 8000530:	4b02      	ldr	r3, [pc, #8]	; (800053c <TIM2_IRQHandler+0x84>)
 8000532:	2200      	movs	r2, #0
 8000534:	701a      	strb	r2, [r3, #0]

}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000078 	.word	0x20000078
 8000540:	08001e60 	.word	0x08001e60

08000544 <init_timers_gpio>:

// PA0 for input
void init_timers_gpio(){
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	RCC->AHBENR |= 1<<17; // gpioa en clock for input button
 8000548:	4b46      	ldr	r3, [pc, #280]	; (8000664 <init_timers_gpio+0x120>)
 800054a:	695a      	ldr	r2, [r3, #20]
 800054c:	4b45      	ldr	r3, [pc, #276]	; (8000664 <init_timers_gpio+0x120>)
 800054e:	2180      	movs	r1, #128	; 0x80
 8000550:	0289      	lsls	r1, r1, #10
 8000552:	430a      	orrs	r2, r1
 8000554:	615a      	str	r2, [r3, #20]
	RCC->AHBENR |= 1<<19; // gpioc en clock for output led
 8000556:	4b43      	ldr	r3, [pc, #268]	; (8000664 <init_timers_gpio+0x120>)
 8000558:	695a      	ldr	r2, [r3, #20]
 800055a:	4b42      	ldr	r3, [pc, #264]	; (8000664 <init_timers_gpio+0x120>)
 800055c:	2180      	movs	r1, #128	; 0x80
 800055e:	0309      	lsls	r1, r1, #12
 8000560:	430a      	orrs	r2, r1
 8000562:	615a      	str	r2, [r3, #20]
	RCC->APB2ENR |= 1; // syscfg en clock
 8000564:	4b3f      	ldr	r3, [pc, #252]	; (8000664 <init_timers_gpio+0x120>)
 8000566:	699a      	ldr	r2, [r3, #24]
 8000568:	4b3e      	ldr	r3, [pc, #248]	; (8000664 <init_timers_gpio+0x120>)
 800056a:	2101      	movs	r1, #1
 800056c:	430a      	orrs	r2, r1
 800056e:	619a      	str	r2, [r3, #24]

	GPIOA->MODER &= ~(3<<2); // pa1 for input
 8000570:	2390      	movs	r3, #144	; 0x90
 8000572:	05db      	lsls	r3, r3, #23
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	2390      	movs	r3, #144	; 0x90
 8000578:	05db      	lsls	r3, r3, #23
 800057a:	210c      	movs	r1, #12
 800057c:	438a      	bics	r2, r1
 800057e:	601a      	str	r2, [r3, #0]
	GPIOA->PUPDR |= 1<<3; // pa1 pull down resistor
 8000580:	2390      	movs	r3, #144	; 0x90
 8000582:	05db      	lsls	r3, r3, #23
 8000584:	68da      	ldr	r2, [r3, #12]
 8000586:	2390      	movs	r3, #144	; 0x90
 8000588:	05db      	lsls	r3, r3, #23
 800058a:	2108      	movs	r1, #8
 800058c:	430a      	orrs	r2, r1
 800058e:	60da      	str	r2, [r3, #12]

	// pc7 as output
	GPIOC->MODER |= 1 << 14;
 8000590:	4b35      	ldr	r3, [pc, #212]	; (8000668 <init_timers_gpio+0x124>)
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	4b34      	ldr	r3, [pc, #208]	; (8000668 <init_timers_gpio+0x124>)
 8000596:	2180      	movs	r1, #128	; 0x80
 8000598:	01c9      	lsls	r1, r1, #7
 800059a:	430a      	orrs	r2, r1
 800059c:	601a      	str	r2, [r3, #0]
	GPIOC->MODER &= ~(1 << 15);
 800059e:	4b32      	ldr	r3, [pc, #200]	; (8000668 <init_timers_gpio+0x124>)
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	4b31      	ldr	r3, [pc, #196]	; (8000668 <init_timers_gpio+0x124>)
 80005a4:	4931      	ldr	r1, [pc, #196]	; (800066c <init_timers_gpio+0x128>)
 80005a6:	400a      	ands	r2, r1
 80005a8:	601a      	str	r2, [r3, #0]


	// config interrupt on pa0
	SYSCFG->EXTICR[0] &= ~(0xf<<4); // clear bottom 4 bits to set interrupt on pa1
 80005aa:	4b31      	ldr	r3, [pc, #196]	; (8000670 <init_timers_gpio+0x12c>)
 80005ac:	689a      	ldr	r2, [r3, #8]
 80005ae:	4b30      	ldr	r3, [pc, #192]	; (8000670 <init_timers_gpio+0x12c>)
 80005b0:	21f0      	movs	r1, #240	; 0xf0
 80005b2:	438a      	bics	r2, r1
 80005b4:	609a      	str	r2, [r3, #8]
	// call ISR for both rising and falling edge
	EXTI->RTSR |= 1<<1;
 80005b6:	4b2f      	ldr	r3, [pc, #188]	; (8000674 <init_timers_gpio+0x130>)
 80005b8:	689a      	ldr	r2, [r3, #8]
 80005ba:	4b2e      	ldr	r3, [pc, #184]	; (8000674 <init_timers_gpio+0x130>)
 80005bc:	2102      	movs	r1, #2
 80005be:	430a      	orrs	r2, r1
 80005c0:	609a      	str	r2, [r3, #8]
	EXTI->FTSR |= 1<<1;
 80005c2:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <init_timers_gpio+0x130>)
 80005c4:	68da      	ldr	r2, [r3, #12]
 80005c6:	4b2b      	ldr	r3, [pc, #172]	; (8000674 <init_timers_gpio+0x130>)
 80005c8:	2102      	movs	r1, #2
 80005ca:	430a      	orrs	r2, r1
 80005cc:	60da      	str	r2, [r3, #12]
	// unmask the interrupt on pin 1
	EXTI->IMR |= 1<<1;
 80005ce:	4b29      	ldr	r3, [pc, #164]	; (8000674 <init_timers_gpio+0x130>)
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	4b28      	ldr	r3, [pc, #160]	; (8000674 <init_timers_gpio+0x130>)
 80005d4:	2102      	movs	r1, #2
 80005d6:	430a      	orrs	r2, r1
 80005d8:	601a      	str	r2, [r3, #0]

    NVIC->ISER[0] = 1<<EXTI0_1_IRQn;
 80005da:	4b27      	ldr	r3, [pc, #156]	; (8000678 <init_timers_gpio+0x134>)
 80005dc:	2220      	movs	r2, #32
 80005de:	601a      	str	r2, [r3, #0]

    // setup timers
    // TIM6 counts duration of press
    RCC->APB1ENR |= 1<<4; // en clock for tim6
 80005e0:	4b20      	ldr	r3, [pc, #128]	; (8000664 <init_timers_gpio+0x120>)
 80005e2:	69da      	ldr	r2, [r3, #28]
 80005e4:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <init_timers_gpio+0x120>)
 80005e6:	2110      	movs	r1, #16
 80005e8:	430a      	orrs	r2, r1
 80005ea:	61da      	str	r2, [r3, #28]
    TIM6->PSC = 4800-1;
 80005ec:	4b23      	ldr	r3, [pc, #140]	; (800067c <init_timers_gpio+0x138>)
 80005ee:	4a24      	ldr	r2, [pc, #144]	; (8000680 <init_timers_gpio+0x13c>)
 80005f0:	629a      	str	r2, [r3, #40]	; 0x28
    TIM6->ARR = 65534-1;
 80005f2:	4b22      	ldr	r3, [pc, #136]	; (800067c <init_timers_gpio+0x138>)
 80005f4:	4a23      	ldr	r2, [pc, #140]	; (8000684 <init_timers_gpio+0x140>)
 80005f6:	62da      	str	r2, [r3, #44]	; 0x2c
    // TIM2 counts duration between presses
    // 2 interrupts: one at 3 time units (cnt == 3000) to end the character and another at 7 to add a space and pause the whole thing
    RCC->APB1ENR |= 1<<0;
 80005f8:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <init_timers_gpio+0x120>)
 80005fa:	69da      	ldr	r2, [r3, #28]
 80005fc:	4b19      	ldr	r3, [pc, #100]	; (8000664 <init_timers_gpio+0x120>)
 80005fe:	2101      	movs	r1, #1
 8000600:	430a      	orrs	r2, r1
 8000602:	61da      	str	r2, [r3, #28]
    TIM2->PSC = 4800-1;
 8000604:	2380      	movs	r3, #128	; 0x80
 8000606:	05db      	lsls	r3, r3, #23
 8000608:	4a1d      	ldr	r2, [pc, #116]	; (8000680 <init_timers_gpio+0x13c>)
 800060a:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 7000-1;
 800060c:	2380      	movs	r3, #128	; 0x80
 800060e:	05db      	lsls	r3, r3, #23
 8000610:	4a1d      	ldr	r2, [pc, #116]	; (8000688 <init_timers_gpio+0x144>)
 8000612:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->DIER |= 1;
 8000614:	2380      	movs	r3, #128	; 0x80
 8000616:	05db      	lsls	r3, r3, #23
 8000618:	68da      	ldr	r2, [r3, #12]
 800061a:	2380      	movs	r3, #128	; 0x80
 800061c:	05db      	lsls	r3, r3, #23
 800061e:	2101      	movs	r1, #1
 8000620:	430a      	orrs	r2, r1
 8000622:	60da      	str	r2, [r3, #12]
    TIM2->DIER |= 1<<1;
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	05db      	lsls	r3, r3, #23
 8000628:	68da      	ldr	r2, [r3, #12]
 800062a:	2380      	movs	r3, #128	; 0x80
 800062c:	05db      	lsls	r3, r3, #23
 800062e:	2102      	movs	r1, #2
 8000630:	430a      	orrs	r2, r1
 8000632:	60da      	str	r2, [r3, #12]
    TIM2->CCR1 = 3000;
 8000634:	2380      	movs	r3, #128	; 0x80
 8000636:	05db      	lsls	r3, r3, #23
 8000638:	4a14      	ldr	r2, [pc, #80]	; (800068c <init_timers_gpio+0x148>)
 800063a:	635a      	str	r2, [r3, #52]	; 0x34
    TIM2->CCMR1 |= (3<<4);
 800063c:	2380      	movs	r3, #128	; 0x80
 800063e:	05db      	lsls	r3, r3, #23
 8000640:	699a      	ldr	r2, [r3, #24]
 8000642:	2380      	movs	r3, #128	; 0x80
 8000644:	05db      	lsls	r3, r3, #23
 8000646:	2130      	movs	r1, #48	; 0x30
 8000648:	430a      	orrs	r2, r1
 800064a:	619a      	str	r2, [r3, #24]
    TIM2->CNT = 0;
 800064c:	2380      	movs	r3, #128	; 0x80
 800064e:	05db      	lsls	r3, r3, #23
 8000650:	2200      	movs	r2, #0
 8000652:	625a      	str	r2, [r3, #36]	; 0x24
    NVIC->ISER[0] = 1<<TIM2_IRQn;
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <init_timers_gpio+0x134>)
 8000656:	2280      	movs	r2, #128	; 0x80
 8000658:	0212      	lsls	r2, r2, #8
 800065a:	601a      	str	r2, [r3, #0]

}
 800065c:	46c0      	nop			; (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	40021000 	.word	0x40021000
 8000668:	48000800 	.word	0x48000800
 800066c:	ffff7fff 	.word	0xffff7fff
 8000670:	40010000 	.word	0x40010000
 8000674:	40010400 	.word	0x40010400
 8000678:	e000e100 	.word	0xe000e100
 800067c:	40001000 	.word	0x40001000
 8000680:	000012bf 	.word	0x000012bf
 8000684:	0000fffd 	.word	0x0000fffd
 8000688:	00001b57 	.word	0x00001b57
 800068c:	00000bb8 	.word	0x00000bb8

08000690 <main>:

int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

  HAL_Init();
 8000694:	f000 f900 	bl	8000898 <HAL_Init>
  SystemClock_Config();
 8000698:	f000 f80c 	bl	80006b4 <SystemClock_Config>

  init_uart();
 800069c:	f7ff fe0c 	bl	80002b8 <init_uart>
  init_timers_gpio();
 80006a0:	f7ff ff50 	bl	8000544 <init_timers_gpio>

  uart_send_string("\n\r");
 80006a4:	4b02      	ldr	r3, [pc, #8]	; (80006b0 <main+0x20>)
 80006a6:	0018      	movs	r0, r3
 80006a8:	f7ff fdda 	bl	8000260 <uart_send_string>
  for(;;);
 80006ac:	e7fe      	b.n	80006ac <main+0x1c>
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	08001e00 	.word	0x08001e00

080006b4 <SystemClock_Config>:

}

// set system clock to HSI with PLL for 48MHz clock
void SystemClock_Config(void)
{
 80006b4:	b590      	push	{r4, r7, lr}
 80006b6:	b093      	sub	sp, #76	; 0x4c
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	2414      	movs	r4, #20
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	0018      	movs	r0, r3
 80006c0:	2334      	movs	r3, #52	; 0x34
 80006c2:	001a      	movs	r2, r3
 80006c4:	2100      	movs	r1, #0
 80006c6:	f000 ff05 	bl	80014d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	0018      	movs	r0, r3
 80006ce:	2310      	movs	r3, #16
 80006d0:	001a      	movs	r2, r3
 80006d2:	2100      	movs	r1, #0
 80006d4:	f000 fefe 	bl	80014d4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d8:	0021      	movs	r1, r4
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2202      	movs	r2, #2
 80006de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2201      	movs	r2, #1
 80006e4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2210      	movs	r2, #16
 80006ea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2202      	movs	r2, #2
 80006f0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;  // Set the PLL source to HSI
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2280      	movs	r2, #128	; 0x80
 80006f6:	0212      	lsls	r2, r2, #8
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;  // Multiply by 6 to get 48 MHz (8 MHz * 6 = 48 MHz)
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2280      	movs	r2, #128	; 0x80
 80006fe:	0352      	lsls	r2, r2, #13
 8000700:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;  // Set the pre-divider to 1
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2200      	movs	r2, #0
 8000706:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	187b      	adds	r3, r7, r1
 800070a:	0018      	movs	r0, r3
 800070c:	f000 f9dc 	bl	8000ac8 <HAL_RCC_OscConfig>
 8000710:	1e03      	subs	r3, r0, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000714:	f000 f819 	bl	800074a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2207      	movs	r2, #7
 800071c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2202      	movs	r2, #2
 8000722:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2101      	movs	r1, #1
 8000734:	0018      	movs	r0, r3
 8000736:	f000 fd4d 	bl	80011d4 <HAL_RCC_ClockConfig>
 800073a:	1e03      	subs	r3, r0, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800073e:	f000 f804 	bl	800074a <Error_Handler>
  }
}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	b013      	add	sp, #76	; 0x4c
 8000748:	bd90      	pop	{r4, r7, pc}

0800074a <Error_Handler>:




void Error_Handler(void)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074e:	b672      	cpsid	i
}
 8000750:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000752:	e7fe      	b.n	8000752 <Error_Handler+0x8>

08000754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <HAL_MspInit+0x44>)
 800075c:	699a      	ldr	r2, [r3, #24]
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <HAL_MspInit+0x44>)
 8000760:	2101      	movs	r1, #1
 8000762:	430a      	orrs	r2, r1
 8000764:	619a      	str	r2, [r3, #24]
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <HAL_MspInit+0x44>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	2201      	movs	r2, #1
 800076c:	4013      	ands	r3, r2
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <HAL_MspInit+0x44>)
 8000774:	69da      	ldr	r2, [r3, #28]
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <HAL_MspInit+0x44>)
 8000778:	2180      	movs	r1, #128	; 0x80
 800077a:	0549      	lsls	r1, r1, #21
 800077c:	430a      	orrs	r2, r1
 800077e:	61da      	str	r2, [r3, #28]
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <HAL_MspInit+0x44>)
 8000782:	69da      	ldr	r2, [r3, #28]
 8000784:	2380      	movs	r3, #128	; 0x80
 8000786:	055b      	lsls	r3, r3, #21
 8000788:	4013      	ands	r3, r2
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	b002      	add	sp, #8
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	40021000 	.word	0x40021000

0800079c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <NMI_Handler+0x4>

080007a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <HardFault_Handler+0x4>

080007a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007ac:	46c0      	nop			; (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c0:	f000 f8b2 	bl	8000928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007d4:	4a14      	ldr	r2, [pc, #80]	; (8000828 <_sbrk+0x5c>)
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <_sbrk+0x60>)
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007e0:	4b13      	ldr	r3, [pc, #76]	; (8000830 <_sbrk+0x64>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d102      	bne.n	80007ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <_sbrk+0x64>)
 80007ea:	4a12      	ldr	r2, [pc, #72]	; (8000834 <_sbrk+0x68>)
 80007ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <_sbrk+0x64>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	18d3      	adds	r3, r2, r3
 80007f6:	693a      	ldr	r2, [r7, #16]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d207      	bcs.n	800080c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007fc:	f000 fe72 	bl	80014e4 <__errno>
 8000800:	0003      	movs	r3, r0
 8000802:	220c      	movs	r2, #12
 8000804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000806:	2301      	movs	r3, #1
 8000808:	425b      	negs	r3, r3
 800080a:	e009      	b.n	8000820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800080c:	4b08      	ldr	r3, [pc, #32]	; (8000830 <_sbrk+0x64>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000812:	4b07      	ldr	r3, [pc, #28]	; (8000830 <_sbrk+0x64>)
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	18d2      	adds	r2, r2, r3
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <_sbrk+0x64>)
 800081c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800081e:	68fb      	ldr	r3, [r7, #12]
}
 8000820:	0018      	movs	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	b006      	add	sp, #24
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20008000 	.word	0x20008000
 800082c:	00000400 	.word	0x00000400
 8000830:	2000007c 	.word	0x2000007c
 8000834:	200001d0 	.word	0x200001d0

08000838 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000844:	480d      	ldr	r0, [pc, #52]	; (800087c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000846:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000848:	f7ff fff6 	bl	8000838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800084c:	480c      	ldr	r0, [pc, #48]	; (8000880 <LoopForever+0x6>)
  ldr r1, =_edata
 800084e:	490d      	ldr	r1, [pc, #52]	; (8000884 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000850:	4a0d      	ldr	r2, [pc, #52]	; (8000888 <LoopForever+0xe>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000854:	e002      	b.n	800085c <LoopCopyDataInit>

08000856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085a:	3304      	adds	r3, #4

0800085c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800085c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000860:	d3f9      	bcc.n	8000856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000862:	4a0a      	ldr	r2, [pc, #40]	; (800088c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000864:	4c0a      	ldr	r4, [pc, #40]	; (8000890 <LoopForever+0x16>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000868:	e001      	b.n	800086e <LoopFillZerobss>

0800086a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800086c:	3204      	adds	r2, #4

0800086e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000870:	d3fb      	bcc.n	800086a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000872:	f000 fe3d 	bl	80014f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000876:	f7ff ff0b 	bl	8000690 <main>

0800087a <LoopForever>:

LoopForever:
    b LoopForever
 800087a:	e7fe      	b.n	800087a <LoopForever>
  ldr   r0, =_estack
 800087c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000884:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000888:	08001efc 	.word	0x08001efc
  ldr r2, =_sbss
 800088c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000890:	200001cc 	.word	0x200001cc

08000894 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000894:	e7fe      	b.n	8000894 <ADC1_COMP_IRQHandler>
	...

08000898 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <HAL_Init+0x24>)
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <HAL_Init+0x24>)
 80008a2:	2110      	movs	r1, #16
 80008a4:	430a      	orrs	r2, r1
 80008a6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80008a8:	2003      	movs	r0, #3
 80008aa:	f000 f809 	bl	80008c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008ae:	f7ff ff51 	bl	8000754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b2:	2300      	movs	r3, #0
}
 80008b4:	0018      	movs	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	40022000 	.word	0x40022000

080008c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c0:	b590      	push	{r4, r7, lr}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <HAL_InitTick+0x5c>)
 80008ca:	681c      	ldr	r4, [r3, #0]
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <HAL_InitTick+0x60>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	0019      	movs	r1, r3
 80008d2:	23fa      	movs	r3, #250	; 0xfa
 80008d4:	0098      	lsls	r0, r3, #2
 80008d6:	f7ff fc1f 	bl	8000118 <__udivsi3>
 80008da:	0003      	movs	r3, r0
 80008dc:	0019      	movs	r1, r3
 80008de:	0020      	movs	r0, r4
 80008e0:	f7ff fc1a 	bl	8000118 <__udivsi3>
 80008e4:	0003      	movs	r3, r0
 80008e6:	0018      	movs	r0, r3
 80008e8:	f000 f8e1 	bl	8000aae <HAL_SYSTICK_Config>
 80008ec:	1e03      	subs	r3, r0, #0
 80008ee:	d001      	beq.n	80008f4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008f0:	2301      	movs	r3, #1
 80008f2:	e00f      	b.n	8000914 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b03      	cmp	r3, #3
 80008f8:	d80b      	bhi.n	8000912 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008fa:	6879      	ldr	r1, [r7, #4]
 80008fc:	2301      	movs	r3, #1
 80008fe:	425b      	negs	r3, r3
 8000900:	2200      	movs	r2, #0
 8000902:	0018      	movs	r0, r3
 8000904:	f000 f8be 	bl	8000a84 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_InitTick+0x64>)
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800090e:	2300      	movs	r3, #0
 8000910:	e000      	b.n	8000914 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
}
 8000914:	0018      	movs	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	b003      	add	sp, #12
 800091a:	bd90      	pop	{r4, r7, pc}
 800091c:	20000000 	.word	0x20000000
 8000920:	20000008 	.word	0x20000008
 8000924:	20000004 	.word	0x20000004

08000928 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <HAL_IncTick+0x1c>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	001a      	movs	r2, r3
 8000932:	4b05      	ldr	r3, [pc, #20]	; (8000948 <HAL_IncTick+0x20>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	18d2      	adds	r2, r2, r3
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <HAL_IncTick+0x20>)
 800093a:	601a      	str	r2, [r3, #0]
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	20000008 	.word	0x20000008
 8000948:	20000080 	.word	0x20000080

0800094c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  return uwTick;
 8000950:	4b02      	ldr	r3, [pc, #8]	; (800095c <HAL_GetTick+0x10>)
 8000952:	681b      	ldr	r3, [r3, #0]
}
 8000954:	0018      	movs	r0, r3
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	20000080 	.word	0x20000080

08000960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	0002      	movs	r2, r0
 8000968:	6039      	str	r1, [r7, #0]
 800096a:	1dfb      	adds	r3, r7, #7
 800096c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800096e:	1dfb      	adds	r3, r7, #7
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b7f      	cmp	r3, #127	; 0x7f
 8000974:	d828      	bhi.n	80009c8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000976:	4a2f      	ldr	r2, [pc, #188]	; (8000a34 <__NVIC_SetPriority+0xd4>)
 8000978:	1dfb      	adds	r3, r7, #7
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	b25b      	sxtb	r3, r3
 800097e:	089b      	lsrs	r3, r3, #2
 8000980:	33c0      	adds	r3, #192	; 0xc0
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	589b      	ldr	r3, [r3, r2]
 8000986:	1dfa      	adds	r2, r7, #7
 8000988:	7812      	ldrb	r2, [r2, #0]
 800098a:	0011      	movs	r1, r2
 800098c:	2203      	movs	r2, #3
 800098e:	400a      	ands	r2, r1
 8000990:	00d2      	lsls	r2, r2, #3
 8000992:	21ff      	movs	r1, #255	; 0xff
 8000994:	4091      	lsls	r1, r2
 8000996:	000a      	movs	r2, r1
 8000998:	43d2      	mvns	r2, r2
 800099a:	401a      	ands	r2, r3
 800099c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	019b      	lsls	r3, r3, #6
 80009a2:	22ff      	movs	r2, #255	; 0xff
 80009a4:	401a      	ands	r2, r3
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	0018      	movs	r0, r3
 80009ac:	2303      	movs	r3, #3
 80009ae:	4003      	ands	r3, r0
 80009b0:	00db      	lsls	r3, r3, #3
 80009b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009b4:	481f      	ldr	r0, [pc, #124]	; (8000a34 <__NVIC_SetPriority+0xd4>)
 80009b6:	1dfb      	adds	r3, r7, #7
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	b25b      	sxtb	r3, r3
 80009bc:	089b      	lsrs	r3, r3, #2
 80009be:	430a      	orrs	r2, r1
 80009c0:	33c0      	adds	r3, #192	; 0xc0
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009c6:	e031      	b.n	8000a2c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009c8:	4a1b      	ldr	r2, [pc, #108]	; (8000a38 <__NVIC_SetPriority+0xd8>)
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	0019      	movs	r1, r3
 80009d0:	230f      	movs	r3, #15
 80009d2:	400b      	ands	r3, r1
 80009d4:	3b08      	subs	r3, #8
 80009d6:	089b      	lsrs	r3, r3, #2
 80009d8:	3306      	adds	r3, #6
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	18d3      	adds	r3, r2, r3
 80009de:	3304      	adds	r3, #4
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	1dfa      	adds	r2, r7, #7
 80009e4:	7812      	ldrb	r2, [r2, #0]
 80009e6:	0011      	movs	r1, r2
 80009e8:	2203      	movs	r2, #3
 80009ea:	400a      	ands	r2, r1
 80009ec:	00d2      	lsls	r2, r2, #3
 80009ee:	21ff      	movs	r1, #255	; 0xff
 80009f0:	4091      	lsls	r1, r2
 80009f2:	000a      	movs	r2, r1
 80009f4:	43d2      	mvns	r2, r2
 80009f6:	401a      	ands	r2, r3
 80009f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	019b      	lsls	r3, r3, #6
 80009fe:	22ff      	movs	r2, #255	; 0xff
 8000a00:	401a      	ands	r2, r3
 8000a02:	1dfb      	adds	r3, r7, #7
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	0018      	movs	r0, r3
 8000a08:	2303      	movs	r3, #3
 8000a0a:	4003      	ands	r3, r0
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a10:	4809      	ldr	r0, [pc, #36]	; (8000a38 <__NVIC_SetPriority+0xd8>)
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	001c      	movs	r4, r3
 8000a18:	230f      	movs	r3, #15
 8000a1a:	4023      	ands	r3, r4
 8000a1c:	3b08      	subs	r3, #8
 8000a1e:	089b      	lsrs	r3, r3, #2
 8000a20:	430a      	orrs	r2, r1
 8000a22:	3306      	adds	r3, #6
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	18c3      	adds	r3, r0, r3
 8000a28:	3304      	adds	r3, #4
 8000a2a:	601a      	str	r2, [r3, #0]
}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b003      	add	sp, #12
 8000a32:	bd90      	pop	{r4, r7, pc}
 8000a34:	e000e100 	.word	0xe000e100
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	1e5a      	subs	r2, r3, #1
 8000a48:	2380      	movs	r3, #128	; 0x80
 8000a4a:	045b      	lsls	r3, r3, #17
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d301      	bcc.n	8000a54 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a50:	2301      	movs	r3, #1
 8000a52:	e010      	b.n	8000a76 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a54:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <SysTick_Config+0x44>)
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	3a01      	subs	r2, #1
 8000a5a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	425b      	negs	r3, r3
 8000a60:	2103      	movs	r1, #3
 8000a62:	0018      	movs	r0, r3
 8000a64:	f7ff ff7c 	bl	8000960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <SysTick_Config+0x44>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a6e:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <SysTick_Config+0x44>)
 8000a70:	2207      	movs	r2, #7
 8000a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	0018      	movs	r0, r3
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	b002      	add	sp, #8
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	e000e010 	.word	0xe000e010

08000a84 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
 8000a8e:	210f      	movs	r1, #15
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	1c02      	adds	r2, r0, #0
 8000a94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	b25b      	sxtb	r3, r3
 8000a9e:	0011      	movs	r1, r2
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f7ff ff5d 	bl	8000960 <__NVIC_SetPriority>
}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b004      	add	sp, #16
 8000aac:	bd80      	pop	{r7, pc}

08000aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f7ff ffbf 	bl	8000a3c <SysTick_Config>
 8000abe:	0003      	movs	r3, r0
}
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b002      	add	sp, #8
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b088      	sub	sp, #32
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d102      	bne.n	8000adc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	f000 fb76 	bl	80011c8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	d100      	bne.n	8000ae8 <HAL_RCC_OscConfig+0x20>
 8000ae6:	e08e      	b.n	8000c06 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ae8:	4bc5      	ldr	r3, [pc, #788]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	220c      	movs	r2, #12
 8000aee:	4013      	ands	r3, r2
 8000af0:	2b04      	cmp	r3, #4
 8000af2:	d00e      	beq.n	8000b12 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000af4:	4bc2      	ldr	r3, [pc, #776]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	220c      	movs	r2, #12
 8000afa:	4013      	ands	r3, r2
 8000afc:	2b08      	cmp	r3, #8
 8000afe:	d117      	bne.n	8000b30 <HAL_RCC_OscConfig+0x68>
 8000b00:	4bbf      	ldr	r3, [pc, #764]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000b02:	685a      	ldr	r2, [r3, #4]
 8000b04:	23c0      	movs	r3, #192	; 0xc0
 8000b06:	025b      	lsls	r3, r3, #9
 8000b08:	401a      	ands	r2, r3
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	025b      	lsls	r3, r3, #9
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d10e      	bne.n	8000b30 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b12:	4bbb      	ldr	r3, [pc, #748]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	2380      	movs	r3, #128	; 0x80
 8000b18:	029b      	lsls	r3, r3, #10
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	d100      	bne.n	8000b20 <HAL_RCC_OscConfig+0x58>
 8000b1e:	e071      	b.n	8000c04 <HAL_RCC_OscConfig+0x13c>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d000      	beq.n	8000b2a <HAL_RCC_OscConfig+0x62>
 8000b28:	e06c      	b.n	8000c04 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	f000 fb4c 	bl	80011c8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d107      	bne.n	8000b48 <HAL_RCC_OscConfig+0x80>
 8000b38:	4bb1      	ldr	r3, [pc, #708]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4bb0      	ldr	r3, [pc, #704]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000b3e:	2180      	movs	r1, #128	; 0x80
 8000b40:	0249      	lsls	r1, r1, #9
 8000b42:	430a      	orrs	r2, r1
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	e02f      	b.n	8000ba8 <HAL_RCC_OscConfig+0xe0>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d10c      	bne.n	8000b6a <HAL_RCC_OscConfig+0xa2>
 8000b50:	4bab      	ldr	r3, [pc, #684]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4baa      	ldr	r3, [pc, #680]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000b56:	49ab      	ldr	r1, [pc, #684]	; (8000e04 <HAL_RCC_OscConfig+0x33c>)
 8000b58:	400a      	ands	r2, r1
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	4ba8      	ldr	r3, [pc, #672]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4ba7      	ldr	r3, [pc, #668]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000b62:	49a9      	ldr	r1, [pc, #676]	; (8000e08 <HAL_RCC_OscConfig+0x340>)
 8000b64:	400a      	ands	r2, r1
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	e01e      	b.n	8000ba8 <HAL_RCC_OscConfig+0xe0>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	2b05      	cmp	r3, #5
 8000b70:	d10e      	bne.n	8000b90 <HAL_RCC_OscConfig+0xc8>
 8000b72:	4ba3      	ldr	r3, [pc, #652]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	4ba2      	ldr	r3, [pc, #648]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000b78:	2180      	movs	r1, #128	; 0x80
 8000b7a:	02c9      	lsls	r1, r1, #11
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	4b9f      	ldr	r3, [pc, #636]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b9e      	ldr	r3, [pc, #632]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000b86:	2180      	movs	r1, #128	; 0x80
 8000b88:	0249      	lsls	r1, r1, #9
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	e00b      	b.n	8000ba8 <HAL_RCC_OscConfig+0xe0>
 8000b90:	4b9b      	ldr	r3, [pc, #620]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4b9a      	ldr	r3, [pc, #616]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000b96:	499b      	ldr	r1, [pc, #620]	; (8000e04 <HAL_RCC_OscConfig+0x33c>)
 8000b98:	400a      	ands	r2, r1
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	4b98      	ldr	r3, [pc, #608]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4b97      	ldr	r3, [pc, #604]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000ba2:	4999      	ldr	r1, [pc, #612]	; (8000e08 <HAL_RCC_OscConfig+0x340>)
 8000ba4:	400a      	ands	r2, r1
 8000ba6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d014      	beq.n	8000bda <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bb0:	f7ff fecc 	bl	800094c <HAL_GetTick>
 8000bb4:	0003      	movs	r3, r0
 8000bb6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bb8:	e008      	b.n	8000bcc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bba:	f7ff fec7 	bl	800094c <HAL_GetTick>
 8000bbe:	0002      	movs	r2, r0
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	2b64      	cmp	r3, #100	; 0x64
 8000bc6:	d901      	bls.n	8000bcc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	e2fd      	b.n	80011c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bcc:	4b8c      	ldr	r3, [pc, #560]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	2380      	movs	r3, #128	; 0x80
 8000bd2:	029b      	lsls	r3, r3, #10
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	d0f0      	beq.n	8000bba <HAL_RCC_OscConfig+0xf2>
 8000bd8:	e015      	b.n	8000c06 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bda:	f7ff feb7 	bl	800094c <HAL_GetTick>
 8000bde:	0003      	movs	r3, r0
 8000be0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000be2:	e008      	b.n	8000bf6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000be4:	f7ff feb2 	bl	800094c <HAL_GetTick>
 8000be8:	0002      	movs	r2, r0
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	2b64      	cmp	r3, #100	; 0x64
 8000bf0:	d901      	bls.n	8000bf6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	e2e8      	b.n	80011c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bf6:	4b82      	ldr	r3, [pc, #520]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	2380      	movs	r3, #128	; 0x80
 8000bfc:	029b      	lsls	r3, r3, #10
 8000bfe:	4013      	ands	r3, r2
 8000c00:	d1f0      	bne.n	8000be4 <HAL_RCC_OscConfig+0x11c>
 8000c02:	e000      	b.n	8000c06 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c04:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	d100      	bne.n	8000c12 <HAL_RCC_OscConfig+0x14a>
 8000c10:	e06c      	b.n	8000cec <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c12:	4b7b      	ldr	r3, [pc, #492]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	220c      	movs	r2, #12
 8000c18:	4013      	ands	r3, r2
 8000c1a:	d00e      	beq.n	8000c3a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c1c:	4b78      	ldr	r3, [pc, #480]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	220c      	movs	r2, #12
 8000c22:	4013      	ands	r3, r2
 8000c24:	2b08      	cmp	r3, #8
 8000c26:	d11f      	bne.n	8000c68 <HAL_RCC_OscConfig+0x1a0>
 8000c28:	4b75      	ldr	r3, [pc, #468]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000c2a:	685a      	ldr	r2, [r3, #4]
 8000c2c:	23c0      	movs	r3, #192	; 0xc0
 8000c2e:	025b      	lsls	r3, r3, #9
 8000c30:	401a      	ands	r2, r3
 8000c32:	2380      	movs	r3, #128	; 0x80
 8000c34:	021b      	lsls	r3, r3, #8
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d116      	bne.n	8000c68 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c3a:	4b71      	ldr	r3, [pc, #452]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2202      	movs	r2, #2
 8000c40:	4013      	ands	r3, r2
 8000c42:	d005      	beq.n	8000c50 <HAL_RCC_OscConfig+0x188>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d001      	beq.n	8000c50 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e2bb      	b.n	80011c8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c50:	4b6b      	ldr	r3, [pc, #428]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	22f8      	movs	r2, #248	; 0xf8
 8000c56:	4393      	bics	r3, r2
 8000c58:	0019      	movs	r1, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	691b      	ldr	r3, [r3, #16]
 8000c5e:	00da      	lsls	r2, r3, #3
 8000c60:	4b67      	ldr	r3, [pc, #412]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000c62:	430a      	orrs	r2, r1
 8000c64:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c66:	e041      	b.n	8000cec <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d024      	beq.n	8000cba <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c70:	4b63      	ldr	r3, [pc, #396]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b62      	ldr	r3, [pc, #392]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000c76:	2101      	movs	r1, #1
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c7c:	f7ff fe66 	bl	800094c <HAL_GetTick>
 8000c80:	0003      	movs	r3, r0
 8000c82:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c84:	e008      	b.n	8000c98 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c86:	f7ff fe61 	bl	800094c <HAL_GetTick>
 8000c8a:	0002      	movs	r2, r0
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d901      	bls.n	8000c98 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000c94:	2303      	movs	r3, #3
 8000c96:	e297      	b.n	80011c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c98:	4b59      	ldr	r3, [pc, #356]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2202      	movs	r2, #2
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	d0f1      	beq.n	8000c86 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ca2:	4b57      	ldr	r3, [pc, #348]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	22f8      	movs	r2, #248	; 0xf8
 8000ca8:	4393      	bics	r3, r2
 8000caa:	0019      	movs	r1, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	691b      	ldr	r3, [r3, #16]
 8000cb0:	00da      	lsls	r2, r3, #3
 8000cb2:	4b53      	ldr	r3, [pc, #332]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	e018      	b.n	8000cec <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cba:	4b51      	ldr	r3, [pc, #324]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	4b50      	ldr	r3, [pc, #320]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	438a      	bics	r2, r1
 8000cc4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc6:	f7ff fe41 	bl	800094c <HAL_GetTick>
 8000cca:	0003      	movs	r3, r0
 8000ccc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cce:	e008      	b.n	8000ce2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cd0:	f7ff fe3c 	bl	800094c <HAL_GetTick>
 8000cd4:	0002      	movs	r2, r0
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d901      	bls.n	8000ce2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e272      	b.n	80011c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ce2:	4b47      	ldr	r3, [pc, #284]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	4013      	ands	r3, r2
 8000cea:	d1f1      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2208      	movs	r2, #8
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	d036      	beq.n	8000d64 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	69db      	ldr	r3, [r3, #28]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d019      	beq.n	8000d32 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cfe:	4b40      	ldr	r3, [pc, #256]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000d00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d02:	4b3f      	ldr	r3, [pc, #252]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000d04:	2101      	movs	r1, #1
 8000d06:	430a      	orrs	r2, r1
 8000d08:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d0a:	f7ff fe1f 	bl	800094c <HAL_GetTick>
 8000d0e:	0003      	movs	r3, r0
 8000d10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d12:	e008      	b.n	8000d26 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d14:	f7ff fe1a 	bl	800094c <HAL_GetTick>
 8000d18:	0002      	movs	r2, r0
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d901      	bls.n	8000d26 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000d22:	2303      	movs	r3, #3
 8000d24:	e250      	b.n	80011c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d26:	4b36      	ldr	r3, [pc, #216]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	d0f1      	beq.n	8000d14 <HAL_RCC_OscConfig+0x24c>
 8000d30:	e018      	b.n	8000d64 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d32:	4b33      	ldr	r3, [pc, #204]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000d34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d36:	4b32      	ldr	r3, [pc, #200]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000d38:	2101      	movs	r1, #1
 8000d3a:	438a      	bics	r2, r1
 8000d3c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d3e:	f7ff fe05 	bl	800094c <HAL_GetTick>
 8000d42:	0003      	movs	r3, r0
 8000d44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d46:	e008      	b.n	8000d5a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d48:	f7ff fe00 	bl	800094c <HAL_GetTick>
 8000d4c:	0002      	movs	r2, r0
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d901      	bls.n	8000d5a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000d56:	2303      	movs	r3, #3
 8000d58:	e236      	b.n	80011c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d5a:	4b29      	ldr	r3, [pc, #164]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5e:	2202      	movs	r2, #2
 8000d60:	4013      	ands	r3, r2
 8000d62:	d1f1      	bne.n	8000d48 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2204      	movs	r2, #4
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	d100      	bne.n	8000d70 <HAL_RCC_OscConfig+0x2a8>
 8000d6e:	e0b5      	b.n	8000edc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d70:	201f      	movs	r0, #31
 8000d72:	183b      	adds	r3, r7, r0
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d78:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000d7a:	69da      	ldr	r2, [r3, #28]
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	055b      	lsls	r3, r3, #21
 8000d80:	4013      	ands	r3, r2
 8000d82:	d110      	bne.n	8000da6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d84:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000d86:	69da      	ldr	r2, [r3, #28]
 8000d88:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000d8a:	2180      	movs	r1, #128	; 0x80
 8000d8c:	0549      	lsls	r1, r1, #21
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	61da      	str	r2, [r3, #28]
 8000d92:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000d94:	69da      	ldr	r2, [r3, #28]
 8000d96:	2380      	movs	r3, #128	; 0x80
 8000d98:	055b      	lsls	r3, r3, #21
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000da0:	183b      	adds	r3, r7, r0
 8000da2:	2201      	movs	r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000da6:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <HAL_RCC_OscConfig+0x344>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	2380      	movs	r3, #128	; 0x80
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	4013      	ands	r3, r2
 8000db0:	d11a      	bne.n	8000de8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000db2:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <HAL_RCC_OscConfig+0x344>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <HAL_RCC_OscConfig+0x344>)
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	0049      	lsls	r1, r1, #1
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dc0:	f7ff fdc4 	bl	800094c <HAL_GetTick>
 8000dc4:	0003      	movs	r3, r0
 8000dc6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dc8:	e008      	b.n	8000ddc <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dca:	f7ff fdbf 	bl	800094c <HAL_GetTick>
 8000dce:	0002      	movs	r2, r0
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	2b64      	cmp	r3, #100	; 0x64
 8000dd6:	d901      	bls.n	8000ddc <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	e1f5      	b.n	80011c8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <HAL_RCC_OscConfig+0x344>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	2380      	movs	r3, #128	; 0x80
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	4013      	ands	r3, r2
 8000de6:	d0f0      	beq.n	8000dca <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d10f      	bne.n	8000e10 <HAL_RCC_OscConfig+0x348>
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000df2:	6a1a      	ldr	r2, [r3, #32]
 8000df4:	4b02      	ldr	r3, [pc, #8]	; (8000e00 <HAL_RCC_OscConfig+0x338>)
 8000df6:	2101      	movs	r1, #1
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	621a      	str	r2, [r3, #32]
 8000dfc:	e036      	b.n	8000e6c <HAL_RCC_OscConfig+0x3a4>
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	40021000 	.word	0x40021000
 8000e04:	fffeffff 	.word	0xfffeffff
 8000e08:	fffbffff 	.word	0xfffbffff
 8000e0c:	40007000 	.word	0x40007000
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d10c      	bne.n	8000e32 <HAL_RCC_OscConfig+0x36a>
 8000e18:	4bca      	ldr	r3, [pc, #808]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000e1a:	6a1a      	ldr	r2, [r3, #32]
 8000e1c:	4bc9      	ldr	r3, [pc, #804]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000e1e:	2101      	movs	r1, #1
 8000e20:	438a      	bics	r2, r1
 8000e22:	621a      	str	r2, [r3, #32]
 8000e24:	4bc7      	ldr	r3, [pc, #796]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000e26:	6a1a      	ldr	r2, [r3, #32]
 8000e28:	4bc6      	ldr	r3, [pc, #792]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000e2a:	2104      	movs	r1, #4
 8000e2c:	438a      	bics	r2, r1
 8000e2e:	621a      	str	r2, [r3, #32]
 8000e30:	e01c      	b.n	8000e6c <HAL_RCC_OscConfig+0x3a4>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	2b05      	cmp	r3, #5
 8000e38:	d10c      	bne.n	8000e54 <HAL_RCC_OscConfig+0x38c>
 8000e3a:	4bc2      	ldr	r3, [pc, #776]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000e3c:	6a1a      	ldr	r2, [r3, #32]
 8000e3e:	4bc1      	ldr	r3, [pc, #772]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000e40:	2104      	movs	r1, #4
 8000e42:	430a      	orrs	r2, r1
 8000e44:	621a      	str	r2, [r3, #32]
 8000e46:	4bbf      	ldr	r3, [pc, #764]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000e48:	6a1a      	ldr	r2, [r3, #32]
 8000e4a:	4bbe      	ldr	r3, [pc, #760]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	621a      	str	r2, [r3, #32]
 8000e52:	e00b      	b.n	8000e6c <HAL_RCC_OscConfig+0x3a4>
 8000e54:	4bbb      	ldr	r3, [pc, #748]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000e56:	6a1a      	ldr	r2, [r3, #32]
 8000e58:	4bba      	ldr	r3, [pc, #744]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	438a      	bics	r2, r1
 8000e5e:	621a      	str	r2, [r3, #32]
 8000e60:	4bb8      	ldr	r3, [pc, #736]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000e62:	6a1a      	ldr	r2, [r3, #32]
 8000e64:	4bb7      	ldr	r3, [pc, #732]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000e66:	2104      	movs	r1, #4
 8000e68:	438a      	bics	r2, r1
 8000e6a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d014      	beq.n	8000e9e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e74:	f7ff fd6a 	bl	800094c <HAL_GetTick>
 8000e78:	0003      	movs	r3, r0
 8000e7a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e7c:	e009      	b.n	8000e92 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e7e:	f7ff fd65 	bl	800094c <HAL_GetTick>
 8000e82:	0002      	movs	r2, r0
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	4aaf      	ldr	r2, [pc, #700]	; (8001148 <HAL_RCC_OscConfig+0x680>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d901      	bls.n	8000e92 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e19a      	b.n	80011c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e92:	4bac      	ldr	r3, [pc, #688]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000e94:	6a1b      	ldr	r3, [r3, #32]
 8000e96:	2202      	movs	r2, #2
 8000e98:	4013      	ands	r3, r2
 8000e9a:	d0f0      	beq.n	8000e7e <HAL_RCC_OscConfig+0x3b6>
 8000e9c:	e013      	b.n	8000ec6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e9e:	f7ff fd55 	bl	800094c <HAL_GetTick>
 8000ea2:	0003      	movs	r3, r0
 8000ea4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ea6:	e009      	b.n	8000ebc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ea8:	f7ff fd50 	bl	800094c <HAL_GetTick>
 8000eac:	0002      	movs	r2, r0
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	4aa5      	ldr	r2, [pc, #660]	; (8001148 <HAL_RCC_OscConfig+0x680>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d901      	bls.n	8000ebc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	e185      	b.n	80011c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ebc:	4ba1      	ldr	r3, [pc, #644]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000ebe:	6a1b      	ldr	r3, [r3, #32]
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	d1f0      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000ec6:	231f      	movs	r3, #31
 8000ec8:	18fb      	adds	r3, r7, r3
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d105      	bne.n	8000edc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ed0:	4b9c      	ldr	r3, [pc, #624]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000ed2:	69da      	ldr	r2, [r3, #28]
 8000ed4:	4b9b      	ldr	r3, [pc, #620]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000ed6:	499d      	ldr	r1, [pc, #628]	; (800114c <HAL_RCC_OscConfig+0x684>)
 8000ed8:	400a      	ands	r2, r1
 8000eda:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2210      	movs	r2, #16
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	d063      	beq.n	8000fae <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d12a      	bne.n	8000f44 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000eee:	4b95      	ldr	r3, [pc, #596]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000ef0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ef2:	4b94      	ldr	r3, [pc, #592]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000ef4:	2104      	movs	r1, #4
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000efa:	4b92      	ldr	r3, [pc, #584]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000efe:	4b91      	ldr	r3, [pc, #580]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000f00:	2101      	movs	r1, #1
 8000f02:	430a      	orrs	r2, r1
 8000f04:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f06:	f7ff fd21 	bl	800094c <HAL_GetTick>
 8000f0a:	0003      	movs	r3, r0
 8000f0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000f0e:	e008      	b.n	8000f22 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000f10:	f7ff fd1c 	bl	800094c <HAL_GetTick>
 8000f14:	0002      	movs	r2, r0
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d901      	bls.n	8000f22 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e152      	b.n	80011c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000f22:	4b88      	ldr	r3, [pc, #544]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f26:	2202      	movs	r2, #2
 8000f28:	4013      	ands	r3, r2
 8000f2a:	d0f1      	beq.n	8000f10 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000f2c:	4b85      	ldr	r3, [pc, #532]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f30:	22f8      	movs	r2, #248	; 0xf8
 8000f32:	4393      	bics	r3, r2
 8000f34:	0019      	movs	r1, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	00da      	lsls	r2, r3, #3
 8000f3c:	4b81      	ldr	r3, [pc, #516]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	635a      	str	r2, [r3, #52]	; 0x34
 8000f42:	e034      	b.n	8000fae <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	3305      	adds	r3, #5
 8000f4a:	d111      	bne.n	8000f70 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000f4c:	4b7d      	ldr	r3, [pc, #500]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f50:	4b7c      	ldr	r3, [pc, #496]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000f52:	2104      	movs	r1, #4
 8000f54:	438a      	bics	r2, r1
 8000f56:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000f58:	4b7a      	ldr	r3, [pc, #488]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f5c:	22f8      	movs	r2, #248	; 0xf8
 8000f5e:	4393      	bics	r3, r2
 8000f60:	0019      	movs	r1, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	00da      	lsls	r2, r3, #3
 8000f68:	4b76      	ldr	r3, [pc, #472]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	635a      	str	r2, [r3, #52]	; 0x34
 8000f6e:	e01e      	b.n	8000fae <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f70:	4b74      	ldr	r3, [pc, #464]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000f72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f74:	4b73      	ldr	r3, [pc, #460]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000f76:	2104      	movs	r1, #4
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000f7c:	4b71      	ldr	r3, [pc, #452]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000f7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f80:	4b70      	ldr	r3, [pc, #448]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000f82:	2101      	movs	r1, #1
 8000f84:	438a      	bics	r2, r1
 8000f86:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f88:	f7ff fce0 	bl	800094c <HAL_GetTick>
 8000f8c:	0003      	movs	r3, r0
 8000f8e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000f90:	e008      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000f92:	f7ff fcdb 	bl	800094c <HAL_GetTick>
 8000f96:	0002      	movs	r2, r0
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d901      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	e111      	b.n	80011c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000fa4:	4b67      	ldr	r3, [pc, #412]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa8:	2202      	movs	r2, #2
 8000faa:	4013      	ands	r3, r2
 8000fac:	d1f1      	bne.n	8000f92 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2220      	movs	r2, #32
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	d05c      	beq.n	8001072 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000fb8:	4b62      	ldr	r3, [pc, #392]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	220c      	movs	r2, #12
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	2b0c      	cmp	r3, #12
 8000fc2:	d00e      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000fc4:	4b5f      	ldr	r3, [pc, #380]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	220c      	movs	r2, #12
 8000fca:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000fcc:	2b08      	cmp	r3, #8
 8000fce:	d114      	bne.n	8000ffa <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000fd0:	4b5c      	ldr	r3, [pc, #368]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	23c0      	movs	r3, #192	; 0xc0
 8000fd6:	025b      	lsls	r3, r3, #9
 8000fd8:	401a      	ands	r2, r3
 8000fda:	23c0      	movs	r3, #192	; 0xc0
 8000fdc:	025b      	lsls	r3, r3, #9
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d10b      	bne.n	8000ffa <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000fe2:	4b58      	ldr	r3, [pc, #352]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8000fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fe6:	2380      	movs	r3, #128	; 0x80
 8000fe8:	029b      	lsls	r3, r3, #10
 8000fea:	4013      	ands	r3, r2
 8000fec:	d040      	beq.n	8001070 <HAL_RCC_OscConfig+0x5a8>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a1b      	ldr	r3, [r3, #32]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d03c      	beq.n	8001070 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e0e6      	b.n	80011c8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6a1b      	ldr	r3, [r3, #32]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d01b      	beq.n	800103a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001002:	4b50      	ldr	r3, [pc, #320]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8001004:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001006:	4b4f      	ldr	r3, [pc, #316]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8001008:	2180      	movs	r1, #128	; 0x80
 800100a:	0249      	lsls	r1, r1, #9
 800100c:	430a      	orrs	r2, r1
 800100e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001010:	f7ff fc9c 	bl	800094c <HAL_GetTick>
 8001014:	0003      	movs	r3, r0
 8001016:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001018:	e008      	b.n	800102c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800101a:	f7ff fc97 	bl	800094c <HAL_GetTick>
 800101e:	0002      	movs	r2, r0
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d901      	bls.n	800102c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001028:	2303      	movs	r3, #3
 800102a:	e0cd      	b.n	80011c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800102c:	4b45      	ldr	r3, [pc, #276]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 800102e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001030:	2380      	movs	r3, #128	; 0x80
 8001032:	029b      	lsls	r3, r3, #10
 8001034:	4013      	ands	r3, r2
 8001036:	d0f0      	beq.n	800101a <HAL_RCC_OscConfig+0x552>
 8001038:	e01b      	b.n	8001072 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800103a:	4b42      	ldr	r3, [pc, #264]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 800103c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800103e:	4b41      	ldr	r3, [pc, #260]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8001040:	4943      	ldr	r1, [pc, #268]	; (8001150 <HAL_RCC_OscConfig+0x688>)
 8001042:	400a      	ands	r2, r1
 8001044:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001046:	f7ff fc81 	bl	800094c <HAL_GetTick>
 800104a:	0003      	movs	r3, r0
 800104c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800104e:	e008      	b.n	8001062 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001050:	f7ff fc7c 	bl	800094c <HAL_GetTick>
 8001054:	0002      	movs	r2, r0
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b02      	cmp	r3, #2
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e0b2      	b.n	80011c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001062:	4b38      	ldr	r3, [pc, #224]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8001064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001066:	2380      	movs	r3, #128	; 0x80
 8001068:	029b      	lsls	r3, r3, #10
 800106a:	4013      	ands	r3, r2
 800106c:	d1f0      	bne.n	8001050 <HAL_RCC_OscConfig+0x588>
 800106e:	e000      	b.n	8001072 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001070:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001076:	2b00      	cmp	r3, #0
 8001078:	d100      	bne.n	800107c <HAL_RCC_OscConfig+0x5b4>
 800107a:	e0a4      	b.n	80011c6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800107c:	4b31      	ldr	r3, [pc, #196]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	220c      	movs	r2, #12
 8001082:	4013      	ands	r3, r2
 8001084:	2b08      	cmp	r3, #8
 8001086:	d100      	bne.n	800108a <HAL_RCC_OscConfig+0x5c2>
 8001088:	e078      	b.n	800117c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108e:	2b02      	cmp	r3, #2
 8001090:	d14c      	bne.n	800112c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001092:	4b2c      	ldr	r3, [pc, #176]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8001098:	492e      	ldr	r1, [pc, #184]	; (8001154 <HAL_RCC_OscConfig+0x68c>)
 800109a:	400a      	ands	r2, r1
 800109c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109e:	f7ff fc55 	bl	800094c <HAL_GetTick>
 80010a2:	0003      	movs	r3, r0
 80010a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010a8:	f7ff fc50 	bl	800094c <HAL_GetTick>
 80010ac:	0002      	movs	r2, r0
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e086      	b.n	80011c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ba:	4b22      	ldr	r3, [pc, #136]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	2380      	movs	r3, #128	; 0x80
 80010c0:	049b      	lsls	r3, r3, #18
 80010c2:	4013      	ands	r3, r2
 80010c4:	d1f0      	bne.n	80010a8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010c6:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 80010c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ca:	220f      	movs	r2, #15
 80010cc:	4393      	bics	r3, r2
 80010ce:	0019      	movs	r1, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010d4:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 80010d6:	430a      	orrs	r2, r1
 80010d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80010da:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	4a1e      	ldr	r2, [pc, #120]	; (8001158 <HAL_RCC_OscConfig+0x690>)
 80010e0:	4013      	ands	r3, r2
 80010e2:	0019      	movs	r1, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ec:	431a      	orrs	r2, r3
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 80010f0:	430a      	orrs	r2, r1
 80010f2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 80010fa:	2180      	movs	r1, #128	; 0x80
 80010fc:	0449      	lsls	r1, r1, #17
 80010fe:	430a      	orrs	r2, r1
 8001100:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001102:	f7ff fc23 	bl	800094c <HAL_GetTick>
 8001106:	0003      	movs	r3, r0
 8001108:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800110c:	f7ff fc1e 	bl	800094c <HAL_GetTick>
 8001110:	0002      	movs	r2, r0
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e054      	b.n	80011c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	049b      	lsls	r3, r3, #18
 8001126:	4013      	ands	r3, r2
 8001128:	d0f0      	beq.n	800110c <HAL_RCC_OscConfig+0x644>
 800112a:	e04c      	b.n	80011c6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <HAL_RCC_OscConfig+0x67c>)
 8001132:	4908      	ldr	r1, [pc, #32]	; (8001154 <HAL_RCC_OscConfig+0x68c>)
 8001134:	400a      	ands	r2, r1
 8001136:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001138:	f7ff fc08 	bl	800094c <HAL_GetTick>
 800113c:	0003      	movs	r3, r0
 800113e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001140:	e015      	b.n	800116e <HAL_RCC_OscConfig+0x6a6>
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	40021000 	.word	0x40021000
 8001148:	00001388 	.word	0x00001388
 800114c:	efffffff 	.word	0xefffffff
 8001150:	fffeffff 	.word	0xfffeffff
 8001154:	feffffff 	.word	0xfeffffff
 8001158:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800115c:	f7ff fbf6 	bl	800094c <HAL_GetTick>
 8001160:	0002      	movs	r2, r0
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e02c      	b.n	80011c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116e:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <HAL_RCC_OscConfig+0x708>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	2380      	movs	r3, #128	; 0x80
 8001174:	049b      	lsls	r3, r3, #18
 8001176:	4013      	ands	r3, r2
 8001178:	d1f0      	bne.n	800115c <HAL_RCC_OscConfig+0x694>
 800117a:	e024      	b.n	80011c6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	2b01      	cmp	r3, #1
 8001182:	d101      	bne.n	8001188 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e01f      	b.n	80011c8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <HAL_RCC_OscConfig+0x708>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <HAL_RCC_OscConfig+0x708>)
 8001190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001192:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	23c0      	movs	r3, #192	; 0xc0
 8001198:	025b      	lsls	r3, r3, #9
 800119a:	401a      	ands	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d10e      	bne.n	80011c2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	220f      	movs	r2, #15
 80011a8:	401a      	ands	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d107      	bne.n	80011c2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	23f0      	movs	r3, #240	; 0xf0
 80011b6:	039b      	lsls	r3, r3, #14
 80011b8:	401a      	ands	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80011be:	429a      	cmp	r2, r3
 80011c0:	d001      	beq.n	80011c6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	0018      	movs	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b008      	add	sp, #32
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40021000 	.word	0x40021000

080011d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e0bf      	b.n	8001368 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011e8:	4b61      	ldr	r3, [pc, #388]	; (8001370 <HAL_RCC_ClockConfig+0x19c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2201      	movs	r2, #1
 80011ee:	4013      	ands	r3, r2
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d911      	bls.n	800121a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f6:	4b5e      	ldr	r3, [pc, #376]	; (8001370 <HAL_RCC_ClockConfig+0x19c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2201      	movs	r2, #1
 80011fc:	4393      	bics	r3, r2
 80011fe:	0019      	movs	r1, r3
 8001200:	4b5b      	ldr	r3, [pc, #364]	; (8001370 <HAL_RCC_ClockConfig+0x19c>)
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	430a      	orrs	r2, r1
 8001206:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001208:	4b59      	ldr	r3, [pc, #356]	; (8001370 <HAL_RCC_ClockConfig+0x19c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2201      	movs	r2, #1
 800120e:	4013      	ands	r3, r2
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	429a      	cmp	r2, r3
 8001214:	d001      	beq.n	800121a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e0a6      	b.n	8001368 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2202      	movs	r2, #2
 8001220:	4013      	ands	r3, r2
 8001222:	d015      	beq.n	8001250 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2204      	movs	r2, #4
 800122a:	4013      	ands	r3, r2
 800122c:	d006      	beq.n	800123c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800122e:	4b51      	ldr	r3, [pc, #324]	; (8001374 <HAL_RCC_ClockConfig+0x1a0>)
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	4b50      	ldr	r3, [pc, #320]	; (8001374 <HAL_RCC_ClockConfig+0x1a0>)
 8001234:	21e0      	movs	r1, #224	; 0xe0
 8001236:	00c9      	lsls	r1, r1, #3
 8001238:	430a      	orrs	r2, r1
 800123a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800123c:	4b4d      	ldr	r3, [pc, #308]	; (8001374 <HAL_RCC_ClockConfig+0x1a0>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	22f0      	movs	r2, #240	; 0xf0
 8001242:	4393      	bics	r3, r2
 8001244:	0019      	movs	r1, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689a      	ldr	r2, [r3, #8]
 800124a:	4b4a      	ldr	r3, [pc, #296]	; (8001374 <HAL_RCC_ClockConfig+0x1a0>)
 800124c:	430a      	orrs	r2, r1
 800124e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2201      	movs	r2, #1
 8001256:	4013      	ands	r3, r2
 8001258:	d04c      	beq.n	80012f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d107      	bne.n	8001272 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001262:	4b44      	ldr	r3, [pc, #272]	; (8001374 <HAL_RCC_ClockConfig+0x1a0>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	2380      	movs	r3, #128	; 0x80
 8001268:	029b      	lsls	r3, r3, #10
 800126a:	4013      	ands	r3, r2
 800126c:	d120      	bne.n	80012b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e07a      	b.n	8001368 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d107      	bne.n	800128a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800127a:	4b3e      	ldr	r3, [pc, #248]	; (8001374 <HAL_RCC_ClockConfig+0x1a0>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	2380      	movs	r3, #128	; 0x80
 8001280:	049b      	lsls	r3, r3, #18
 8001282:	4013      	ands	r3, r2
 8001284:	d114      	bne.n	80012b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e06e      	b.n	8001368 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b03      	cmp	r3, #3
 8001290:	d107      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001292:	4b38      	ldr	r3, [pc, #224]	; (8001374 <HAL_RCC_ClockConfig+0x1a0>)
 8001294:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	029b      	lsls	r3, r3, #10
 800129a:	4013      	ands	r3, r2
 800129c:	d108      	bne.n	80012b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e062      	b.n	8001368 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a2:	4b34      	ldr	r3, [pc, #208]	; (8001374 <HAL_RCC_ClockConfig+0x1a0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2202      	movs	r2, #2
 80012a8:	4013      	ands	r3, r2
 80012aa:	d101      	bne.n	80012b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e05b      	b.n	8001368 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012b0:	4b30      	ldr	r3, [pc, #192]	; (8001374 <HAL_RCC_ClockConfig+0x1a0>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2203      	movs	r2, #3
 80012b6:	4393      	bics	r3, r2
 80012b8:	0019      	movs	r1, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <HAL_RCC_ClockConfig+0x1a0>)
 80012c0:	430a      	orrs	r2, r1
 80012c2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012c4:	f7ff fb42 	bl	800094c <HAL_GetTick>
 80012c8:	0003      	movs	r3, r0
 80012ca:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012cc:	e009      	b.n	80012e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012ce:	f7ff fb3d 	bl	800094c <HAL_GetTick>
 80012d2:	0002      	movs	r2, r0
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	4a27      	ldr	r2, [pc, #156]	; (8001378 <HAL_RCC_ClockConfig+0x1a4>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e042      	b.n	8001368 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e2:	4b24      	ldr	r3, [pc, #144]	; (8001374 <HAL_RCC_ClockConfig+0x1a0>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	220c      	movs	r2, #12
 80012e8:	401a      	ands	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d1ec      	bne.n	80012ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012f4:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <HAL_RCC_ClockConfig+0x19c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2201      	movs	r2, #1
 80012fa:	4013      	ands	r3, r2
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d211      	bcs.n	8001326 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001302:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <HAL_RCC_ClockConfig+0x19c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2201      	movs	r2, #1
 8001308:	4393      	bics	r3, r2
 800130a:	0019      	movs	r1, r3
 800130c:	4b18      	ldr	r3, [pc, #96]	; (8001370 <HAL_RCC_ClockConfig+0x19c>)
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	430a      	orrs	r2, r1
 8001312:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001314:	4b16      	ldr	r3, [pc, #88]	; (8001370 <HAL_RCC_ClockConfig+0x19c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2201      	movs	r2, #1
 800131a:	4013      	ands	r3, r2
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	429a      	cmp	r2, r3
 8001320:	d001      	beq.n	8001326 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e020      	b.n	8001368 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2204      	movs	r2, #4
 800132c:	4013      	ands	r3, r2
 800132e:	d009      	beq.n	8001344 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001330:	4b10      	ldr	r3, [pc, #64]	; (8001374 <HAL_RCC_ClockConfig+0x1a0>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	4a11      	ldr	r2, [pc, #68]	; (800137c <HAL_RCC_ClockConfig+0x1a8>)
 8001336:	4013      	ands	r3, r2
 8001338:	0019      	movs	r1, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68da      	ldr	r2, [r3, #12]
 800133e:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <HAL_RCC_ClockConfig+0x1a0>)
 8001340:	430a      	orrs	r2, r1
 8001342:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001344:	f000 f820 	bl	8001388 <HAL_RCC_GetSysClockFreq>
 8001348:	0001      	movs	r1, r0
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <HAL_RCC_ClockConfig+0x1a0>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	091b      	lsrs	r3, r3, #4
 8001350:	220f      	movs	r2, #15
 8001352:	4013      	ands	r3, r2
 8001354:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <HAL_RCC_ClockConfig+0x1ac>)
 8001356:	5cd3      	ldrb	r3, [r2, r3]
 8001358:	000a      	movs	r2, r1
 800135a:	40da      	lsrs	r2, r3
 800135c:	4b09      	ldr	r3, [pc, #36]	; (8001384 <HAL_RCC_ClockConfig+0x1b0>)
 800135e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001360:	2003      	movs	r0, #3
 8001362:	f7ff faad 	bl	80008c0 <HAL_InitTick>
  
  return HAL_OK;
 8001366:	2300      	movs	r3, #0
}
 8001368:	0018      	movs	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	b004      	add	sp, #16
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40022000 	.word	0x40022000
 8001374:	40021000 	.word	0x40021000
 8001378:	00001388 	.word	0x00001388
 800137c:	fffff8ff 	.word	0xfffff8ff
 8001380:	08001e90 	.word	0x08001e90
 8001384:	20000000 	.word	0x20000000

08001388 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	2300      	movs	r3, #0
 800139c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80013a2:	4b2d      	ldr	r3, [pc, #180]	; (8001458 <HAL_RCC_GetSysClockFreq+0xd0>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	220c      	movs	r2, #12
 80013ac:	4013      	ands	r3, r2
 80013ae:	2b0c      	cmp	r3, #12
 80013b0:	d046      	beq.n	8001440 <HAL_RCC_GetSysClockFreq+0xb8>
 80013b2:	d848      	bhi.n	8001446 <HAL_RCC_GetSysClockFreq+0xbe>
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	d002      	beq.n	80013be <HAL_RCC_GetSysClockFreq+0x36>
 80013b8:	2b08      	cmp	r3, #8
 80013ba:	d003      	beq.n	80013c4 <HAL_RCC_GetSysClockFreq+0x3c>
 80013bc:	e043      	b.n	8001446 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013be:	4b27      	ldr	r3, [pc, #156]	; (800145c <HAL_RCC_GetSysClockFreq+0xd4>)
 80013c0:	613b      	str	r3, [r7, #16]
      break;
 80013c2:	e043      	b.n	800144c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	0c9b      	lsrs	r3, r3, #18
 80013c8:	220f      	movs	r2, #15
 80013ca:	4013      	ands	r3, r2
 80013cc:	4a24      	ldr	r2, [pc, #144]	; (8001460 <HAL_RCC_GetSysClockFreq+0xd8>)
 80013ce:	5cd3      	ldrb	r3, [r2, r3]
 80013d0:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80013d2:	4b21      	ldr	r3, [pc, #132]	; (8001458 <HAL_RCC_GetSysClockFreq+0xd0>)
 80013d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d6:	220f      	movs	r2, #15
 80013d8:	4013      	ands	r3, r2
 80013da:	4a22      	ldr	r2, [pc, #136]	; (8001464 <HAL_RCC_GetSysClockFreq+0xdc>)
 80013dc:	5cd3      	ldrb	r3, [r2, r3]
 80013de:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	23c0      	movs	r3, #192	; 0xc0
 80013e4:	025b      	lsls	r3, r3, #9
 80013e6:	401a      	ands	r2, r3
 80013e8:	2380      	movs	r3, #128	; 0x80
 80013ea:	025b      	lsls	r3, r3, #9
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d109      	bne.n	8001404 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	481a      	ldr	r0, [pc, #104]	; (800145c <HAL_RCC_GetSysClockFreq+0xd4>)
 80013f4:	f7fe fe90 	bl	8000118 <__udivsi3>
 80013f8:	0003      	movs	r3, r0
 80013fa:	001a      	movs	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4353      	muls	r3, r2
 8001400:	617b      	str	r3, [r7, #20]
 8001402:	e01a      	b.n	800143a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	23c0      	movs	r3, #192	; 0xc0
 8001408:	025b      	lsls	r3, r3, #9
 800140a:	401a      	ands	r2, r3
 800140c:	23c0      	movs	r3, #192	; 0xc0
 800140e:	025b      	lsls	r3, r3, #9
 8001410:	429a      	cmp	r2, r3
 8001412:	d109      	bne.n	8001428 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001414:	68b9      	ldr	r1, [r7, #8]
 8001416:	4814      	ldr	r0, [pc, #80]	; (8001468 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001418:	f7fe fe7e 	bl	8000118 <__udivsi3>
 800141c:	0003      	movs	r3, r0
 800141e:	001a      	movs	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4353      	muls	r3, r2
 8001424:	617b      	str	r3, [r7, #20]
 8001426:	e008      	b.n	800143a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	480c      	ldr	r0, [pc, #48]	; (800145c <HAL_RCC_GetSysClockFreq+0xd4>)
 800142c:	f7fe fe74 	bl	8000118 <__udivsi3>
 8001430:	0003      	movs	r3, r0
 8001432:	001a      	movs	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4353      	muls	r3, r2
 8001438:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	613b      	str	r3, [r7, #16]
      break;
 800143e:	e005      	b.n	800144c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001440:	4b09      	ldr	r3, [pc, #36]	; (8001468 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001442:	613b      	str	r3, [r7, #16]
      break;
 8001444:	e002      	b.n	800144c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001448:	613b      	str	r3, [r7, #16]
      break;
 800144a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800144c:	693b      	ldr	r3, [r7, #16]
}
 800144e:	0018      	movs	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	b006      	add	sp, #24
 8001454:	bd80      	pop	{r7, pc}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	40021000 	.word	0x40021000
 800145c:	007a1200 	.word	0x007a1200
 8001460:	08001ea0 	.word	0x08001ea0
 8001464:	08001eb0 	.word	0x08001eb0
 8001468:	02dc6c00 	.word	0x02dc6c00

0800146c <sniprintf>:
 800146c:	b40c      	push	{r2, r3}
 800146e:	b530      	push	{r4, r5, lr}
 8001470:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <sniprintf+0x64>)
 8001472:	000c      	movs	r4, r1
 8001474:	681d      	ldr	r5, [r3, #0]
 8001476:	b09d      	sub	sp, #116	; 0x74
 8001478:	2900      	cmp	r1, #0
 800147a:	da08      	bge.n	800148e <sniprintf+0x22>
 800147c:	238b      	movs	r3, #139	; 0x8b
 800147e:	2001      	movs	r0, #1
 8001480:	602b      	str	r3, [r5, #0]
 8001482:	4240      	negs	r0, r0
 8001484:	b01d      	add	sp, #116	; 0x74
 8001486:	bc30      	pop	{r4, r5}
 8001488:	bc08      	pop	{r3}
 800148a:	b002      	add	sp, #8
 800148c:	4718      	bx	r3
 800148e:	2382      	movs	r3, #130	; 0x82
 8001490:	466a      	mov	r2, sp
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	8293      	strh	r3, [r2, #20]
 8001496:	2300      	movs	r3, #0
 8001498:	9002      	str	r0, [sp, #8]
 800149a:	9006      	str	r0, [sp, #24]
 800149c:	4299      	cmp	r1, r3
 800149e:	d000      	beq.n	80014a2 <sniprintf+0x36>
 80014a0:	1e4b      	subs	r3, r1, #1
 80014a2:	9304      	str	r3, [sp, #16]
 80014a4:	9307      	str	r3, [sp, #28]
 80014a6:	2301      	movs	r3, #1
 80014a8:	466a      	mov	r2, sp
 80014aa:	425b      	negs	r3, r3
 80014ac:	82d3      	strh	r3, [r2, #22]
 80014ae:	0028      	movs	r0, r5
 80014b0:	ab21      	add	r3, sp, #132	; 0x84
 80014b2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80014b4:	a902      	add	r1, sp, #8
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	f000 f9a0 	bl	80017fc <_svfiprintf_r>
 80014bc:	1c43      	adds	r3, r0, #1
 80014be:	da01      	bge.n	80014c4 <sniprintf+0x58>
 80014c0:	238b      	movs	r3, #139	; 0x8b
 80014c2:	602b      	str	r3, [r5, #0]
 80014c4:	2c00      	cmp	r4, #0
 80014c6:	d0dd      	beq.n	8001484 <sniprintf+0x18>
 80014c8:	2200      	movs	r2, #0
 80014ca:	9b02      	ldr	r3, [sp, #8]
 80014cc:	701a      	strb	r2, [r3, #0]
 80014ce:	e7d9      	b.n	8001484 <sniprintf+0x18>
 80014d0:	20000058 	.word	0x20000058

080014d4 <memset>:
 80014d4:	0003      	movs	r3, r0
 80014d6:	1882      	adds	r2, r0, r2
 80014d8:	4293      	cmp	r3, r2
 80014da:	d100      	bne.n	80014de <memset+0xa>
 80014dc:	4770      	bx	lr
 80014de:	7019      	strb	r1, [r3, #0]
 80014e0:	3301      	adds	r3, #1
 80014e2:	e7f9      	b.n	80014d8 <memset+0x4>

080014e4 <__errno>:
 80014e4:	4b01      	ldr	r3, [pc, #4]	; (80014ec <__errno+0x8>)
 80014e6:	6818      	ldr	r0, [r3, #0]
 80014e8:	4770      	bx	lr
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	20000058 	.word	0x20000058

080014f0 <__libc_init_array>:
 80014f0:	b570      	push	{r4, r5, r6, lr}
 80014f2:	2600      	movs	r6, #0
 80014f4:	4c0c      	ldr	r4, [pc, #48]	; (8001528 <__libc_init_array+0x38>)
 80014f6:	4d0d      	ldr	r5, [pc, #52]	; (800152c <__libc_init_array+0x3c>)
 80014f8:	1b64      	subs	r4, r4, r5
 80014fa:	10a4      	asrs	r4, r4, #2
 80014fc:	42a6      	cmp	r6, r4
 80014fe:	d109      	bne.n	8001514 <__libc_init_array+0x24>
 8001500:	2600      	movs	r6, #0
 8001502:	f000 fc6d 	bl	8001de0 <_init>
 8001506:	4c0a      	ldr	r4, [pc, #40]	; (8001530 <__libc_init_array+0x40>)
 8001508:	4d0a      	ldr	r5, [pc, #40]	; (8001534 <__libc_init_array+0x44>)
 800150a:	1b64      	subs	r4, r4, r5
 800150c:	10a4      	asrs	r4, r4, #2
 800150e:	42a6      	cmp	r6, r4
 8001510:	d105      	bne.n	800151e <__libc_init_array+0x2e>
 8001512:	bd70      	pop	{r4, r5, r6, pc}
 8001514:	00b3      	lsls	r3, r6, #2
 8001516:	58eb      	ldr	r3, [r5, r3]
 8001518:	4798      	blx	r3
 800151a:	3601      	adds	r6, #1
 800151c:	e7ee      	b.n	80014fc <__libc_init_array+0xc>
 800151e:	00b3      	lsls	r3, r6, #2
 8001520:	58eb      	ldr	r3, [r5, r3]
 8001522:	4798      	blx	r3
 8001524:	3601      	adds	r6, #1
 8001526:	e7f2      	b.n	800150e <__libc_init_array+0x1e>
 8001528:	08001ef4 	.word	0x08001ef4
 800152c:	08001ef4 	.word	0x08001ef4
 8001530:	08001ef8 	.word	0x08001ef8
 8001534:	08001ef4 	.word	0x08001ef4

08001538 <__retarget_lock_acquire_recursive>:
 8001538:	4770      	bx	lr

0800153a <__retarget_lock_release_recursive>:
 800153a:	4770      	bx	lr

0800153c <_free_r>:
 800153c:	b570      	push	{r4, r5, r6, lr}
 800153e:	0005      	movs	r5, r0
 8001540:	2900      	cmp	r1, #0
 8001542:	d010      	beq.n	8001566 <_free_r+0x2a>
 8001544:	1f0c      	subs	r4, r1, #4
 8001546:	6823      	ldr	r3, [r4, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	da00      	bge.n	800154e <_free_r+0x12>
 800154c:	18e4      	adds	r4, r4, r3
 800154e:	0028      	movs	r0, r5
 8001550:	f000 f8e2 	bl	8001718 <__malloc_lock>
 8001554:	4a1d      	ldr	r2, [pc, #116]	; (80015cc <_free_r+0x90>)
 8001556:	6813      	ldr	r3, [r2, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d105      	bne.n	8001568 <_free_r+0x2c>
 800155c:	6063      	str	r3, [r4, #4]
 800155e:	6014      	str	r4, [r2, #0]
 8001560:	0028      	movs	r0, r5
 8001562:	f000 f8e1 	bl	8001728 <__malloc_unlock>
 8001566:	bd70      	pop	{r4, r5, r6, pc}
 8001568:	42a3      	cmp	r3, r4
 800156a:	d908      	bls.n	800157e <_free_r+0x42>
 800156c:	6820      	ldr	r0, [r4, #0]
 800156e:	1821      	adds	r1, r4, r0
 8001570:	428b      	cmp	r3, r1
 8001572:	d1f3      	bne.n	800155c <_free_r+0x20>
 8001574:	6819      	ldr	r1, [r3, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	1809      	adds	r1, r1, r0
 800157a:	6021      	str	r1, [r4, #0]
 800157c:	e7ee      	b.n	800155c <_free_r+0x20>
 800157e:	001a      	movs	r2, r3
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <_free_r+0x4e>
 8001586:	42a3      	cmp	r3, r4
 8001588:	d9f9      	bls.n	800157e <_free_r+0x42>
 800158a:	6811      	ldr	r1, [r2, #0]
 800158c:	1850      	adds	r0, r2, r1
 800158e:	42a0      	cmp	r0, r4
 8001590:	d10b      	bne.n	80015aa <_free_r+0x6e>
 8001592:	6820      	ldr	r0, [r4, #0]
 8001594:	1809      	adds	r1, r1, r0
 8001596:	1850      	adds	r0, r2, r1
 8001598:	6011      	str	r1, [r2, #0]
 800159a:	4283      	cmp	r3, r0
 800159c:	d1e0      	bne.n	8001560 <_free_r+0x24>
 800159e:	6818      	ldr	r0, [r3, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	1841      	adds	r1, r0, r1
 80015a4:	6011      	str	r1, [r2, #0]
 80015a6:	6053      	str	r3, [r2, #4]
 80015a8:	e7da      	b.n	8001560 <_free_r+0x24>
 80015aa:	42a0      	cmp	r0, r4
 80015ac:	d902      	bls.n	80015b4 <_free_r+0x78>
 80015ae:	230c      	movs	r3, #12
 80015b0:	602b      	str	r3, [r5, #0]
 80015b2:	e7d5      	b.n	8001560 <_free_r+0x24>
 80015b4:	6820      	ldr	r0, [r4, #0]
 80015b6:	1821      	adds	r1, r4, r0
 80015b8:	428b      	cmp	r3, r1
 80015ba:	d103      	bne.n	80015c4 <_free_r+0x88>
 80015bc:	6819      	ldr	r1, [r3, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	1809      	adds	r1, r1, r0
 80015c2:	6021      	str	r1, [r4, #0]
 80015c4:	6063      	str	r3, [r4, #4]
 80015c6:	6054      	str	r4, [r2, #4]
 80015c8:	e7ca      	b.n	8001560 <_free_r+0x24>
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	200001c4 	.word	0x200001c4

080015d0 <sbrk_aligned>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	4e0f      	ldr	r6, [pc, #60]	; (8001610 <sbrk_aligned+0x40>)
 80015d4:	000d      	movs	r5, r1
 80015d6:	6831      	ldr	r1, [r6, #0]
 80015d8:	0004      	movs	r4, r0
 80015da:	2900      	cmp	r1, #0
 80015dc:	d102      	bne.n	80015e4 <sbrk_aligned+0x14>
 80015de:	f000 fba1 	bl	8001d24 <_sbrk_r>
 80015e2:	6030      	str	r0, [r6, #0]
 80015e4:	0029      	movs	r1, r5
 80015e6:	0020      	movs	r0, r4
 80015e8:	f000 fb9c 	bl	8001d24 <_sbrk_r>
 80015ec:	1c43      	adds	r3, r0, #1
 80015ee:	d00a      	beq.n	8001606 <sbrk_aligned+0x36>
 80015f0:	2303      	movs	r3, #3
 80015f2:	1cc5      	adds	r5, r0, #3
 80015f4:	439d      	bics	r5, r3
 80015f6:	42a8      	cmp	r0, r5
 80015f8:	d007      	beq.n	800160a <sbrk_aligned+0x3a>
 80015fa:	1a29      	subs	r1, r5, r0
 80015fc:	0020      	movs	r0, r4
 80015fe:	f000 fb91 	bl	8001d24 <_sbrk_r>
 8001602:	3001      	adds	r0, #1
 8001604:	d101      	bne.n	800160a <sbrk_aligned+0x3a>
 8001606:	2501      	movs	r5, #1
 8001608:	426d      	negs	r5, r5
 800160a:	0028      	movs	r0, r5
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	200001c8 	.word	0x200001c8

08001614 <_malloc_r>:
 8001614:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001616:	2203      	movs	r2, #3
 8001618:	1ccb      	adds	r3, r1, #3
 800161a:	4393      	bics	r3, r2
 800161c:	3308      	adds	r3, #8
 800161e:	0006      	movs	r6, r0
 8001620:	001f      	movs	r7, r3
 8001622:	2b0c      	cmp	r3, #12
 8001624:	d238      	bcs.n	8001698 <_malloc_r+0x84>
 8001626:	270c      	movs	r7, #12
 8001628:	42b9      	cmp	r1, r7
 800162a:	d837      	bhi.n	800169c <_malloc_r+0x88>
 800162c:	0030      	movs	r0, r6
 800162e:	f000 f873 	bl	8001718 <__malloc_lock>
 8001632:	4b38      	ldr	r3, [pc, #224]	; (8001714 <_malloc_r+0x100>)
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	001c      	movs	r4, r3
 800163a:	2c00      	cmp	r4, #0
 800163c:	d133      	bne.n	80016a6 <_malloc_r+0x92>
 800163e:	0039      	movs	r1, r7
 8001640:	0030      	movs	r0, r6
 8001642:	f7ff ffc5 	bl	80015d0 <sbrk_aligned>
 8001646:	0004      	movs	r4, r0
 8001648:	1c43      	adds	r3, r0, #1
 800164a:	d15e      	bne.n	800170a <_malloc_r+0xf6>
 800164c:	9b00      	ldr	r3, [sp, #0]
 800164e:	681c      	ldr	r4, [r3, #0]
 8001650:	0025      	movs	r5, r4
 8001652:	2d00      	cmp	r5, #0
 8001654:	d14e      	bne.n	80016f4 <_malloc_r+0xe0>
 8001656:	2c00      	cmp	r4, #0
 8001658:	d051      	beq.n	80016fe <_malloc_r+0xea>
 800165a:	6823      	ldr	r3, [r4, #0]
 800165c:	0029      	movs	r1, r5
 800165e:	18e3      	adds	r3, r4, r3
 8001660:	0030      	movs	r0, r6
 8001662:	9301      	str	r3, [sp, #4]
 8001664:	f000 fb5e 	bl	8001d24 <_sbrk_r>
 8001668:	9b01      	ldr	r3, [sp, #4]
 800166a:	4283      	cmp	r3, r0
 800166c:	d147      	bne.n	80016fe <_malloc_r+0xea>
 800166e:	6823      	ldr	r3, [r4, #0]
 8001670:	0030      	movs	r0, r6
 8001672:	1aff      	subs	r7, r7, r3
 8001674:	0039      	movs	r1, r7
 8001676:	f7ff ffab 	bl	80015d0 <sbrk_aligned>
 800167a:	3001      	adds	r0, #1
 800167c:	d03f      	beq.n	80016fe <_malloc_r+0xea>
 800167e:	6823      	ldr	r3, [r4, #0]
 8001680:	19db      	adds	r3, r3, r7
 8001682:	6023      	str	r3, [r4, #0]
 8001684:	9b00      	ldr	r3, [sp, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d040      	beq.n	800170e <_malloc_r+0xfa>
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	42a2      	cmp	r2, r4
 8001690:	d133      	bne.n	80016fa <_malloc_r+0xe6>
 8001692:	2200      	movs	r2, #0
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	e014      	b.n	80016c2 <_malloc_r+0xae>
 8001698:	2b00      	cmp	r3, #0
 800169a:	dac5      	bge.n	8001628 <_malloc_r+0x14>
 800169c:	230c      	movs	r3, #12
 800169e:	2500      	movs	r5, #0
 80016a0:	6033      	str	r3, [r6, #0]
 80016a2:	0028      	movs	r0, r5
 80016a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80016a6:	6821      	ldr	r1, [r4, #0]
 80016a8:	1bc9      	subs	r1, r1, r7
 80016aa:	d420      	bmi.n	80016ee <_malloc_r+0xda>
 80016ac:	290b      	cmp	r1, #11
 80016ae:	d918      	bls.n	80016e2 <_malloc_r+0xce>
 80016b0:	19e2      	adds	r2, r4, r7
 80016b2:	6027      	str	r7, [r4, #0]
 80016b4:	42a3      	cmp	r3, r4
 80016b6:	d112      	bne.n	80016de <_malloc_r+0xca>
 80016b8:	9b00      	ldr	r3, [sp, #0]
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	6863      	ldr	r3, [r4, #4]
 80016be:	6011      	str	r1, [r2, #0]
 80016c0:	6053      	str	r3, [r2, #4]
 80016c2:	0030      	movs	r0, r6
 80016c4:	0025      	movs	r5, r4
 80016c6:	f000 f82f 	bl	8001728 <__malloc_unlock>
 80016ca:	2207      	movs	r2, #7
 80016cc:	350b      	adds	r5, #11
 80016ce:	1d23      	adds	r3, r4, #4
 80016d0:	4395      	bics	r5, r2
 80016d2:	1aea      	subs	r2, r5, r3
 80016d4:	429d      	cmp	r5, r3
 80016d6:	d0e4      	beq.n	80016a2 <_malloc_r+0x8e>
 80016d8:	1b5b      	subs	r3, r3, r5
 80016da:	50a3      	str	r3, [r4, r2]
 80016dc:	e7e1      	b.n	80016a2 <_malloc_r+0x8e>
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	e7ec      	b.n	80016bc <_malloc_r+0xa8>
 80016e2:	6862      	ldr	r2, [r4, #4]
 80016e4:	42a3      	cmp	r3, r4
 80016e6:	d1d5      	bne.n	8001694 <_malloc_r+0x80>
 80016e8:	9b00      	ldr	r3, [sp, #0]
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	e7e9      	b.n	80016c2 <_malloc_r+0xae>
 80016ee:	0023      	movs	r3, r4
 80016f0:	6864      	ldr	r4, [r4, #4]
 80016f2:	e7a2      	b.n	800163a <_malloc_r+0x26>
 80016f4:	002c      	movs	r4, r5
 80016f6:	686d      	ldr	r5, [r5, #4]
 80016f8:	e7ab      	b.n	8001652 <_malloc_r+0x3e>
 80016fa:	0013      	movs	r3, r2
 80016fc:	e7c4      	b.n	8001688 <_malloc_r+0x74>
 80016fe:	230c      	movs	r3, #12
 8001700:	0030      	movs	r0, r6
 8001702:	6033      	str	r3, [r6, #0]
 8001704:	f000 f810 	bl	8001728 <__malloc_unlock>
 8001708:	e7cb      	b.n	80016a2 <_malloc_r+0x8e>
 800170a:	6027      	str	r7, [r4, #0]
 800170c:	e7d9      	b.n	80016c2 <_malloc_r+0xae>
 800170e:	605b      	str	r3, [r3, #4]
 8001710:	deff      	udf	#255	; 0xff
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	200001c4 	.word	0x200001c4

08001718 <__malloc_lock>:
 8001718:	b510      	push	{r4, lr}
 800171a:	4802      	ldr	r0, [pc, #8]	; (8001724 <__malloc_lock+0xc>)
 800171c:	f7ff ff0c 	bl	8001538 <__retarget_lock_acquire_recursive>
 8001720:	bd10      	pop	{r4, pc}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	200001c0 	.word	0x200001c0

08001728 <__malloc_unlock>:
 8001728:	b510      	push	{r4, lr}
 800172a:	4802      	ldr	r0, [pc, #8]	; (8001734 <__malloc_unlock+0xc>)
 800172c:	f7ff ff05 	bl	800153a <__retarget_lock_release_recursive>
 8001730:	bd10      	pop	{r4, pc}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	200001c0 	.word	0x200001c0

08001738 <__ssputs_r>:
 8001738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800173a:	b085      	sub	sp, #20
 800173c:	9301      	str	r3, [sp, #4]
 800173e:	9203      	str	r2, [sp, #12]
 8001740:	688e      	ldr	r6, [r1, #8]
 8001742:	9a01      	ldr	r2, [sp, #4]
 8001744:	0007      	movs	r7, r0
 8001746:	000c      	movs	r4, r1
 8001748:	680b      	ldr	r3, [r1, #0]
 800174a:	4296      	cmp	r6, r2
 800174c:	d831      	bhi.n	80017b2 <__ssputs_r+0x7a>
 800174e:	898a      	ldrh	r2, [r1, #12]
 8001750:	2190      	movs	r1, #144	; 0x90
 8001752:	00c9      	lsls	r1, r1, #3
 8001754:	420a      	tst	r2, r1
 8001756:	d029      	beq.n	80017ac <__ssputs_r+0x74>
 8001758:	2003      	movs	r0, #3
 800175a:	6921      	ldr	r1, [r4, #16]
 800175c:	1a5b      	subs	r3, r3, r1
 800175e:	9302      	str	r3, [sp, #8]
 8001760:	6963      	ldr	r3, [r4, #20]
 8001762:	4343      	muls	r3, r0
 8001764:	0fdd      	lsrs	r5, r3, #31
 8001766:	18ed      	adds	r5, r5, r3
 8001768:	9b01      	ldr	r3, [sp, #4]
 800176a:	9802      	ldr	r0, [sp, #8]
 800176c:	3301      	adds	r3, #1
 800176e:	181b      	adds	r3, r3, r0
 8001770:	106d      	asrs	r5, r5, #1
 8001772:	42ab      	cmp	r3, r5
 8001774:	d900      	bls.n	8001778 <__ssputs_r+0x40>
 8001776:	001d      	movs	r5, r3
 8001778:	0552      	lsls	r2, r2, #21
 800177a:	d529      	bpl.n	80017d0 <__ssputs_r+0x98>
 800177c:	0029      	movs	r1, r5
 800177e:	0038      	movs	r0, r7
 8001780:	f7ff ff48 	bl	8001614 <_malloc_r>
 8001784:	1e06      	subs	r6, r0, #0
 8001786:	d02d      	beq.n	80017e4 <__ssputs_r+0xac>
 8001788:	9a02      	ldr	r2, [sp, #8]
 800178a:	6921      	ldr	r1, [r4, #16]
 800178c:	f000 fae7 	bl	8001d5e <memcpy>
 8001790:	89a2      	ldrh	r2, [r4, #12]
 8001792:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <__ssputs_r+0xc0>)
 8001794:	401a      	ands	r2, r3
 8001796:	2380      	movs	r3, #128	; 0x80
 8001798:	4313      	orrs	r3, r2
 800179a:	81a3      	strh	r3, [r4, #12]
 800179c:	9b02      	ldr	r3, [sp, #8]
 800179e:	6126      	str	r6, [r4, #16]
 80017a0:	18f6      	adds	r6, r6, r3
 80017a2:	6026      	str	r6, [r4, #0]
 80017a4:	6165      	str	r5, [r4, #20]
 80017a6:	9e01      	ldr	r6, [sp, #4]
 80017a8:	1aed      	subs	r5, r5, r3
 80017aa:	60a5      	str	r5, [r4, #8]
 80017ac:	9b01      	ldr	r3, [sp, #4]
 80017ae:	429e      	cmp	r6, r3
 80017b0:	d900      	bls.n	80017b4 <__ssputs_r+0x7c>
 80017b2:	9e01      	ldr	r6, [sp, #4]
 80017b4:	0032      	movs	r2, r6
 80017b6:	9903      	ldr	r1, [sp, #12]
 80017b8:	6820      	ldr	r0, [r4, #0]
 80017ba:	f000 fa9f 	bl	8001cfc <memmove>
 80017be:	2000      	movs	r0, #0
 80017c0:	68a3      	ldr	r3, [r4, #8]
 80017c2:	1b9b      	subs	r3, r3, r6
 80017c4:	60a3      	str	r3, [r4, #8]
 80017c6:	6823      	ldr	r3, [r4, #0]
 80017c8:	199b      	adds	r3, r3, r6
 80017ca:	6023      	str	r3, [r4, #0]
 80017cc:	b005      	add	sp, #20
 80017ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017d0:	002a      	movs	r2, r5
 80017d2:	0038      	movs	r0, r7
 80017d4:	f000 facc 	bl	8001d70 <_realloc_r>
 80017d8:	1e06      	subs	r6, r0, #0
 80017da:	d1df      	bne.n	800179c <__ssputs_r+0x64>
 80017dc:	0038      	movs	r0, r7
 80017de:	6921      	ldr	r1, [r4, #16]
 80017e0:	f7ff feac 	bl	800153c <_free_r>
 80017e4:	230c      	movs	r3, #12
 80017e6:	2001      	movs	r0, #1
 80017e8:	603b      	str	r3, [r7, #0]
 80017ea:	89a2      	ldrh	r2, [r4, #12]
 80017ec:	3334      	adds	r3, #52	; 0x34
 80017ee:	4313      	orrs	r3, r2
 80017f0:	81a3      	strh	r3, [r4, #12]
 80017f2:	4240      	negs	r0, r0
 80017f4:	e7ea      	b.n	80017cc <__ssputs_r+0x94>
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	fffffb7f 	.word	0xfffffb7f

080017fc <_svfiprintf_r>:
 80017fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fe:	b0a1      	sub	sp, #132	; 0x84
 8001800:	9003      	str	r0, [sp, #12]
 8001802:	001d      	movs	r5, r3
 8001804:	898b      	ldrh	r3, [r1, #12]
 8001806:	000f      	movs	r7, r1
 8001808:	0016      	movs	r6, r2
 800180a:	061b      	lsls	r3, r3, #24
 800180c:	d511      	bpl.n	8001832 <_svfiprintf_r+0x36>
 800180e:	690b      	ldr	r3, [r1, #16]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d10e      	bne.n	8001832 <_svfiprintf_r+0x36>
 8001814:	2140      	movs	r1, #64	; 0x40
 8001816:	f7ff fefd 	bl	8001614 <_malloc_r>
 800181a:	6038      	str	r0, [r7, #0]
 800181c:	6138      	str	r0, [r7, #16]
 800181e:	2800      	cmp	r0, #0
 8001820:	d105      	bne.n	800182e <_svfiprintf_r+0x32>
 8001822:	230c      	movs	r3, #12
 8001824:	9a03      	ldr	r2, [sp, #12]
 8001826:	3801      	subs	r0, #1
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	b021      	add	sp, #132	; 0x84
 800182c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800182e:	2340      	movs	r3, #64	; 0x40
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	2300      	movs	r3, #0
 8001834:	ac08      	add	r4, sp, #32
 8001836:	6163      	str	r3, [r4, #20]
 8001838:	3320      	adds	r3, #32
 800183a:	7663      	strb	r3, [r4, #25]
 800183c:	3310      	adds	r3, #16
 800183e:	76a3      	strb	r3, [r4, #26]
 8001840:	9507      	str	r5, [sp, #28]
 8001842:	0035      	movs	r5, r6
 8001844:	782b      	ldrb	r3, [r5, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <_svfiprintf_r+0x52>
 800184a:	2b25      	cmp	r3, #37	; 0x25
 800184c:	d148      	bne.n	80018e0 <_svfiprintf_r+0xe4>
 800184e:	1bab      	subs	r3, r5, r6
 8001850:	9305      	str	r3, [sp, #20]
 8001852:	42b5      	cmp	r5, r6
 8001854:	d00b      	beq.n	800186e <_svfiprintf_r+0x72>
 8001856:	0032      	movs	r2, r6
 8001858:	0039      	movs	r1, r7
 800185a:	9803      	ldr	r0, [sp, #12]
 800185c:	f7ff ff6c 	bl	8001738 <__ssputs_r>
 8001860:	3001      	adds	r0, #1
 8001862:	d100      	bne.n	8001866 <_svfiprintf_r+0x6a>
 8001864:	e0af      	b.n	80019c6 <_svfiprintf_r+0x1ca>
 8001866:	6963      	ldr	r3, [r4, #20]
 8001868:	9a05      	ldr	r2, [sp, #20]
 800186a:	189b      	adds	r3, r3, r2
 800186c:	6163      	str	r3, [r4, #20]
 800186e:	782b      	ldrb	r3, [r5, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d100      	bne.n	8001876 <_svfiprintf_r+0x7a>
 8001874:	e0a7      	b.n	80019c6 <_svfiprintf_r+0x1ca>
 8001876:	2201      	movs	r2, #1
 8001878:	2300      	movs	r3, #0
 800187a:	4252      	negs	r2, r2
 800187c:	6062      	str	r2, [r4, #4]
 800187e:	a904      	add	r1, sp, #16
 8001880:	3254      	adds	r2, #84	; 0x54
 8001882:	1852      	adds	r2, r2, r1
 8001884:	1c6e      	adds	r6, r5, #1
 8001886:	6023      	str	r3, [r4, #0]
 8001888:	60e3      	str	r3, [r4, #12]
 800188a:	60a3      	str	r3, [r4, #8]
 800188c:	7013      	strb	r3, [r2, #0]
 800188e:	65a3      	str	r3, [r4, #88]	; 0x58
 8001890:	4b55      	ldr	r3, [pc, #340]	; (80019e8 <_svfiprintf_r+0x1ec>)
 8001892:	2205      	movs	r2, #5
 8001894:	0018      	movs	r0, r3
 8001896:	7831      	ldrb	r1, [r6, #0]
 8001898:	9305      	str	r3, [sp, #20]
 800189a:	f000 fa55 	bl	8001d48 <memchr>
 800189e:	1c75      	adds	r5, r6, #1
 80018a0:	2800      	cmp	r0, #0
 80018a2:	d11f      	bne.n	80018e4 <_svfiprintf_r+0xe8>
 80018a4:	6822      	ldr	r2, [r4, #0]
 80018a6:	06d3      	lsls	r3, r2, #27
 80018a8:	d504      	bpl.n	80018b4 <_svfiprintf_r+0xb8>
 80018aa:	2353      	movs	r3, #83	; 0x53
 80018ac:	a904      	add	r1, sp, #16
 80018ae:	185b      	adds	r3, r3, r1
 80018b0:	2120      	movs	r1, #32
 80018b2:	7019      	strb	r1, [r3, #0]
 80018b4:	0713      	lsls	r3, r2, #28
 80018b6:	d504      	bpl.n	80018c2 <_svfiprintf_r+0xc6>
 80018b8:	2353      	movs	r3, #83	; 0x53
 80018ba:	a904      	add	r1, sp, #16
 80018bc:	185b      	adds	r3, r3, r1
 80018be:	212b      	movs	r1, #43	; 0x2b
 80018c0:	7019      	strb	r1, [r3, #0]
 80018c2:	7833      	ldrb	r3, [r6, #0]
 80018c4:	2b2a      	cmp	r3, #42	; 0x2a
 80018c6:	d016      	beq.n	80018f6 <_svfiprintf_r+0xfa>
 80018c8:	0035      	movs	r5, r6
 80018ca:	2100      	movs	r1, #0
 80018cc:	200a      	movs	r0, #10
 80018ce:	68e3      	ldr	r3, [r4, #12]
 80018d0:	782a      	ldrb	r2, [r5, #0]
 80018d2:	1c6e      	adds	r6, r5, #1
 80018d4:	3a30      	subs	r2, #48	; 0x30
 80018d6:	2a09      	cmp	r2, #9
 80018d8:	d94e      	bls.n	8001978 <_svfiprintf_r+0x17c>
 80018da:	2900      	cmp	r1, #0
 80018dc:	d111      	bne.n	8001902 <_svfiprintf_r+0x106>
 80018de:	e017      	b.n	8001910 <_svfiprintf_r+0x114>
 80018e0:	3501      	adds	r5, #1
 80018e2:	e7af      	b.n	8001844 <_svfiprintf_r+0x48>
 80018e4:	9b05      	ldr	r3, [sp, #20]
 80018e6:	6822      	ldr	r2, [r4, #0]
 80018e8:	1ac0      	subs	r0, r0, r3
 80018ea:	2301      	movs	r3, #1
 80018ec:	4083      	lsls	r3, r0
 80018ee:	4313      	orrs	r3, r2
 80018f0:	002e      	movs	r6, r5
 80018f2:	6023      	str	r3, [r4, #0]
 80018f4:	e7cc      	b.n	8001890 <_svfiprintf_r+0x94>
 80018f6:	9b07      	ldr	r3, [sp, #28]
 80018f8:	1d19      	adds	r1, r3, #4
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	9107      	str	r1, [sp, #28]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	db01      	blt.n	8001906 <_svfiprintf_r+0x10a>
 8001902:	930b      	str	r3, [sp, #44]	; 0x2c
 8001904:	e004      	b.n	8001910 <_svfiprintf_r+0x114>
 8001906:	425b      	negs	r3, r3
 8001908:	60e3      	str	r3, [r4, #12]
 800190a:	2302      	movs	r3, #2
 800190c:	4313      	orrs	r3, r2
 800190e:	6023      	str	r3, [r4, #0]
 8001910:	782b      	ldrb	r3, [r5, #0]
 8001912:	2b2e      	cmp	r3, #46	; 0x2e
 8001914:	d10a      	bne.n	800192c <_svfiprintf_r+0x130>
 8001916:	786b      	ldrb	r3, [r5, #1]
 8001918:	2b2a      	cmp	r3, #42	; 0x2a
 800191a:	d135      	bne.n	8001988 <_svfiprintf_r+0x18c>
 800191c:	9b07      	ldr	r3, [sp, #28]
 800191e:	3502      	adds	r5, #2
 8001920:	1d1a      	adds	r2, r3, #4
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	9207      	str	r2, [sp, #28]
 8001926:	2b00      	cmp	r3, #0
 8001928:	db2b      	blt.n	8001982 <_svfiprintf_r+0x186>
 800192a:	9309      	str	r3, [sp, #36]	; 0x24
 800192c:	4e2f      	ldr	r6, [pc, #188]	; (80019ec <_svfiprintf_r+0x1f0>)
 800192e:	2203      	movs	r2, #3
 8001930:	0030      	movs	r0, r6
 8001932:	7829      	ldrb	r1, [r5, #0]
 8001934:	f000 fa08 	bl	8001d48 <memchr>
 8001938:	2800      	cmp	r0, #0
 800193a:	d006      	beq.n	800194a <_svfiprintf_r+0x14e>
 800193c:	2340      	movs	r3, #64	; 0x40
 800193e:	1b80      	subs	r0, r0, r6
 8001940:	4083      	lsls	r3, r0
 8001942:	6822      	ldr	r2, [r4, #0]
 8001944:	3501      	adds	r5, #1
 8001946:	4313      	orrs	r3, r2
 8001948:	6023      	str	r3, [r4, #0]
 800194a:	7829      	ldrb	r1, [r5, #0]
 800194c:	2206      	movs	r2, #6
 800194e:	4828      	ldr	r0, [pc, #160]	; (80019f0 <_svfiprintf_r+0x1f4>)
 8001950:	1c6e      	adds	r6, r5, #1
 8001952:	7621      	strb	r1, [r4, #24]
 8001954:	f000 f9f8 	bl	8001d48 <memchr>
 8001958:	2800      	cmp	r0, #0
 800195a:	d03c      	beq.n	80019d6 <_svfiprintf_r+0x1da>
 800195c:	4b25      	ldr	r3, [pc, #148]	; (80019f4 <_svfiprintf_r+0x1f8>)
 800195e:	2b00      	cmp	r3, #0
 8001960:	d125      	bne.n	80019ae <_svfiprintf_r+0x1b2>
 8001962:	2207      	movs	r2, #7
 8001964:	9b07      	ldr	r3, [sp, #28]
 8001966:	3307      	adds	r3, #7
 8001968:	4393      	bics	r3, r2
 800196a:	3308      	adds	r3, #8
 800196c:	9307      	str	r3, [sp, #28]
 800196e:	6963      	ldr	r3, [r4, #20]
 8001970:	9a04      	ldr	r2, [sp, #16]
 8001972:	189b      	adds	r3, r3, r2
 8001974:	6163      	str	r3, [r4, #20]
 8001976:	e764      	b.n	8001842 <_svfiprintf_r+0x46>
 8001978:	4343      	muls	r3, r0
 800197a:	0035      	movs	r5, r6
 800197c:	2101      	movs	r1, #1
 800197e:	189b      	adds	r3, r3, r2
 8001980:	e7a6      	b.n	80018d0 <_svfiprintf_r+0xd4>
 8001982:	2301      	movs	r3, #1
 8001984:	425b      	negs	r3, r3
 8001986:	e7d0      	b.n	800192a <_svfiprintf_r+0x12e>
 8001988:	2300      	movs	r3, #0
 800198a:	200a      	movs	r0, #10
 800198c:	001a      	movs	r2, r3
 800198e:	3501      	adds	r5, #1
 8001990:	6063      	str	r3, [r4, #4]
 8001992:	7829      	ldrb	r1, [r5, #0]
 8001994:	1c6e      	adds	r6, r5, #1
 8001996:	3930      	subs	r1, #48	; 0x30
 8001998:	2909      	cmp	r1, #9
 800199a:	d903      	bls.n	80019a4 <_svfiprintf_r+0x1a8>
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0c5      	beq.n	800192c <_svfiprintf_r+0x130>
 80019a0:	9209      	str	r2, [sp, #36]	; 0x24
 80019a2:	e7c3      	b.n	800192c <_svfiprintf_r+0x130>
 80019a4:	4342      	muls	r2, r0
 80019a6:	0035      	movs	r5, r6
 80019a8:	2301      	movs	r3, #1
 80019aa:	1852      	adds	r2, r2, r1
 80019ac:	e7f1      	b.n	8001992 <_svfiprintf_r+0x196>
 80019ae:	aa07      	add	r2, sp, #28
 80019b0:	9200      	str	r2, [sp, #0]
 80019b2:	0021      	movs	r1, r4
 80019b4:	003a      	movs	r2, r7
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <_svfiprintf_r+0x1fc>)
 80019b8:	9803      	ldr	r0, [sp, #12]
 80019ba:	e000      	b.n	80019be <_svfiprintf_r+0x1c2>
 80019bc:	bf00      	nop
 80019be:	9004      	str	r0, [sp, #16]
 80019c0:	9b04      	ldr	r3, [sp, #16]
 80019c2:	3301      	adds	r3, #1
 80019c4:	d1d3      	bne.n	800196e <_svfiprintf_r+0x172>
 80019c6:	89bb      	ldrh	r3, [r7, #12]
 80019c8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80019ca:	065b      	lsls	r3, r3, #25
 80019cc:	d400      	bmi.n	80019d0 <_svfiprintf_r+0x1d4>
 80019ce:	e72c      	b.n	800182a <_svfiprintf_r+0x2e>
 80019d0:	2001      	movs	r0, #1
 80019d2:	4240      	negs	r0, r0
 80019d4:	e729      	b.n	800182a <_svfiprintf_r+0x2e>
 80019d6:	aa07      	add	r2, sp, #28
 80019d8:	9200      	str	r2, [sp, #0]
 80019da:	0021      	movs	r1, r4
 80019dc:	003a      	movs	r2, r7
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <_svfiprintf_r+0x1fc>)
 80019e0:	9803      	ldr	r0, [sp, #12]
 80019e2:	f000 f87b 	bl	8001adc <_printf_i>
 80019e6:	e7ea      	b.n	80019be <_svfiprintf_r+0x1c2>
 80019e8:	08001ec0 	.word	0x08001ec0
 80019ec:	08001ec6 	.word	0x08001ec6
 80019f0:	08001eca 	.word	0x08001eca
 80019f4:	00000000 	.word	0x00000000
 80019f8:	08001739 	.word	0x08001739

080019fc <_printf_common>:
 80019fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80019fe:	0016      	movs	r6, r2
 8001a00:	9301      	str	r3, [sp, #4]
 8001a02:	688a      	ldr	r2, [r1, #8]
 8001a04:	690b      	ldr	r3, [r1, #16]
 8001a06:	000c      	movs	r4, r1
 8001a08:	9000      	str	r0, [sp, #0]
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	da00      	bge.n	8001a10 <_printf_common+0x14>
 8001a0e:	0013      	movs	r3, r2
 8001a10:	0022      	movs	r2, r4
 8001a12:	6033      	str	r3, [r6, #0]
 8001a14:	3243      	adds	r2, #67	; 0x43
 8001a16:	7812      	ldrb	r2, [r2, #0]
 8001a18:	2a00      	cmp	r2, #0
 8001a1a:	d001      	beq.n	8001a20 <_printf_common+0x24>
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	6033      	str	r3, [r6, #0]
 8001a20:	6823      	ldr	r3, [r4, #0]
 8001a22:	069b      	lsls	r3, r3, #26
 8001a24:	d502      	bpl.n	8001a2c <_printf_common+0x30>
 8001a26:	6833      	ldr	r3, [r6, #0]
 8001a28:	3302      	adds	r3, #2
 8001a2a:	6033      	str	r3, [r6, #0]
 8001a2c:	6822      	ldr	r2, [r4, #0]
 8001a2e:	2306      	movs	r3, #6
 8001a30:	0015      	movs	r5, r2
 8001a32:	401d      	ands	r5, r3
 8001a34:	421a      	tst	r2, r3
 8001a36:	d027      	beq.n	8001a88 <_printf_common+0x8c>
 8001a38:	0023      	movs	r3, r4
 8001a3a:	3343      	adds	r3, #67	; 0x43
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	1e5a      	subs	r2, r3, #1
 8001a40:	4193      	sbcs	r3, r2
 8001a42:	6822      	ldr	r2, [r4, #0]
 8001a44:	0692      	lsls	r2, r2, #26
 8001a46:	d430      	bmi.n	8001aaa <_printf_common+0xae>
 8001a48:	0022      	movs	r2, r4
 8001a4a:	9901      	ldr	r1, [sp, #4]
 8001a4c:	9800      	ldr	r0, [sp, #0]
 8001a4e:	9d08      	ldr	r5, [sp, #32]
 8001a50:	3243      	adds	r2, #67	; 0x43
 8001a52:	47a8      	blx	r5
 8001a54:	3001      	adds	r0, #1
 8001a56:	d025      	beq.n	8001aa4 <_printf_common+0xa8>
 8001a58:	2206      	movs	r2, #6
 8001a5a:	6823      	ldr	r3, [r4, #0]
 8001a5c:	2500      	movs	r5, #0
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d105      	bne.n	8001a70 <_printf_common+0x74>
 8001a64:	6833      	ldr	r3, [r6, #0]
 8001a66:	68e5      	ldr	r5, [r4, #12]
 8001a68:	1aed      	subs	r5, r5, r3
 8001a6a:	43eb      	mvns	r3, r5
 8001a6c:	17db      	asrs	r3, r3, #31
 8001a6e:	401d      	ands	r5, r3
 8001a70:	68a3      	ldr	r3, [r4, #8]
 8001a72:	6922      	ldr	r2, [r4, #16]
 8001a74:	4293      	cmp	r3, r2
 8001a76:	dd01      	ble.n	8001a7c <_printf_common+0x80>
 8001a78:	1a9b      	subs	r3, r3, r2
 8001a7a:	18ed      	adds	r5, r5, r3
 8001a7c:	2600      	movs	r6, #0
 8001a7e:	42b5      	cmp	r5, r6
 8001a80:	d120      	bne.n	8001ac4 <_printf_common+0xc8>
 8001a82:	2000      	movs	r0, #0
 8001a84:	e010      	b.n	8001aa8 <_printf_common+0xac>
 8001a86:	3501      	adds	r5, #1
 8001a88:	68e3      	ldr	r3, [r4, #12]
 8001a8a:	6832      	ldr	r2, [r6, #0]
 8001a8c:	1a9b      	subs	r3, r3, r2
 8001a8e:	42ab      	cmp	r3, r5
 8001a90:	ddd2      	ble.n	8001a38 <_printf_common+0x3c>
 8001a92:	0022      	movs	r2, r4
 8001a94:	2301      	movs	r3, #1
 8001a96:	9901      	ldr	r1, [sp, #4]
 8001a98:	9800      	ldr	r0, [sp, #0]
 8001a9a:	9f08      	ldr	r7, [sp, #32]
 8001a9c:	3219      	adds	r2, #25
 8001a9e:	47b8      	blx	r7
 8001aa0:	3001      	adds	r0, #1
 8001aa2:	d1f0      	bne.n	8001a86 <_printf_common+0x8a>
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	4240      	negs	r0, r0
 8001aa8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001aaa:	2030      	movs	r0, #48	; 0x30
 8001aac:	18e1      	adds	r1, r4, r3
 8001aae:	3143      	adds	r1, #67	; 0x43
 8001ab0:	7008      	strb	r0, [r1, #0]
 8001ab2:	0021      	movs	r1, r4
 8001ab4:	1c5a      	adds	r2, r3, #1
 8001ab6:	3145      	adds	r1, #69	; 0x45
 8001ab8:	7809      	ldrb	r1, [r1, #0]
 8001aba:	18a2      	adds	r2, r4, r2
 8001abc:	3243      	adds	r2, #67	; 0x43
 8001abe:	3302      	adds	r3, #2
 8001ac0:	7011      	strb	r1, [r2, #0]
 8001ac2:	e7c1      	b.n	8001a48 <_printf_common+0x4c>
 8001ac4:	0022      	movs	r2, r4
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	9901      	ldr	r1, [sp, #4]
 8001aca:	9800      	ldr	r0, [sp, #0]
 8001acc:	9f08      	ldr	r7, [sp, #32]
 8001ace:	321a      	adds	r2, #26
 8001ad0:	47b8      	blx	r7
 8001ad2:	3001      	adds	r0, #1
 8001ad4:	d0e6      	beq.n	8001aa4 <_printf_common+0xa8>
 8001ad6:	3601      	adds	r6, #1
 8001ad8:	e7d1      	b.n	8001a7e <_printf_common+0x82>
	...

08001adc <_printf_i>:
 8001adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ade:	b08b      	sub	sp, #44	; 0x2c
 8001ae0:	9206      	str	r2, [sp, #24]
 8001ae2:	000a      	movs	r2, r1
 8001ae4:	3243      	adds	r2, #67	; 0x43
 8001ae6:	9307      	str	r3, [sp, #28]
 8001ae8:	9005      	str	r0, [sp, #20]
 8001aea:	9204      	str	r2, [sp, #16]
 8001aec:	7e0a      	ldrb	r2, [r1, #24]
 8001aee:	000c      	movs	r4, r1
 8001af0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001af2:	2a78      	cmp	r2, #120	; 0x78
 8001af4:	d809      	bhi.n	8001b0a <_printf_i+0x2e>
 8001af6:	2a62      	cmp	r2, #98	; 0x62
 8001af8:	d80b      	bhi.n	8001b12 <_printf_i+0x36>
 8001afa:	2a00      	cmp	r2, #0
 8001afc:	d100      	bne.n	8001b00 <_printf_i+0x24>
 8001afe:	e0be      	b.n	8001c7e <_printf_i+0x1a2>
 8001b00:	497c      	ldr	r1, [pc, #496]	; (8001cf4 <_printf_i+0x218>)
 8001b02:	9103      	str	r1, [sp, #12]
 8001b04:	2a58      	cmp	r2, #88	; 0x58
 8001b06:	d100      	bne.n	8001b0a <_printf_i+0x2e>
 8001b08:	e093      	b.n	8001c32 <_printf_i+0x156>
 8001b0a:	0026      	movs	r6, r4
 8001b0c:	3642      	adds	r6, #66	; 0x42
 8001b0e:	7032      	strb	r2, [r6, #0]
 8001b10:	e022      	b.n	8001b58 <_printf_i+0x7c>
 8001b12:	0010      	movs	r0, r2
 8001b14:	3863      	subs	r0, #99	; 0x63
 8001b16:	2815      	cmp	r0, #21
 8001b18:	d8f7      	bhi.n	8001b0a <_printf_i+0x2e>
 8001b1a:	f7fe faf3 	bl	8000104 <__gnu_thumb1_case_shi>
 8001b1e:	0016      	.short	0x0016
 8001b20:	fff6001f 	.word	0xfff6001f
 8001b24:	fff6fff6 	.word	0xfff6fff6
 8001b28:	001ffff6 	.word	0x001ffff6
 8001b2c:	fff6fff6 	.word	0xfff6fff6
 8001b30:	fff6fff6 	.word	0xfff6fff6
 8001b34:	003600a3 	.word	0x003600a3
 8001b38:	fff60083 	.word	0xfff60083
 8001b3c:	00b4fff6 	.word	0x00b4fff6
 8001b40:	0036fff6 	.word	0x0036fff6
 8001b44:	fff6fff6 	.word	0xfff6fff6
 8001b48:	0087      	.short	0x0087
 8001b4a:	0026      	movs	r6, r4
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	3642      	adds	r6, #66	; 0x42
 8001b50:	1d11      	adds	r1, r2, #4
 8001b52:	6019      	str	r1, [r3, #0]
 8001b54:	6813      	ldr	r3, [r2, #0]
 8001b56:	7033      	strb	r3, [r6, #0]
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e0a2      	b.n	8001ca2 <_printf_i+0x1c6>
 8001b5c:	6818      	ldr	r0, [r3, #0]
 8001b5e:	6809      	ldr	r1, [r1, #0]
 8001b60:	1d02      	adds	r2, r0, #4
 8001b62:	060d      	lsls	r5, r1, #24
 8001b64:	d50b      	bpl.n	8001b7e <_printf_i+0xa2>
 8001b66:	6805      	ldr	r5, [r0, #0]
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	2d00      	cmp	r5, #0
 8001b6c:	da03      	bge.n	8001b76 <_printf_i+0x9a>
 8001b6e:	232d      	movs	r3, #45	; 0x2d
 8001b70:	9a04      	ldr	r2, [sp, #16]
 8001b72:	426d      	negs	r5, r5
 8001b74:	7013      	strb	r3, [r2, #0]
 8001b76:	4b5f      	ldr	r3, [pc, #380]	; (8001cf4 <_printf_i+0x218>)
 8001b78:	270a      	movs	r7, #10
 8001b7a:	9303      	str	r3, [sp, #12]
 8001b7c:	e01b      	b.n	8001bb6 <_printf_i+0xda>
 8001b7e:	6805      	ldr	r5, [r0, #0]
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	0649      	lsls	r1, r1, #25
 8001b84:	d5f1      	bpl.n	8001b6a <_printf_i+0x8e>
 8001b86:	b22d      	sxth	r5, r5
 8001b88:	e7ef      	b.n	8001b6a <_printf_i+0x8e>
 8001b8a:	680d      	ldr	r5, [r1, #0]
 8001b8c:	6819      	ldr	r1, [r3, #0]
 8001b8e:	1d08      	adds	r0, r1, #4
 8001b90:	6018      	str	r0, [r3, #0]
 8001b92:	062e      	lsls	r6, r5, #24
 8001b94:	d501      	bpl.n	8001b9a <_printf_i+0xbe>
 8001b96:	680d      	ldr	r5, [r1, #0]
 8001b98:	e003      	b.n	8001ba2 <_printf_i+0xc6>
 8001b9a:	066d      	lsls	r5, r5, #25
 8001b9c:	d5fb      	bpl.n	8001b96 <_printf_i+0xba>
 8001b9e:	680d      	ldr	r5, [r1, #0]
 8001ba0:	b2ad      	uxth	r5, r5
 8001ba2:	4b54      	ldr	r3, [pc, #336]	; (8001cf4 <_printf_i+0x218>)
 8001ba4:	2708      	movs	r7, #8
 8001ba6:	9303      	str	r3, [sp, #12]
 8001ba8:	2a6f      	cmp	r2, #111	; 0x6f
 8001baa:	d000      	beq.n	8001bae <_printf_i+0xd2>
 8001bac:	3702      	adds	r7, #2
 8001bae:	0023      	movs	r3, r4
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	3343      	adds	r3, #67	; 0x43
 8001bb4:	701a      	strb	r2, [r3, #0]
 8001bb6:	6863      	ldr	r3, [r4, #4]
 8001bb8:	60a3      	str	r3, [r4, #8]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	db03      	blt.n	8001bc6 <_printf_i+0xea>
 8001bbe:	2104      	movs	r1, #4
 8001bc0:	6822      	ldr	r2, [r4, #0]
 8001bc2:	438a      	bics	r2, r1
 8001bc4:	6022      	str	r2, [r4, #0]
 8001bc6:	2d00      	cmp	r5, #0
 8001bc8:	d102      	bne.n	8001bd0 <_printf_i+0xf4>
 8001bca:	9e04      	ldr	r6, [sp, #16]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00c      	beq.n	8001bea <_printf_i+0x10e>
 8001bd0:	9e04      	ldr	r6, [sp, #16]
 8001bd2:	0028      	movs	r0, r5
 8001bd4:	0039      	movs	r1, r7
 8001bd6:	f7fe fb25 	bl	8000224 <__aeabi_uidivmod>
 8001bda:	9b03      	ldr	r3, [sp, #12]
 8001bdc:	3e01      	subs	r6, #1
 8001bde:	5c5b      	ldrb	r3, [r3, r1]
 8001be0:	7033      	strb	r3, [r6, #0]
 8001be2:	002b      	movs	r3, r5
 8001be4:	0005      	movs	r5, r0
 8001be6:	429f      	cmp	r7, r3
 8001be8:	d9f3      	bls.n	8001bd2 <_printf_i+0xf6>
 8001bea:	2f08      	cmp	r7, #8
 8001bec:	d109      	bne.n	8001c02 <_printf_i+0x126>
 8001bee:	6823      	ldr	r3, [r4, #0]
 8001bf0:	07db      	lsls	r3, r3, #31
 8001bf2:	d506      	bpl.n	8001c02 <_printf_i+0x126>
 8001bf4:	6862      	ldr	r2, [r4, #4]
 8001bf6:	6923      	ldr	r3, [r4, #16]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	dc02      	bgt.n	8001c02 <_printf_i+0x126>
 8001bfc:	2330      	movs	r3, #48	; 0x30
 8001bfe:	3e01      	subs	r6, #1
 8001c00:	7033      	strb	r3, [r6, #0]
 8001c02:	9b04      	ldr	r3, [sp, #16]
 8001c04:	1b9b      	subs	r3, r3, r6
 8001c06:	6123      	str	r3, [r4, #16]
 8001c08:	9b07      	ldr	r3, [sp, #28]
 8001c0a:	0021      	movs	r1, r4
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	9805      	ldr	r0, [sp, #20]
 8001c10:	9b06      	ldr	r3, [sp, #24]
 8001c12:	aa09      	add	r2, sp, #36	; 0x24
 8001c14:	f7ff fef2 	bl	80019fc <_printf_common>
 8001c18:	3001      	adds	r0, #1
 8001c1a:	d147      	bne.n	8001cac <_printf_i+0x1d0>
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	4240      	negs	r0, r0
 8001c20:	b00b      	add	sp, #44	; 0x2c
 8001c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c24:	2220      	movs	r2, #32
 8001c26:	6809      	ldr	r1, [r1, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	6022      	str	r2, [r4, #0]
 8001c2c:	2278      	movs	r2, #120	; 0x78
 8001c2e:	4932      	ldr	r1, [pc, #200]	; (8001cf8 <_printf_i+0x21c>)
 8001c30:	9103      	str	r1, [sp, #12]
 8001c32:	0021      	movs	r1, r4
 8001c34:	3145      	adds	r1, #69	; 0x45
 8001c36:	700a      	strb	r2, [r1, #0]
 8001c38:	6819      	ldr	r1, [r3, #0]
 8001c3a:	6822      	ldr	r2, [r4, #0]
 8001c3c:	c920      	ldmia	r1!, {r5}
 8001c3e:	0610      	lsls	r0, r2, #24
 8001c40:	d402      	bmi.n	8001c48 <_printf_i+0x16c>
 8001c42:	0650      	lsls	r0, r2, #25
 8001c44:	d500      	bpl.n	8001c48 <_printf_i+0x16c>
 8001c46:	b2ad      	uxth	r5, r5
 8001c48:	6019      	str	r1, [r3, #0]
 8001c4a:	07d3      	lsls	r3, r2, #31
 8001c4c:	d502      	bpl.n	8001c54 <_printf_i+0x178>
 8001c4e:	2320      	movs	r3, #32
 8001c50:	4313      	orrs	r3, r2
 8001c52:	6023      	str	r3, [r4, #0]
 8001c54:	2710      	movs	r7, #16
 8001c56:	2d00      	cmp	r5, #0
 8001c58:	d1a9      	bne.n	8001bae <_printf_i+0xd2>
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	6823      	ldr	r3, [r4, #0]
 8001c5e:	4393      	bics	r3, r2
 8001c60:	6023      	str	r3, [r4, #0]
 8001c62:	e7a4      	b.n	8001bae <_printf_i+0xd2>
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	680d      	ldr	r5, [r1, #0]
 8001c68:	1d10      	adds	r0, r2, #4
 8001c6a:	6949      	ldr	r1, [r1, #20]
 8001c6c:	6018      	str	r0, [r3, #0]
 8001c6e:	6813      	ldr	r3, [r2, #0]
 8001c70:	062e      	lsls	r6, r5, #24
 8001c72:	d501      	bpl.n	8001c78 <_printf_i+0x19c>
 8001c74:	6019      	str	r1, [r3, #0]
 8001c76:	e002      	b.n	8001c7e <_printf_i+0x1a2>
 8001c78:	066d      	lsls	r5, r5, #25
 8001c7a:	d5fb      	bpl.n	8001c74 <_printf_i+0x198>
 8001c7c:	8019      	strh	r1, [r3, #0]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	9e04      	ldr	r6, [sp, #16]
 8001c82:	6123      	str	r3, [r4, #16]
 8001c84:	e7c0      	b.n	8001c08 <_printf_i+0x12c>
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	1d11      	adds	r1, r2, #4
 8001c8a:	6019      	str	r1, [r3, #0]
 8001c8c:	6816      	ldr	r6, [r2, #0]
 8001c8e:	2100      	movs	r1, #0
 8001c90:	0030      	movs	r0, r6
 8001c92:	6862      	ldr	r2, [r4, #4]
 8001c94:	f000 f858 	bl	8001d48 <memchr>
 8001c98:	2800      	cmp	r0, #0
 8001c9a:	d001      	beq.n	8001ca0 <_printf_i+0x1c4>
 8001c9c:	1b80      	subs	r0, r0, r6
 8001c9e:	6060      	str	r0, [r4, #4]
 8001ca0:	6863      	ldr	r3, [r4, #4]
 8001ca2:	6123      	str	r3, [r4, #16]
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	9a04      	ldr	r2, [sp, #16]
 8001ca8:	7013      	strb	r3, [r2, #0]
 8001caa:	e7ad      	b.n	8001c08 <_printf_i+0x12c>
 8001cac:	0032      	movs	r2, r6
 8001cae:	6923      	ldr	r3, [r4, #16]
 8001cb0:	9906      	ldr	r1, [sp, #24]
 8001cb2:	9805      	ldr	r0, [sp, #20]
 8001cb4:	9d07      	ldr	r5, [sp, #28]
 8001cb6:	47a8      	blx	r5
 8001cb8:	3001      	adds	r0, #1
 8001cba:	d0af      	beq.n	8001c1c <_printf_i+0x140>
 8001cbc:	6823      	ldr	r3, [r4, #0]
 8001cbe:	079b      	lsls	r3, r3, #30
 8001cc0:	d415      	bmi.n	8001cee <_printf_i+0x212>
 8001cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001cc4:	68e0      	ldr	r0, [r4, #12]
 8001cc6:	4298      	cmp	r0, r3
 8001cc8:	daaa      	bge.n	8001c20 <_printf_i+0x144>
 8001cca:	0018      	movs	r0, r3
 8001ccc:	e7a8      	b.n	8001c20 <_printf_i+0x144>
 8001cce:	0022      	movs	r2, r4
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	9906      	ldr	r1, [sp, #24]
 8001cd4:	9805      	ldr	r0, [sp, #20]
 8001cd6:	9e07      	ldr	r6, [sp, #28]
 8001cd8:	3219      	adds	r2, #25
 8001cda:	47b0      	blx	r6
 8001cdc:	3001      	adds	r0, #1
 8001cde:	d09d      	beq.n	8001c1c <_printf_i+0x140>
 8001ce0:	3501      	adds	r5, #1
 8001ce2:	68e3      	ldr	r3, [r4, #12]
 8001ce4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001ce6:	1a9b      	subs	r3, r3, r2
 8001ce8:	42ab      	cmp	r3, r5
 8001cea:	dcf0      	bgt.n	8001cce <_printf_i+0x1f2>
 8001cec:	e7e9      	b.n	8001cc2 <_printf_i+0x1e6>
 8001cee:	2500      	movs	r5, #0
 8001cf0:	e7f7      	b.n	8001ce2 <_printf_i+0x206>
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	08001ed1 	.word	0x08001ed1
 8001cf8:	08001ee2 	.word	0x08001ee2

08001cfc <memmove>:
 8001cfc:	b510      	push	{r4, lr}
 8001cfe:	4288      	cmp	r0, r1
 8001d00:	d902      	bls.n	8001d08 <memmove+0xc>
 8001d02:	188b      	adds	r3, r1, r2
 8001d04:	4298      	cmp	r0, r3
 8001d06:	d303      	bcc.n	8001d10 <memmove+0x14>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e007      	b.n	8001d1c <memmove+0x20>
 8001d0c:	5c8b      	ldrb	r3, [r1, r2]
 8001d0e:	5483      	strb	r3, [r0, r2]
 8001d10:	3a01      	subs	r2, #1
 8001d12:	d2fb      	bcs.n	8001d0c <memmove+0x10>
 8001d14:	bd10      	pop	{r4, pc}
 8001d16:	5ccc      	ldrb	r4, [r1, r3]
 8001d18:	54c4      	strb	r4, [r0, r3]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d1fa      	bne.n	8001d16 <memmove+0x1a>
 8001d20:	e7f8      	b.n	8001d14 <memmove+0x18>
	...

08001d24 <_sbrk_r>:
 8001d24:	2300      	movs	r3, #0
 8001d26:	b570      	push	{r4, r5, r6, lr}
 8001d28:	4d06      	ldr	r5, [pc, #24]	; (8001d44 <_sbrk_r+0x20>)
 8001d2a:	0004      	movs	r4, r0
 8001d2c:	0008      	movs	r0, r1
 8001d2e:	602b      	str	r3, [r5, #0]
 8001d30:	f7fe fd4c 	bl	80007cc <_sbrk>
 8001d34:	1c43      	adds	r3, r0, #1
 8001d36:	d103      	bne.n	8001d40 <_sbrk_r+0x1c>
 8001d38:	682b      	ldr	r3, [r5, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d000      	beq.n	8001d40 <_sbrk_r+0x1c>
 8001d3e:	6023      	str	r3, [r4, #0]
 8001d40:	bd70      	pop	{r4, r5, r6, pc}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	200001bc 	.word	0x200001bc

08001d48 <memchr>:
 8001d48:	b2c9      	uxtb	r1, r1
 8001d4a:	1882      	adds	r2, r0, r2
 8001d4c:	4290      	cmp	r0, r2
 8001d4e:	d101      	bne.n	8001d54 <memchr+0xc>
 8001d50:	2000      	movs	r0, #0
 8001d52:	4770      	bx	lr
 8001d54:	7803      	ldrb	r3, [r0, #0]
 8001d56:	428b      	cmp	r3, r1
 8001d58:	d0fb      	beq.n	8001d52 <memchr+0xa>
 8001d5a:	3001      	adds	r0, #1
 8001d5c:	e7f6      	b.n	8001d4c <memchr+0x4>

08001d5e <memcpy>:
 8001d5e:	2300      	movs	r3, #0
 8001d60:	b510      	push	{r4, lr}
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d100      	bne.n	8001d68 <memcpy+0xa>
 8001d66:	bd10      	pop	{r4, pc}
 8001d68:	5ccc      	ldrb	r4, [r1, r3]
 8001d6a:	54c4      	strb	r4, [r0, r3]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	e7f8      	b.n	8001d62 <memcpy+0x4>

08001d70 <_realloc_r>:
 8001d70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d72:	0007      	movs	r7, r0
 8001d74:	000e      	movs	r6, r1
 8001d76:	0014      	movs	r4, r2
 8001d78:	2900      	cmp	r1, #0
 8001d7a:	d105      	bne.n	8001d88 <_realloc_r+0x18>
 8001d7c:	0011      	movs	r1, r2
 8001d7e:	f7ff fc49 	bl	8001614 <_malloc_r>
 8001d82:	0005      	movs	r5, r0
 8001d84:	0028      	movs	r0, r5
 8001d86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001d88:	2a00      	cmp	r2, #0
 8001d8a:	d103      	bne.n	8001d94 <_realloc_r+0x24>
 8001d8c:	f7ff fbd6 	bl	800153c <_free_r>
 8001d90:	0025      	movs	r5, r4
 8001d92:	e7f7      	b.n	8001d84 <_realloc_r+0x14>
 8001d94:	f000 f81b 	bl	8001dce <_malloc_usable_size_r>
 8001d98:	9001      	str	r0, [sp, #4]
 8001d9a:	4284      	cmp	r4, r0
 8001d9c:	d803      	bhi.n	8001da6 <_realloc_r+0x36>
 8001d9e:	0035      	movs	r5, r6
 8001da0:	0843      	lsrs	r3, r0, #1
 8001da2:	42a3      	cmp	r3, r4
 8001da4:	d3ee      	bcc.n	8001d84 <_realloc_r+0x14>
 8001da6:	0021      	movs	r1, r4
 8001da8:	0038      	movs	r0, r7
 8001daa:	f7ff fc33 	bl	8001614 <_malloc_r>
 8001dae:	1e05      	subs	r5, r0, #0
 8001db0:	d0e8      	beq.n	8001d84 <_realloc_r+0x14>
 8001db2:	9b01      	ldr	r3, [sp, #4]
 8001db4:	0022      	movs	r2, r4
 8001db6:	429c      	cmp	r4, r3
 8001db8:	d900      	bls.n	8001dbc <_realloc_r+0x4c>
 8001dba:	001a      	movs	r2, r3
 8001dbc:	0031      	movs	r1, r6
 8001dbe:	0028      	movs	r0, r5
 8001dc0:	f7ff ffcd 	bl	8001d5e <memcpy>
 8001dc4:	0031      	movs	r1, r6
 8001dc6:	0038      	movs	r0, r7
 8001dc8:	f7ff fbb8 	bl	800153c <_free_r>
 8001dcc:	e7da      	b.n	8001d84 <_realloc_r+0x14>

08001dce <_malloc_usable_size_r>:
 8001dce:	1f0b      	subs	r3, r1, #4
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	1f18      	subs	r0, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	da01      	bge.n	8001ddc <_malloc_usable_size_r+0xe>
 8001dd8:	580b      	ldr	r3, [r1, r0]
 8001dda:	18c0      	adds	r0, r0, r3
 8001ddc:	4770      	bx	lr
	...

08001de0 <_init>:
 8001de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001de6:	bc08      	pop	{r3}
 8001de8:	469e      	mov	lr, r3
 8001dea:	4770      	bx	lr

08001dec <_fini>:
 8001dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001df2:	bc08      	pop	{r3}
 8001df4:	469e      	mov	lr, r3
 8001df6:	4770      	bx	lr
