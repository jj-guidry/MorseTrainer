
MorseTrainer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016f0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080017ac  080017ac  000117ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800186c  0800186c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800186c  0800186c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800186c  0800186c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800186c  0800186c  0001186c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001870  08001870  00011870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08001880  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08001880  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002ed1  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f83  00000000  00000000  00022f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003a8  00000000  00000000  00023ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000296  00000000  00000000  00024278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a2a6  00000000  00000000  0002450e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000554f  00000000  00000000  0003e7b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ab46  00000000  00000000  00043d03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000a9c  00000000  00000000  000de84c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000df2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001794 	.word	0x08001794

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08001794 	.word	0x08001794

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <init_buzzer_pwm>:
#include <stdio.h>
#include "init.h"
#include "main.h"

// tim3 used for PWM for buzzer
void init_buzzer_pwm(){
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN; // en tim3 clock
 8000220:	4b17      	ldr	r3, [pc, #92]	; (8000280 <init_buzzer_pwm+0x64>)
 8000222:	69da      	ldr	r2, [r3, #28]
 8000224:	4b16      	ldr	r3, [pc, #88]	; (8000280 <init_buzzer_pwm+0x64>)
 8000226:	2102      	movs	r1, #2
 8000228:	430a      	orrs	r2, r1
 800022a:	61da      	str	r2, [r3, #28]
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // en GPIOC clock
 800022c:	4b14      	ldr	r3, [pc, #80]	; (8000280 <init_buzzer_pwm+0x64>)
 800022e:	695a      	ldr	r2, [r3, #20]
 8000230:	4b13      	ldr	r3, [pc, #76]	; (8000280 <init_buzzer_pwm+0x64>)
 8000232:	2180      	movs	r1, #128	; 0x80
 8000234:	0309      	lsls	r1, r1, #12
 8000236:	430a      	orrs	r2, r1
 8000238:	615a      	str	r2, [r3, #20]
	GPIOC->MODER |= GPIO_MODER_MODER6_1; // led on PC6 to AF
 800023a:	4b12      	ldr	r3, [pc, #72]	; (8000284 <init_buzzer_pwm+0x68>)
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	4b11      	ldr	r3, [pc, #68]	; (8000284 <init_buzzer_pwm+0x68>)
 8000240:	2180      	movs	r1, #128	; 0x80
 8000242:	0189      	lsls	r1, r1, #6
 8000244:	430a      	orrs	r2, r1
 8000246:	601a      	str	r2, [r3, #0]
	TIM3->PSC = 480-1;
 8000248:	4b0f      	ldr	r3, [pc, #60]	; (8000288 <init_buzzer_pwm+0x6c>)
 800024a:	22e0      	movs	r2, #224	; 0xe0
 800024c:	32ff      	adds	r2, #255	; 0xff
 800024e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 156-1; // 1hz pwm signal
 8000250:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <init_buzzer_pwm+0x6c>)
 8000252:	229b      	movs	r2, #155	; 0x9b
 8000254:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1; // interrupt when CNT == CCR1
 8000256:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <init_buzzer_pwm+0x6c>)
 8000258:	699a      	ldr	r2, [r3, #24]
 800025a:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <init_buzzer_pwm+0x6c>)
 800025c:	2160      	movs	r1, #96	; 0x60
 800025e:	430a      	orrs	r2, r1
 8000260:	619a      	str	r2, [r3, #24]
	TIM3->CCR1 = 8; // pwm goes low @ cnt == 8
 8000262:	4b09      	ldr	r3, [pc, #36]	; (8000288 <init_buzzer_pwm+0x6c>)
 8000264:	2208      	movs	r2, #8
 8000266:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CNT = 9; // start pwm line low
 8000268:	4b07      	ldr	r3, [pc, #28]	; (8000288 <init_buzzer_pwm+0x6c>)
 800026a:	2209      	movs	r2, #9
 800026c:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CCER |= TIM_CCER_CC1E; // enable channel 1
 800026e:	4b06      	ldr	r3, [pc, #24]	; (8000288 <init_buzzer_pwm+0x6c>)
 8000270:	6a1a      	ldr	r2, [r3, #32]
 8000272:	4b05      	ldr	r3, [pc, #20]	; (8000288 <init_buzzer_pwm+0x6c>)
 8000274:	2101      	movs	r1, #1
 8000276:	430a      	orrs	r2, r1
 8000278:	621a      	str	r2, [r3, #32]
}
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	40021000 	.word	0x40021000
 8000284:	48000800 	.word	0x48000800
 8000288:	40000400 	.word	0x40000400

0800028c <init_timers_gpio>:



// input button and associated timers
void init_timers_gpio(){
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN; // gpioa en clock for input button
 8000290:	4b4e      	ldr	r3, [pc, #312]	; (80003cc <init_timers_gpio+0x140>)
 8000292:	695a      	ldr	r2, [r3, #20]
 8000294:	4b4d      	ldr	r3, [pc, #308]	; (80003cc <init_timers_gpio+0x140>)
 8000296:	2180      	movs	r1, #128	; 0x80
 8000298:	0289      	lsls	r1, r1, #10
 800029a:	430a      	orrs	r2, r1
 800029c:	615a      	str	r2, [r3, #20]
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // gpioc en clock for output led
 800029e:	4b4b      	ldr	r3, [pc, #300]	; (80003cc <init_timers_gpio+0x140>)
 80002a0:	695a      	ldr	r2, [r3, #20]
 80002a2:	4b4a      	ldr	r3, [pc, #296]	; (80003cc <init_timers_gpio+0x140>)
 80002a4:	2180      	movs	r1, #128	; 0x80
 80002a6:	0309      	lsls	r1, r1, #12
 80002a8:	430a      	orrs	r2, r1
 80002aa:	615a      	str	r2, [r3, #20]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // syscfg en clock
 80002ac:	4b47      	ldr	r3, [pc, #284]	; (80003cc <init_timers_gpio+0x140>)
 80002ae:	699a      	ldr	r2, [r3, #24]
 80002b0:	4b46      	ldr	r3, [pc, #280]	; (80003cc <init_timers_gpio+0x140>)
 80002b2:	2101      	movs	r1, #1
 80002b4:	430a      	orrs	r2, r1
 80002b6:	619a      	str	r2, [r3, #24]

	GPIOA->MODER &= ~(GPIO_MODER_MODER1); // pa1 for input
 80002b8:	2390      	movs	r3, #144	; 0x90
 80002ba:	05db      	lsls	r3, r3, #23
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	2390      	movs	r3, #144	; 0x90
 80002c0:	05db      	lsls	r3, r3, #23
 80002c2:	210c      	movs	r1, #12
 80002c4:	438a      	bics	r2, r1
 80002c6:	601a      	str	r2, [r3, #0]
	GPIOA->PUPDR |= GPIO_PUPDR_PUPDR1_1; // pa1 pull down resistor
 80002c8:	2390      	movs	r3, #144	; 0x90
 80002ca:	05db      	lsls	r3, r3, #23
 80002cc:	68da      	ldr	r2, [r3, #12]
 80002ce:	2390      	movs	r3, #144	; 0x90
 80002d0:	05db      	lsls	r3, r3, #23
 80002d2:	2108      	movs	r1, #8
 80002d4:	430a      	orrs	r2, r1
 80002d6:	60da      	str	r2, [r3, #12]

	// pc7 as output
	GPIOC->MODER |= GPIO_MODER_MODER7_0;
 80002d8:	4b3d      	ldr	r3, [pc, #244]	; (80003d0 <init_timers_gpio+0x144>)
 80002da:	681a      	ldr	r2, [r3, #0]
 80002dc:	4b3c      	ldr	r3, [pc, #240]	; (80003d0 <init_timers_gpio+0x144>)
 80002de:	2180      	movs	r1, #128	; 0x80
 80002e0:	01c9      	lsls	r1, r1, #7
 80002e2:	430a      	orrs	r2, r1
 80002e4:	601a      	str	r2, [r3, #0]
	GPIOC->MODER &= ~(GPIO_MODER_MODER7_1);
 80002e6:	4b3a      	ldr	r3, [pc, #232]	; (80003d0 <init_timers_gpio+0x144>)
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	4b39      	ldr	r3, [pc, #228]	; (80003d0 <init_timers_gpio+0x144>)
 80002ec:	4939      	ldr	r1, [pc, #228]	; (80003d4 <init_timers_gpio+0x148>)
 80002ee:	400a      	ands	r2, r1
 80002f0:	601a      	str	r2, [r3, #0]


	// config interrupt on pa0
	SYSCFG->EXTICR[0] &= ~(0xf<<4); // clear bottom 4 bits to set interrupt on pa1
 80002f2:	4b39      	ldr	r3, [pc, #228]	; (80003d8 <init_timers_gpio+0x14c>)
 80002f4:	689a      	ldr	r2, [r3, #8]
 80002f6:	4b38      	ldr	r3, [pc, #224]	; (80003d8 <init_timers_gpio+0x14c>)
 80002f8:	21f0      	movs	r1, #240	; 0xf0
 80002fa:	438a      	bics	r2, r1
 80002fc:	609a      	str	r2, [r3, #8]
	// call ISR for both rising and falling edge
	EXTI->RTSR |= EXTI_RTSR_RT1;
 80002fe:	4b37      	ldr	r3, [pc, #220]	; (80003dc <init_timers_gpio+0x150>)
 8000300:	689a      	ldr	r2, [r3, #8]
 8000302:	4b36      	ldr	r3, [pc, #216]	; (80003dc <init_timers_gpio+0x150>)
 8000304:	2102      	movs	r1, #2
 8000306:	430a      	orrs	r2, r1
 8000308:	609a      	str	r2, [r3, #8]
	EXTI->FTSR |= EXTI_FTSR_FT1;
 800030a:	4b34      	ldr	r3, [pc, #208]	; (80003dc <init_timers_gpio+0x150>)
 800030c:	68da      	ldr	r2, [r3, #12]
 800030e:	4b33      	ldr	r3, [pc, #204]	; (80003dc <init_timers_gpio+0x150>)
 8000310:	2102      	movs	r1, #2
 8000312:	430a      	orrs	r2, r1
 8000314:	60da      	str	r2, [r3, #12]
	// unmask the interrupt on pin 1
	EXTI->IMR |= EXTI_IMR_IM1;
 8000316:	4b31      	ldr	r3, [pc, #196]	; (80003dc <init_timers_gpio+0x150>)
 8000318:	681a      	ldr	r2, [r3, #0]
 800031a:	4b30      	ldr	r3, [pc, #192]	; (80003dc <init_timers_gpio+0x150>)
 800031c:	2102      	movs	r1, #2
 800031e:	430a      	orrs	r2, r1
 8000320:	601a      	str	r2, [r3, #0]

    NVIC->ISER[0] = 1<<EXTI0_1_IRQn;
 8000322:	4b2f      	ldr	r3, [pc, #188]	; (80003e0 <init_timers_gpio+0x154>)
 8000324:	2220      	movs	r2, #32
 8000326:	601a      	str	r2, [r3, #0]

    // setup timers
    // TIM6 counts duration of press
    RCC->APB1ENR |= RCC_APB1ENR_TIM6EN; // en clock for tim6
 8000328:	4b28      	ldr	r3, [pc, #160]	; (80003cc <init_timers_gpio+0x140>)
 800032a:	69da      	ldr	r2, [r3, #28]
 800032c:	4b27      	ldr	r3, [pc, #156]	; (80003cc <init_timers_gpio+0x140>)
 800032e:	2110      	movs	r1, #16
 8000330:	430a      	orrs	r2, r1
 8000332:	61da      	str	r2, [r3, #28]
    TIM6->PSC = 48000-1;
 8000334:	4b2b      	ldr	r3, [pc, #172]	; (80003e4 <init_timers_gpio+0x158>)
 8000336:	4a2c      	ldr	r2, [pc, #176]	; (80003e8 <init_timers_gpio+0x15c>)
 8000338:	629a      	str	r2, [r3, #40]	; 0x28
    TIM6->ARR = 400-1;
 800033a:	4b2a      	ldr	r3, [pc, #168]	; (80003e4 <init_timers_gpio+0x158>)
 800033c:	2290      	movs	r2, #144	; 0x90
 800033e:	32ff      	adds	r2, #255	; 0xff
 8000340:	62da      	str	r2, [r3, #44]	; 0x2c

    TIM6->EGR |= TIM_EGR_UG; // force an update to init the PSC shadow register
 8000342:	4b28      	ldr	r3, [pc, #160]	; (80003e4 <init_timers_gpio+0x158>)
 8000344:	695a      	ldr	r2, [r3, #20]
 8000346:	4b27      	ldr	r3, [pc, #156]	; (80003e4 <init_timers_gpio+0x158>)
 8000348:	2101      	movs	r1, #1
 800034a:	430a      	orrs	r2, r1
 800034c:	615a      	str	r2, [r3, #20]

    // TIM2 counts duration between presses
    // 2 interrupts: one at 3 time units (cnt == 3000) to end the character and another at 7 to add a space and pause the whole thing
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800034e:	4b1f      	ldr	r3, [pc, #124]	; (80003cc <init_timers_gpio+0x140>)
 8000350:	69da      	ldr	r2, [r3, #28]
 8000352:	4b1e      	ldr	r3, [pc, #120]	; (80003cc <init_timers_gpio+0x140>)
 8000354:	2101      	movs	r1, #1
 8000356:	430a      	orrs	r2, r1
 8000358:	61da      	str	r2, [r3, #28]
    TIM2->PSC = 48000-1;
 800035a:	2380      	movs	r3, #128	; 0x80
 800035c:	05db      	lsls	r3, r3, #23
 800035e:	4a22      	ldr	r2, [pc, #136]	; (80003e8 <init_timers_gpio+0x15c>)
 8000360:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 700-1;
 8000362:	2380      	movs	r3, #128	; 0x80
 8000364:	05db      	lsls	r3, r3, #23
 8000366:	4a21      	ldr	r2, [pc, #132]	; (80003ec <init_timers_gpio+0x160>)
 8000368:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->DIER |= TIM_DIER_UIE;
 800036a:	2380      	movs	r3, #128	; 0x80
 800036c:	05db      	lsls	r3, r3, #23
 800036e:	68da      	ldr	r2, [r3, #12]
 8000370:	2380      	movs	r3, #128	; 0x80
 8000372:	05db      	lsls	r3, r3, #23
 8000374:	2101      	movs	r1, #1
 8000376:	430a      	orrs	r2, r1
 8000378:	60da      	str	r2, [r3, #12]
    TIM2->DIER |= TIM_DIER_CC1IE;
 800037a:	2380      	movs	r3, #128	; 0x80
 800037c:	05db      	lsls	r3, r3, #23
 800037e:	68da      	ldr	r2, [r3, #12]
 8000380:	2380      	movs	r3, #128	; 0x80
 8000382:	05db      	lsls	r3, r3, #23
 8000384:	2102      	movs	r1, #2
 8000386:	430a      	orrs	r2, r1
 8000388:	60da      	str	r2, [r3, #12]
    TIM2->CCR1 = 300;
 800038a:	2380      	movs	r3, #128	; 0x80
 800038c:	05db      	lsls	r3, r3, #23
 800038e:	2296      	movs	r2, #150	; 0x96
 8000390:	0052      	lsls	r2, r2, #1
 8000392:	635a      	str	r2, [r3, #52]	; 0x34
    TIM2->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_0;
 8000394:	2380      	movs	r3, #128	; 0x80
 8000396:	05db      	lsls	r3, r3, #23
 8000398:	699a      	ldr	r2, [r3, #24]
 800039a:	2380      	movs	r3, #128	; 0x80
 800039c:	05db      	lsls	r3, r3, #23
 800039e:	2130      	movs	r1, #48	; 0x30
 80003a0:	430a      	orrs	r2, r1
 80003a2:	619a      	str	r2, [r3, #24]
    TIM2->CNT = 0;
 80003a4:	2380      	movs	r3, #128	; 0x80
 80003a6:	05db      	lsls	r3, r3, #23
 80003a8:	2200      	movs	r2, #0
 80003aa:	625a      	str	r2, [r3, #36]	; 0x24

    TIM2->EGR |= TIM_EGR_UG; // force an update
 80003ac:	2380      	movs	r3, #128	; 0x80
 80003ae:	05db      	lsls	r3, r3, #23
 80003b0:	695a      	ldr	r2, [r3, #20]
 80003b2:	2380      	movs	r3, #128	; 0x80
 80003b4:	05db      	lsls	r3, r3, #23
 80003b6:	2101      	movs	r1, #1
 80003b8:	430a      	orrs	r2, r1
 80003ba:	615a      	str	r2, [r3, #20]

    NVIC->ISER[0] = 1<<TIM2_IRQn;
 80003bc:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <init_timers_gpio+0x154>)
 80003be:	2280      	movs	r2, #128	; 0x80
 80003c0:	0212      	lsls	r2, r2, #8
 80003c2:	601a      	str	r2, [r3, #0]

}
 80003c4:	46c0      	nop			; (mov r8, r8)
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	46c0      	nop			; (mov r8, r8)
 80003cc:	40021000 	.word	0x40021000
 80003d0:	48000800 	.word	0x48000800
 80003d4:	ffff7fff 	.word	0xffff7fff
 80003d8:	40010000 	.word	0x40010000
 80003dc:	40010400 	.word	0x40010400
 80003e0:	e000e100 	.word	0xe000e100
 80003e4:	40001000 	.word	0x40001000
 80003e8:	0000bb7f 	.word	0x0000bb7f
 80003ec:	000002bb 	.word	0x000002bb

080003f0 <led_startup_commands>:
// pa15 = nCS
// pa5 = clk
// pa7 = d1


void led_startup_commands(){
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
	HAL_Delay(1);
 80003f4:	2001      	movs	r0, #1
 80003f6:	f000 fbf7 	bl	8000be8 <HAL_Delay>
	led_send_command(0x38);
 80003fa:	2038      	movs	r0, #56	; 0x38
 80003fc:	f000 f89c 	bl	8000538 <led_send_command>
	led_send_command(0x08);
 8000400:	2008      	movs	r0, #8
 8000402:	f000 f899 	bl	8000538 <led_send_command>
	led_send_command(0x01);
 8000406:	2001      	movs	r0, #1
 8000408:	f000 f896 	bl	8000538 <led_send_command>

	HAL_Delay(2);
 800040c:	2002      	movs	r0, #2
 800040e:	f000 fbeb 	bl	8000be8 <HAL_Delay>
	led_send_command(0x06);
 8000412:	2006      	movs	r0, #6
 8000414:	f000 f890 	bl	8000538 <led_send_command>
	led_send_command(0x02);
 8000418:	2002      	movs	r0, #2
 800041a:	f000 f88d 	bl	8000538 <led_send_command>
	led_send_command(0x0c);
 800041e:	200c      	movs	r0, #12
 8000420:	f000 f88a 	bl	8000538 <led_send_command>

}
 8000424:	46c0      	nop			; (mov r8, r8)
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <init_display>:
void init_display(){
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000430:	4b3d      	ldr	r3, [pc, #244]	; (8000528 <init_display+0xfc>)
 8000432:	695a      	ldr	r2, [r3, #20]
 8000434:	4b3c      	ldr	r3, [pc, #240]	; (8000528 <init_display+0xfc>)
 8000436:	2180      	movs	r1, #128	; 0x80
 8000438:	0289      	lsls	r1, r1, #10
 800043a:	430a      	orrs	r2, r1
 800043c:	615a      	str	r2, [r3, #20]

	GPIOA->MODER |= GPIO_MODER_MODER7_1; // pa7 as AF
 800043e:	2390      	movs	r3, #144	; 0x90
 8000440:	05db      	lsls	r3, r3, #23
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	2390      	movs	r3, #144	; 0x90
 8000446:	05db      	lsls	r3, r3, #23
 8000448:	2180      	movs	r1, #128	; 0x80
 800044a:	0209      	lsls	r1, r1, #8
 800044c:	430a      	orrs	r2, r1
 800044e:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= GPIO_MODER_MODER5_1; // pa5 as AF
 8000450:	2390      	movs	r3, #144	; 0x90
 8000452:	05db      	lsls	r3, r3, #23
 8000454:	681a      	ldr	r2, [r3, #0]
 8000456:	2390      	movs	r3, #144	; 0x90
 8000458:	05db      	lsls	r3, r3, #23
 800045a:	2180      	movs	r1, #128	; 0x80
 800045c:	0109      	lsls	r1, r1, #4
 800045e:	430a      	orrs	r2, r1
 8000460:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= GPIO_MODER_MODER15_1; // pa15 as AF
 8000462:	2390      	movs	r3, #144	; 0x90
 8000464:	05db      	lsls	r3, r3, #23
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	2390      	movs	r3, #144	; 0x90
 800046a:	05db      	lsls	r3, r3, #23
 800046c:	2180      	movs	r1, #128	; 0x80
 800046e:	0609      	lsls	r1, r1, #24
 8000470:	430a      	orrs	r2, r1
 8000472:	601a      	str	r2, [r3, #0]

	GPIOA->AFR[0] &= ~(0xf << 28); // pa7 as AF0 -> CLK
 8000474:	2390      	movs	r3, #144	; 0x90
 8000476:	05db      	lsls	r3, r3, #23
 8000478:	6a1a      	ldr	r2, [r3, #32]
 800047a:	2390      	movs	r3, #144	; 0x90
 800047c:	05db      	lsls	r3, r3, #23
 800047e:	0112      	lsls	r2, r2, #4
 8000480:	0912      	lsrs	r2, r2, #4
 8000482:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(0xf << 20); // pa5 as AF0  -> MOSI
 8000484:	2390      	movs	r3, #144	; 0x90
 8000486:	05db      	lsls	r3, r3, #23
 8000488:	6a1a      	ldr	r2, [r3, #32]
 800048a:	2390      	movs	r3, #144	; 0x90
 800048c:	05db      	lsls	r3, r3, #23
 800048e:	4927      	ldr	r1, [pc, #156]	; (800052c <init_display+0x100>)
 8000490:	400a      	ands	r2, r1
 8000492:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[1] &= ~(0xf << 28); // pa15 as AF0 -> nSS
 8000494:	2390      	movs	r3, #144	; 0x90
 8000496:	05db      	lsls	r3, r3, #23
 8000498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800049a:	2390      	movs	r3, #144	; 0x90
 800049c:	05db      	lsls	r3, r3, #23
 800049e:	0112      	lsls	r2, r2, #4
 80004a0:	0912      	lsrs	r2, r2, #4
 80004a2:	625a      	str	r2, [r3, #36]	; 0x24

	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80004a4:	4b20      	ldr	r3, [pc, #128]	; (8000528 <init_display+0xfc>)
 80004a6:	699a      	ldr	r2, [r3, #24]
 80004a8:	4b1f      	ldr	r3, [pc, #124]	; (8000528 <init_display+0xfc>)
 80004aa:	2180      	movs	r1, #128	; 0x80
 80004ac:	0149      	lsls	r1, r1, #5
 80004ae:	430a      	orrs	r2, r1
 80004b0:	619a      	str	r2, [r3, #24]
	SPI1->CR1 &= ~SPI_CR1_SPE; // turn off channel before config
 80004b2:	4b1f      	ldr	r3, [pc, #124]	; (8000530 <init_display+0x104>)
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	4b1e      	ldr	r3, [pc, #120]	; (8000530 <init_display+0x104>)
 80004b8:	2140      	movs	r1, #64	; 0x40
 80004ba:	438a      	bics	r2, r1
 80004bc:	601a      	str	r2, [r3, #0]
	while(SPI1->CR1 & SPI_CR1_SPE); // wait for it to be off
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	4b1b      	ldr	r3, [pc, #108]	; (8000530 <init_display+0x104>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2240      	movs	r2, #64	; 0x40
 80004c6:	4013      	ands	r3, r2
 80004c8:	d1fa      	bne.n	80004c0 <init_display+0x94>
	SPI1->CR1 |= SPI_CR1_BR; // set baud rate to all 1's
 80004ca:	4b19      	ldr	r3, [pc, #100]	; (8000530 <init_display+0x104>)
 80004cc:	681a      	ldr	r2, [r3, #0]
 80004ce:	4b18      	ldr	r3, [pc, #96]	; (8000530 <init_display+0x104>)
 80004d0:	2138      	movs	r1, #56	; 0x38
 80004d2:	430a      	orrs	r2, r1
 80004d4:	601a      	str	r2, [r3, #0]
	SPI1->CR2 |= SPI_CR2_DS_3; // 1001 DS = 10 bit word
 80004d6:	4b16      	ldr	r3, [pc, #88]	; (8000530 <init_display+0x104>)
 80004d8:	685a      	ldr	r2, [r3, #4]
 80004da:	4b15      	ldr	r3, [pc, #84]	; (8000530 <init_display+0x104>)
 80004dc:	2180      	movs	r1, #128	; 0x80
 80004de:	0109      	lsls	r1, r1, #4
 80004e0:	430a      	orrs	r2, r1
 80004e2:	605a      	str	r2, [r3, #4]
	SPI1->CR2 &= ~(SPI_CR2_DS_2 | SPI_CR2_DS_1);
 80004e4:	4b12      	ldr	r3, [pc, #72]	; (8000530 <init_display+0x104>)
 80004e6:	685a      	ldr	r2, [r3, #4]
 80004e8:	4b11      	ldr	r3, [pc, #68]	; (8000530 <init_display+0x104>)
 80004ea:	4912      	ldr	r1, [pc, #72]	; (8000534 <init_display+0x108>)
 80004ec:	400a      	ands	r2, r1
 80004ee:	605a      	str	r2, [r3, #4]
	SPI1->CR1 |= SPI_CR1_MSTR;
 80004f0:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <init_display+0x104>)
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <init_display+0x104>)
 80004f6:	2104      	movs	r1, #4
 80004f8:	430a      	orrs	r2, r1
 80004fa:	601a      	str	r2, [r3, #0]
	SPI1->CR2 |= SPI_CR2_SSOE;
 80004fc:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <init_display+0x104>)
 80004fe:	685a      	ldr	r2, [r3, #4]
 8000500:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <init_display+0x104>)
 8000502:	2104      	movs	r1, #4
 8000504:	430a      	orrs	r2, r1
 8000506:	605a      	str	r2, [r3, #4]
	SPI1->CR2 |= SPI_CR2_NSSP;
 8000508:	4b09      	ldr	r3, [pc, #36]	; (8000530 <init_display+0x104>)
 800050a:	685a      	ldr	r2, [r3, #4]
 800050c:	4b08      	ldr	r3, [pc, #32]	; (8000530 <init_display+0x104>)
 800050e:	2108      	movs	r1, #8
 8000510:	430a      	orrs	r2, r1
 8000512:	605a      	str	r2, [r3, #4]
	SPI1->CR1 |= SPI_CR1_SPE;
 8000514:	4b06      	ldr	r3, [pc, #24]	; (8000530 <init_display+0x104>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <init_display+0x104>)
 800051a:	2140      	movs	r1, #64	; 0x40
 800051c:	430a      	orrs	r2, r1
 800051e:	601a      	str	r2, [r3, #0]

}
 8000520:	46c0      	nop			; (mov r8, r8)
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	40021000 	.word	0x40021000
 800052c:	ff0fffff 	.word	0xff0fffff
 8000530:	40013000 	.word	0x40013000
 8000534:	fffff9ff 	.word	0xfffff9ff

08000538 <led_send_command>:


void led_send_command(uint16_t cmd){
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	0002      	movs	r2, r0
 8000540:	1dbb      	adds	r3, r7, #6
 8000542:	801a      	strh	r2, [r3, #0]
	while(!(SPI1->SR & SPI_SR_TXE)); // wait for there to be a transmission
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	4b06      	ldr	r3, [pc, #24]	; (8000560 <led_send_command+0x28>)
 8000548:	689b      	ldr	r3, [r3, #8]
 800054a:	2202      	movs	r2, #2
 800054c:	4013      	ands	r3, r2
 800054e:	d0fa      	beq.n	8000546 <led_send_command+0xe>
	SPI1->DR = cmd;
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <led_send_command+0x28>)
 8000552:	1dba      	adds	r2, r7, #6
 8000554:	8812      	ldrh	r2, [r2, #0]
 8000556:	60da      	str	r2, [r3, #12]
}
 8000558:	46c0      	nop			; (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	b002      	add	sp, #8
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40013000 	.word	0x40013000

08000564 <led_send_char>:


void led_send_char(char ch){
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	0002      	movs	r2, r0
 800056c:	1dfb      	adds	r3, r7, #7
 800056e:	701a      	strb	r2, [r3, #0]
	led_send_command(0x02);
 8000570:	2002      	movs	r0, #2
 8000572:	f7ff ffe1 	bl	8000538 <led_send_command>
	led_send_command(0x200 | ch); // send the char
 8000576:	1dfb      	adds	r3, r7, #7
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	b21b      	sxth	r3, r3
 800057c:	2280      	movs	r2, #128	; 0x80
 800057e:	0092      	lsls	r2, r2, #2
 8000580:	4313      	orrs	r3, r2
 8000582:	b21b      	sxth	r3, r3
 8000584:	b29b      	uxth	r3, r3
 8000586:	0018      	movs	r0, r3
 8000588:	f7ff ffd6 	bl	8000538 <led_send_command>
	led_send_command(0x013); // shift display to the right
 800058c:	2013      	movs	r0, #19
 800058e:	f7ff ffd3 	bl	8000538 <led_send_command>
}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	46bd      	mov	sp, r7
 8000596:	b002      	add	sp, #8
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <EXTI0_1_IRQHandler>:

void SystemClock_Config(void);



void EXTI0_1_IRQHandler(){
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0

	// ack interrupt -> clear 1st bit of EXTI->PR
	EXTI->PR = 1<<1;
 80005a2:	4b2f      	ldr	r3, [pc, #188]	; (8000660 <EXTI0_1_IRQHandler+0xc4>)
 80005a4:	2202      	movs	r2, #2
 80005a6:	615a      	str	r2, [r3, #20]

	// toggle pc7 led
	if((GPIOA->IDR >> 1) & 1){ // button pin is high (triggered by rising edge)
 80005a8:	2390      	movs	r3, #144	; 0x90
 80005aa:	05db      	lsls	r3, r3, #23
 80005ac:	691b      	ldr	r3, [r3, #16]
 80005ae:	2202      	movs	r2, #2
 80005b0:	4013      	ands	r3, r2
 80005b2:	d01b      	beq.n	80005ec <EXTI0_1_IRQHandler+0x50>

		// turn on led
		GPIOC->BSRR = (1 << 7);
 80005b4:	4b2b      	ldr	r3, [pc, #172]	; (8000664 <EXTI0_1_IRQHandler+0xc8>)
 80005b6:	2280      	movs	r2, #128	; 0x80
 80005b8:	619a      	str	r2, [r3, #24]

		// turn on buzzer
		TIM3->CR1 |= TIM_CR1_CEN;
 80005ba:	4b2b      	ldr	r3, [pc, #172]	; (8000668 <EXTI0_1_IRQHandler+0xcc>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	4b2a      	ldr	r3, [pc, #168]	; (8000668 <EXTI0_1_IRQHandler+0xcc>)
 80005c0:	2101      	movs	r1, #1
 80005c2:	430a      	orrs	r2, r1
 80005c4:	601a      	str	r2, [r3, #0]

		// stop the inactivity timer
		TIM2->CR1 &= ~1;
 80005c6:	2380      	movs	r3, #128	; 0x80
 80005c8:	05db      	lsls	r3, r3, #23
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	2380      	movs	r3, #128	; 0x80
 80005ce:	05db      	lsls	r3, r3, #23
 80005d0:	2101      	movs	r1, #1
 80005d2:	438a      	bics	r2, r1
 80005d4:	601a      	str	r2, [r3, #0]
		TIM2->CNT = 0;
 80005d6:	2380      	movs	r3, #128	; 0x80
 80005d8:	05db      	lsls	r3, r3, #23
 80005da:	2200      	movs	r2, #0
 80005dc:	625a      	str	r2, [r3, #36]	; 0x24

		// start activity timer
		TIM6->CR1 |= 1;
 80005de:	4b23      	ldr	r3, [pc, #140]	; (800066c <EXTI0_1_IRQHandler+0xd0>)
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	4b22      	ldr	r3, [pc, #136]	; (800066c <EXTI0_1_IRQHandler+0xd0>)
 80005e4:	2101      	movs	r1, #1
 80005e6:	430a      	orrs	r2, r1
 80005e8:	601a      	str	r2, [r3, #0]

		// start inactivity timer
		TIM2->CR1 |= TIM_CR1_CEN;

	}
}
 80005ea:	e035      	b.n	8000658 <EXTI0_1_IRQHandler+0xbc>
		GPIOC->BSRR = (1 << 7) << 16;
 80005ec:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <EXTI0_1_IRQHandler+0xc8>)
 80005ee:	2280      	movs	r2, #128	; 0x80
 80005f0:	0412      	lsls	r2, r2, #16
 80005f2:	619a      	str	r2, [r3, #24]
		TIM3->CR1 &= ~TIM_CR1_CEN;
 80005f4:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <EXTI0_1_IRQHandler+0xcc>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <EXTI0_1_IRQHandler+0xcc>)
 80005fa:	2101      	movs	r1, #1
 80005fc:	438a      	bics	r2, r1
 80005fe:	601a      	str	r2, [r3, #0]
		TIM3->CNT = 17; // cnt > ccr1 to make sure line is low
 8000600:	4b19      	ldr	r3, [pc, #100]	; (8000668 <EXTI0_1_IRQHandler+0xcc>)
 8000602:	2211      	movs	r2, #17
 8000604:	625a      	str	r2, [r3, #36]	; 0x24
		int count = (int) TIM6->CNT;
 8000606:	4b19      	ldr	r3, [pc, #100]	; (800066c <EXTI0_1_IRQHandler+0xd0>)
 8000608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800060a:	607b      	str	r3, [r7, #4]
		TIM6->CR1 &= ~1;
 800060c:	4b17      	ldr	r3, [pc, #92]	; (800066c <EXTI0_1_IRQHandler+0xd0>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b16      	ldr	r3, [pc, #88]	; (800066c <EXTI0_1_IRQHandler+0xd0>)
 8000612:	2101      	movs	r1, #1
 8000614:	438a      	bics	r2, r1
 8000616:	601a      	str	r2, [r3, #0]
		TIM6->CNT = 0;
 8000618:	4b14      	ldr	r3, [pc, #80]	; (800066c <EXTI0_1_IRQHandler+0xd0>)
 800061a:	2200      	movs	r2, #0
 800061c:	625a      	str	r2, [r3, #36]	; 0x24
		if(count < 115){ // press was shorter than 115ms -> dit
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b72      	cmp	r3, #114	; 0x72
 8000622:	dc08      	bgt.n	8000636 <EXTI0_1_IRQHandler+0x9a>
			state = morse_tree[(int)state][0];
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <EXTI0_1_IRQHandler+0xd4>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	001a      	movs	r2, r3
 800062a:	4b12      	ldr	r3, [pc, #72]	; (8000674 <EXTI0_1_IRQHandler+0xd8>)
 800062c:	0052      	lsls	r2, r2, #1
 800062e:	5cd2      	ldrb	r2, [r2, r3]
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <EXTI0_1_IRQHandler+0xd4>)
 8000632:	701a      	strb	r2, [r3, #0]
 8000634:	e008      	b.n	8000648 <EXTI0_1_IRQHandler+0xac>
			state = morse_tree[(int)state][1];
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <EXTI0_1_IRQHandler+0xd4>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	4a0e      	ldr	r2, [pc, #56]	; (8000674 <EXTI0_1_IRQHandler+0xd8>)
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	18d3      	adds	r3, r2, r3
 8000640:	3301      	adds	r3, #1
 8000642:	781a      	ldrb	r2, [r3, #0]
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <EXTI0_1_IRQHandler+0xd4>)
 8000646:	701a      	strb	r2, [r3, #0]
		TIM2->CR1 |= TIM_CR1_CEN;
 8000648:	2380      	movs	r3, #128	; 0x80
 800064a:	05db      	lsls	r3, r3, #23
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	2380      	movs	r3, #128	; 0x80
 8000650:	05db      	lsls	r3, r3, #23
 8000652:	2101      	movs	r1, #1
 8000654:	430a      	orrs	r2, r1
 8000656:	601a      	str	r2, [r3, #0]
}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	b002      	add	sp, #8
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40010400 	.word	0x40010400
 8000664:	48000800 	.word	0x48000800
 8000668:	40000400 	.word	0x40000400
 800066c:	40001000 	.word	0x40001000
 8000670:	20000028 	.word	0x20000028
 8000674:	080017b0 	.word	0x080017b0

08000678 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(){
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	if(!(forcedEventFlag & 1)){ // if this is the first interrupt
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <TIM6_DAC_IRQHandler+0x58>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	001a      	movs	r2, r3
 8000684:	2301      	movs	r3, #1
 8000686:	4013      	ands	r3, r2
 8000688:	d10e      	bne.n	80006a8 <TIM6_DAC_IRQHandler+0x30>
		forcedEventFlag |= 1; // set the 0th bit to ack init event
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <TIM6_DAC_IRQHandler+0x58>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	b2db      	uxtb	r3, r3
 8000690:	2201      	movs	r2, #1
 8000692:	4313      	orrs	r3, r2
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <TIM6_DAC_IRQHandler+0x58>)
 8000698:	701a      	strb	r2, [r3, #0]
		TIM6->SR &= ~TIM_SR_UIF;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <TIM6_DAC_IRQHandler+0x5c>)
 800069c:	691a      	ldr	r2, [r3, #16]
 800069e:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <TIM6_DAC_IRQHandler+0x5c>)
 80006a0:	2101      	movs	r1, #1
 80006a2:	438a      	bics	r2, r1
 80006a4:	611a      	str	r2, [r3, #16]
		// timer and set its cnt to 399
		TIM6->SR &= ~TIM_SR_UIF;
		TIM6->CR1 &= ~TIM_CR1_CEN; // stop the timer
		TIM6->CNT = 399; // max out the timer so that a dash is interpreted
	}
}
 80006a6:	e00f      	b.n	80006c8 <TIM6_DAC_IRQHandler+0x50>
		TIM6->SR &= ~TIM_SR_UIF;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <TIM6_DAC_IRQHandler+0x5c>)
 80006aa:	691a      	ldr	r2, [r3, #16]
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <TIM6_DAC_IRQHandler+0x5c>)
 80006ae:	2101      	movs	r1, #1
 80006b0:	438a      	bics	r2, r1
 80006b2:	611a      	str	r2, [r3, #16]
		TIM6->CR1 &= ~TIM_CR1_CEN; // stop the timer
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <TIM6_DAC_IRQHandler+0x5c>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <TIM6_DAC_IRQHandler+0x5c>)
 80006ba:	2101      	movs	r1, #1
 80006bc:	438a      	bics	r2, r1
 80006be:	601a      	str	r2, [r3, #0]
		TIM6->CNT = 399; // max out the timer so that a dash is interpreted
 80006c0:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <TIM6_DAC_IRQHandler+0x5c>)
 80006c2:	2290      	movs	r2, #144	; 0x90
 80006c4:	32ff      	adds	r2, #255	; 0xff
 80006c6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80006c8:	46c0      	nop			; (mov r8, r8)
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	20000029 	.word	0x20000029
 80006d4:	40001000 	.word	0x40001000

080006d8 <TIM2_IRQHandler>:

void TIM2_IRQHandler(){
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0

	// check if interrupt triggered from 3 inactive time units (end of curr dit/dash)
	// or from 7 inactive time units (end of word, send a space)

	// bit 1 of forcedEventFlag == 0 means this is the first interrupt (wrong clock speed)
	if(!(forcedEventFlag & 1<<1)){
 80006dc:	4b28      	ldr	r3, [pc, #160]	; (8000780 <TIM2_IRQHandler+0xa8>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	001a      	movs	r2, r3
 80006e4:	2302      	movs	r3, #2
 80006e6:	4013      	ands	r3, r2
 80006e8:	d110      	bne.n	800070c <TIM2_IRQHandler+0x34>
		forcedEventFlag |= 1<<1; // set that bit to ack this
 80006ea:	4b25      	ldr	r3, [pc, #148]	; (8000780 <TIM2_IRQHandler+0xa8>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	2202      	movs	r2, #2
 80006f2:	4313      	orrs	r3, r2
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	4b22      	ldr	r3, [pc, #136]	; (8000780 <TIM2_IRQHandler+0xa8>)
 80006f8:	701a      	strb	r2, [r3, #0]
		TIM2->SR &= ~TIM_SR_UIF;
 80006fa:	2380      	movs	r3, #128	; 0x80
 80006fc:	05db      	lsls	r3, r3, #23
 80006fe:	691a      	ldr	r2, [r3, #16]
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	05db      	lsls	r3, r3, #23
 8000704:	2101      	movs	r1, #1
 8000706:	438a      	bics	r2, r1
 8000708:	611a      	str	r2, [r3, #16]
		return;
 800070a:	e036      	b.n	800077a <TIM2_IRQHandler+0xa2>
	}

	if(TIM2->SR & TIM_SR_CC1IF){
 800070c:	2380      	movs	r3, #128	; 0x80
 800070e:	05db      	lsls	r3, r3, #23
 8000710:	691b      	ldr	r3, [r3, #16]
 8000712:	2202      	movs	r2, #2
 8000714:	4013      	ands	r3, r2
 8000716:	d010      	beq.n	800073a <TIM2_IRQHandler+0x62>
		// interrupt source: 3 inactive time units
		TIM2->SR &= ~(TIM_SR_CC1IF); // clear CC1IF bit
 8000718:	2380      	movs	r3, #128	; 0x80
 800071a:	05db      	lsls	r3, r3, #23
 800071c:	691a      	ldr	r2, [r3, #16]
 800071e:	2380      	movs	r3, #128	; 0x80
 8000720:	05db      	lsls	r3, r3, #23
 8000722:	2102      	movs	r1, #2
 8000724:	438a      	bics	r2, r1
 8000726:	611a      	str	r2, [r3, #16]
		// and send the current char to serial port
		uart_send_char(node_decode[(int)state]);
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <TIM2_IRQHandler+0xac>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	001a      	movs	r2, r3
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <TIM2_IRQHandler+0xb0>)
 8000730:	5c9b      	ldrb	r3, [r3, r2]
 8000732:	0018      	movs	r0, r3
 8000734:	f000 f8bc 	bl	80008b0 <uart_send_char>
 8000738:	e01c      	b.n	8000774 <TIM2_IRQHandler+0x9c>

	} else if(TIM2->SR & TIM_SR_UIF){
 800073a:	2380      	movs	r3, #128	; 0x80
 800073c:	05db      	lsls	r3, r3, #23
 800073e:	691b      	ldr	r3, [r3, #16]
 8000740:	2201      	movs	r2, #1
 8000742:	4013      	ands	r3, r2
 8000744:	d016      	beq.n	8000774 <TIM2_IRQHandler+0x9c>
		// interrupt source: 7 inactive time units
		TIM2->SR &= ~TIM_SR_UIF; // clear UIF flag
 8000746:	2380      	movs	r3, #128	; 0x80
 8000748:	05db      	lsls	r3, r3, #23
 800074a:	691a      	ldr	r2, [r3, #16]
 800074c:	2380      	movs	r3, #128	; 0x80
 800074e:	05db      	lsls	r3, r3, #23
 8000750:	2101      	movs	r1, #1
 8000752:	438a      	bics	r2, r1
 8000754:	611a      	str	r2, [r3, #16]
		TIM2->CR1 &= ~TIM_CR1_CEN; // stop the timer
 8000756:	2380      	movs	r3, #128	; 0x80
 8000758:	05db      	lsls	r3, r3, #23
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	2380      	movs	r3, #128	; 0x80
 800075e:	05db      	lsls	r3, r3, #23
 8000760:	2101      	movs	r1, #1
 8000762:	438a      	bics	r2, r1
 8000764:	601a      	str	r2, [r3, #0]
		// send a space, since this means end of current word
		uart_send_char(' ');
 8000766:	2020      	movs	r0, #32
 8000768:	f000 f8a2 	bl	80008b0 <uart_send_char>
		TIM2->CNT = 0;
 800076c:	2380      	movs	r3, #128	; 0x80
 800076e:	05db      	lsls	r3, r3, #23
 8000770:	2200      	movs	r2, #0
 8000772:	625a      	str	r2, [r3, #36]	; 0x24
	}

	// restart state
	state = START;
 8000774:	4b03      	ldr	r3, [pc, #12]	; (8000784 <TIM2_IRQHandler+0xac>)
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]

}
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	20000029 	.word	0x20000029
 8000784:	20000028 	.word	0x20000028
 8000788:	0800180c 	.word	0x0800180c

0800078c <main>:


int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0

  HAL_Init();
 8000790:	f000 f9c6 	bl	8000b20 <HAL_Init>
  SystemClock_Config();
 8000794:	f000 f83c 	bl	8000810 <SystemClock_Config>

  init_serial_port();
 8000798:	f000 f8b8 	bl	800090c <init_serial_port>

  init_timers_gpio();
 800079c:	f7ff fd76 	bl	800028c <init_timers_gpio>
  init_buzzer_pwm();
 80007a0:	f7ff fd3c 	bl	800021c <init_buzzer_pwm>

  init_display();
 80007a4:	f7ff fe42 	bl	800042c <init_display>
  led_startup_commands();
 80007a8:	f7ff fe22 	bl	80003f0 <led_startup_commands>

  led_send_char('C');
 80007ac:	2043      	movs	r0, #67	; 0x43
 80007ae:	f7ff fed9 	bl	8000564 <led_send_char>
  led_send_char('u');
 80007b2:	2075      	movs	r0, #117	; 0x75
 80007b4:	f7ff fed6 	bl	8000564 <led_send_char>
  led_send_char('t');
 80007b8:	2074      	movs	r0, #116	; 0x74
 80007ba:	f7ff fed3 	bl	8000564 <led_send_char>
  led_send_char('i');
 80007be:	2069      	movs	r0, #105	; 0x69
 80007c0:	f7ff fed0 	bl	8000564 <led_send_char>
  led_send_char('e');
 80007c4:	2065      	movs	r0, #101	; 0x65
 80007c6:	f7ff fecd 	bl	8000564 <led_send_char>
  led_send_char(' ');
 80007ca:	2020      	movs	r0, #32
 80007cc:	f7ff feca 	bl	8000564 <led_send_char>
  led_send_char('p');
 80007d0:	2070      	movs	r0, #112	; 0x70
 80007d2:	f7ff fec7 	bl	8000564 <led_send_char>
  led_send_char('a');
 80007d6:	2061      	movs	r0, #97	; 0x61
 80007d8:	f7ff fec4 	bl	8000564 <led_send_char>
  led_send_char('t');
 80007dc:	2074      	movs	r0, #116	; 0x74
 80007de:	f7ff fec1 	bl	8000564 <led_send_char>
  led_send_char('o');
 80007e2:	206f      	movs	r0, #111	; 0x6f
 80007e4:	f7ff febe 	bl	8000564 <led_send_char>
  led_send_char('o');
 80007e8:	206f      	movs	r0, #111	; 0x6f
 80007ea:	f7ff febb 	bl	8000564 <led_send_char>
  led_send_char('t');
 80007ee:	2074      	movs	r0, #116	; 0x74
 80007f0:	f7ff feb8 	bl	8000564 <led_send_char>
  led_send_char('i');
 80007f4:	2069      	movs	r0, #105	; 0x69
 80007f6:	f7ff feb5 	bl	8000564 <led_send_char>
  led_send_char('e');
 80007fa:	2065      	movs	r0, #101	; 0x65
 80007fc:	f7ff feb2 	bl	8000564 <led_send_char>


  uart_send_string("\n\r");
 8000800:	4b02      	ldr	r3, [pc, #8]	; (800080c <main+0x80>)
 8000802:	0018      	movs	r0, r3
 8000804:	f000 f86c 	bl	80008e0 <uart_send_string>
  for(;;);
 8000808:	e7fe      	b.n	8000808 <main+0x7c>
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	080017ac 	.word	0x080017ac

08000810 <SystemClock_Config>:

}

// set system clock to HSI with PLL for 48MHz clock
void SystemClock_Config(void)
{
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b093      	sub	sp, #76	; 0x4c
 8000814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000816:	2414      	movs	r4, #20
 8000818:	193b      	adds	r3, r7, r4
 800081a:	0018      	movs	r0, r3
 800081c:	2334      	movs	r3, #52	; 0x34
 800081e:	001a      	movs	r2, r3
 8000820:	2100      	movs	r1, #0
 8000822:	f000 ff8b 	bl	800173c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	0018      	movs	r0, r3
 800082a:	2310      	movs	r3, #16
 800082c:	001a      	movs	r2, r3
 800082e:	2100      	movs	r1, #0
 8000830:	f000 ff84 	bl	800173c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000834:	0021      	movs	r1, r4
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2202      	movs	r2, #2
 800083a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800083c:	187b      	adds	r3, r7, r1
 800083e:	2201      	movs	r2, #1
 8000840:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000842:	187b      	adds	r3, r7, r1
 8000844:	2210      	movs	r2, #16
 8000846:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000848:	187b      	adds	r3, r7, r1
 800084a:	2202      	movs	r2, #2
 800084c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;  // Set the PLL source to HSI
 800084e:	187b      	adds	r3, r7, r1
 8000850:	2280      	movs	r2, #128	; 0x80
 8000852:	0212      	lsls	r2, r2, #8
 8000854:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;  // Multiply by 6 to get 48 MHz (8 MHz * 6 = 48 MHz)
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2280      	movs	r2, #128	; 0x80
 800085a:	0352      	lsls	r2, r2, #13
 800085c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;  // Set the pre-divider to 1
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2200      	movs	r2, #0
 8000862:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000864:	187b      	adds	r3, r7, r1
 8000866:	0018      	movs	r0, r3
 8000868:	f000 fa96 	bl	8000d98 <HAL_RCC_OscConfig>
 800086c:	1e03      	subs	r3, r0, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000870:	f000 f819 	bl	80008a6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2207      	movs	r2, #7
 8000878:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2202      	movs	r2, #2
 800087e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2101      	movs	r1, #1
 8000890:	0018      	movs	r0, r3
 8000892:	f000 fe07 	bl	80014a4 <HAL_RCC_ClockConfig>
 8000896:	1e03      	subs	r3, r0, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800089a:	f000 f804 	bl	80008a6 <Error_Handler>
  }
}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b013      	add	sp, #76	; 0x4c
 80008a4:	bd90      	pop	{r4, r7, pc}

080008a6 <Error_Handler>:




void Error_Handler(void)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008aa:	b672      	cpsid	i
}
 80008ac:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ae:	e7fe      	b.n	80008ae <Error_Handler+0x8>

080008b0 <uart_send_char>:
#include <stdio.h>
#include "serial_port.h"
#include "main.h"


void uart_send_char(char ch){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	0002      	movs	r2, r0
 80008b8:	1dfb      	adds	r3, r7, #7
 80008ba:	701a      	strb	r2, [r3, #0]
	while (!(USART5->ISR & (1 << 7)));
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	4b07      	ldr	r3, [pc, #28]	; (80008dc <uart_send_char+0x2c>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	2280      	movs	r2, #128	; 0x80
 80008c4:	4013      	ands	r3, r2
 80008c6:	d0fa      	beq.n	80008be <uart_send_char+0xe>
	USART5->TDR = ch;
 80008c8:	4a04      	ldr	r2, [pc, #16]	; (80008dc <uart_send_char+0x2c>)
 80008ca:	1dfb      	adds	r3, r7, #7
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	8513      	strh	r3, [r2, #40]	; 0x28
}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b002      	add	sp, #8
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	40005000 	.word	0x40005000

080008e0 <uart_send_string>:

void uart_send_string(const char* str) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
    while (*str) {  // Continue until the null terminator is encountered
 80008e8:	e007      	b.n	80008fa <uart_send_string+0x1a>
        uart_send_char(*str);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	0018      	movs	r0, r3
 80008f0:	f7ff ffde 	bl	80008b0 <uart_send_char>
        str++;  // Move to the next character in the string
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	3301      	adds	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
    while (*str) {  // Continue until the null terminator is encountered
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d1f3      	bne.n	80008ea <uart_send_string+0xa>
    }
}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	b002      	add	sp, #8
 800090a:	bd80      	pop	{r7, pc}

0800090c <init_serial_port>:
    snprintf(buffer, sizeof(buffer), "%x", value);  // Convert the integer to a string
    uart_send_string(buffer);  // Send the string over UART
    uart_send_char(' ');
}

void init_serial_port(){
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0

	// ------------------ serial port UART setup ----------------

	RCC->AHBENR |= RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIODEN; // enable GPIOD and GPIOC clocks
 8000910:	4b42      	ldr	r3, [pc, #264]	; (8000a1c <init_serial_port+0x110>)
 8000912:	695a      	ldr	r2, [r3, #20]
 8000914:	4b41      	ldr	r3, [pc, #260]	; (8000a1c <init_serial_port+0x110>)
 8000916:	21c0      	movs	r1, #192	; 0xc0
 8000918:	0349      	lsls	r1, r1, #13
 800091a:	430a      	orrs	r2, r1
 800091c:	615a      	str	r2, [r3, #20]
	RCC->APB1ENR |= RCC_APB1ENR_USART5EN;
 800091e:	4b3f      	ldr	r3, [pc, #252]	; (8000a1c <init_serial_port+0x110>)
 8000920:	69da      	ldr	r2, [r3, #28]
 8000922:	4b3e      	ldr	r3, [pc, #248]	; (8000a1c <init_serial_port+0x110>)
 8000924:	2180      	movs	r1, #128	; 0x80
 8000926:	0349      	lsls	r1, r1, #13
 8000928:	430a      	orrs	r2, r1
 800092a:	61da      	str	r2, [r3, #28]
	// set MODER's to alternate function
	GPIOC->MODER |= GPIO_MODER_MODER12_1;
 800092c:	4b3c      	ldr	r3, [pc, #240]	; (8000a20 <init_serial_port+0x114>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	4b3b      	ldr	r3, [pc, #236]	; (8000a20 <init_serial_port+0x114>)
 8000932:	2180      	movs	r1, #128	; 0x80
 8000934:	0489      	lsls	r1, r1, #18
 8000936:	430a      	orrs	r2, r1
 8000938:	601a      	str	r2, [r3, #0]
	GPIOC->MODER &= ~(GPIO_MODER_MODER12_0);
 800093a:	4b39      	ldr	r3, [pc, #228]	; (8000a20 <init_serial_port+0x114>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	4b38      	ldr	r3, [pc, #224]	; (8000a20 <init_serial_port+0x114>)
 8000940:	4938      	ldr	r1, [pc, #224]	; (8000a24 <init_serial_port+0x118>)
 8000942:	400a      	ands	r2, r1
 8000944:	601a      	str	r2, [r3, #0]

	GPIOD->MODER |= GPIO_MODER_MODER2_1;
 8000946:	4b38      	ldr	r3, [pc, #224]	; (8000a28 <init_serial_port+0x11c>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	4b37      	ldr	r3, [pc, #220]	; (8000a28 <init_serial_port+0x11c>)
 800094c:	2120      	movs	r1, #32
 800094e:	430a      	orrs	r2, r1
 8000950:	601a      	str	r2, [r3, #0]
	GPIOD->MODER &= ~GPIO_MODER_MODER2_0;
 8000952:	4b35      	ldr	r3, [pc, #212]	; (8000a28 <init_serial_port+0x11c>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	4b34      	ldr	r3, [pc, #208]	; (8000a28 <init_serial_port+0x11c>)
 8000958:	2110      	movs	r1, #16
 800095a:	438a      	bics	r2, r1
 800095c:	601a      	str	r2, [r3, #0]

	// configure pc12 for UART5_TX (AF2)
	GPIOC->AFR[1] &= ~GPIO_AFRH_AFSEL12;
 800095e:	4b30      	ldr	r3, [pc, #192]	; (8000a20 <init_serial_port+0x114>)
 8000960:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000962:	4b2f      	ldr	r3, [pc, #188]	; (8000a20 <init_serial_port+0x114>)
 8000964:	4931      	ldr	r1, [pc, #196]	; (8000a2c <init_serial_port+0x120>)
 8000966:	400a      	ands	r2, r1
 8000968:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOC->AFR[1] |= (2 << 16);
 800096a:	4b2d      	ldr	r3, [pc, #180]	; (8000a20 <init_serial_port+0x114>)
 800096c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800096e:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <init_serial_port+0x114>)
 8000970:	2180      	movs	r1, #128	; 0x80
 8000972:	0289      	lsls	r1, r1, #10
 8000974:	430a      	orrs	r2, r1
 8000976:	625a      	str	r2, [r3, #36]	; 0x24

	// configure pd2 for UART5_RX (AF2)
	GPIOD->AFR[0] &= ~GPIO_AFRL_AFSEL2;
 8000978:	4b2b      	ldr	r3, [pc, #172]	; (8000a28 <init_serial_port+0x11c>)
 800097a:	6a1a      	ldr	r2, [r3, #32]
 800097c:	4b2a      	ldr	r3, [pc, #168]	; (8000a28 <init_serial_port+0x11c>)
 800097e:	492c      	ldr	r1, [pc, #176]	; (8000a30 <init_serial_port+0x124>)
 8000980:	400a      	ands	r2, r1
 8000982:	621a      	str	r2, [r3, #32]
	GPIOD->AFR[0] |= (2 << 8);
 8000984:	4b28      	ldr	r3, [pc, #160]	; (8000a28 <init_serial_port+0x11c>)
 8000986:	6a1a      	ldr	r2, [r3, #32]
 8000988:	4b27      	ldr	r3, [pc, #156]	; (8000a28 <init_serial_port+0x11c>)
 800098a:	2180      	movs	r1, #128	; 0x80
 800098c:	0089      	lsls	r1, r1, #2
 800098e:	430a      	orrs	r2, r1
 8000990:	621a      	str	r2, [r3, #32]

	// first, turn off the UE bit
	USART5->CR1 &= ~USART_CR1_UE;
 8000992:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <init_serial_port+0x128>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	4b27      	ldr	r3, [pc, #156]	; (8000a34 <init_serial_port+0x128>)
 8000998:	2101      	movs	r1, #1
 800099a:	438a      	bics	r2, r1
 800099c:	601a      	str	r2, [r3, #0]

	// set word length to 8 bits
	USART5->CR1 &= ~USART_CR1_M0;
 800099e:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <init_serial_port+0x128>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	4b24      	ldr	r3, [pc, #144]	; (8000a34 <init_serial_port+0x128>)
 80009a4:	4924      	ldr	r1, [pc, #144]	; (8000a38 <init_serial_port+0x12c>)
 80009a6:	400a      	ands	r2, r1
 80009a8:	601a      	str	r2, [r3, #0]
	USART5->CR1 &= ~USART_CR1_M1;
 80009aa:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <init_serial_port+0x128>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <init_serial_port+0x128>)
 80009b0:	4922      	ldr	r1, [pc, #136]	; (8000a3c <init_serial_port+0x130>)
 80009b2:	400a      	ands	r2, r1
 80009b4:	601a      	str	r2, [r3, #0]

	// set for 1 stop bit
	USART5->CR2 &= ~(USART_CR2_STOP);
 80009b6:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <init_serial_port+0x128>)
 80009b8:	685a      	ldr	r2, [r3, #4]
 80009ba:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <init_serial_port+0x128>)
 80009bc:	4920      	ldr	r1, [pc, #128]	; (8000a40 <init_serial_port+0x134>)
 80009be:	400a      	ands	r2, r1
 80009c0:	605a      	str	r2, [r3, #4]

	// no parity
	USART5->CR1 &= ~(USART_CR1_PCE);
 80009c2:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <init_serial_port+0x128>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <init_serial_port+0x128>)
 80009c8:	491e      	ldr	r1, [pc, #120]	; (8000a44 <init_serial_port+0x138>)
 80009ca:	400a      	ands	r2, r1
 80009cc:	601a      	str	r2, [r3, #0]

	// 16x over-sampling
	USART5->CR1 &= ~(USART_CR1_OVER8);
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <init_serial_port+0x128>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <init_serial_port+0x128>)
 80009d4:	491c      	ldr	r1, [pc, #112]	; (8000a48 <init_serial_port+0x13c>)
 80009d6:	400a      	ands	r2, r1
 80009d8:	601a      	str	r2, [r3, #0]

	// baud rate 115200
	USART5->BRR = 0x1a1;
 80009da:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <init_serial_port+0x128>)
 80009dc:	22a2      	movs	r2, #162	; 0xa2
 80009de:	32ff      	adds	r2, #255	; 0xff
 80009e0:	60da      	str	r2, [r3, #12]

	// enable receiver and transmitter
	USART5->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <init_serial_port+0x128>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <init_serial_port+0x128>)
 80009e8:	210c      	movs	r1, #12
 80009ea:	430a      	orrs	r2, r1
 80009ec:	601a      	str	r2, [r3, #0]

	// enable UART
	USART5->CR1 |= USART_CR1_UE;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <init_serial_port+0x128>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <init_serial_port+0x128>)
 80009f4:	2101      	movs	r1, #1
 80009f6:	430a      	orrs	r2, r1
 80009f8:	601a      	str	r2, [r3, #0]

	// wait for things to work?
	while(!(USART5->ISR & USART_ISR_REACK) || !(USART5->ISR & USART_ISR_TEACK));
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <init_serial_port+0x128>)
 80009fe:	69da      	ldr	r2, [r3, #28]
 8000a00:	2380      	movs	r3, #128	; 0x80
 8000a02:	03db      	lsls	r3, r3, #15
 8000a04:	4013      	ands	r3, r2
 8000a06:	d0f9      	beq.n	80009fc <init_serial_port+0xf0>
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <init_serial_port+0x128>)
 8000a0a:	69da      	ldr	r2, [r3, #28]
 8000a0c:	2380      	movs	r3, #128	; 0x80
 8000a0e:	039b      	lsls	r3, r3, #14
 8000a10:	4013      	ands	r3, r2
 8000a12:	d0f3      	beq.n	80009fc <init_serial_port+0xf0>

}
 8000a14:	46c0      	nop			; (mov r8, r8)
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	48000800 	.word	0x48000800
 8000a24:	feffffff 	.word	0xfeffffff
 8000a28:	48000c00 	.word	0x48000c00
 8000a2c:	fff0ffff 	.word	0xfff0ffff
 8000a30:	fffff0ff 	.word	0xfffff0ff
 8000a34:	40005000 	.word	0x40005000
 8000a38:	ffffefff 	.word	0xffffefff
 8000a3c:	efffffff 	.word	0xefffffff
 8000a40:	ffffcfff 	.word	0xffffcfff
 8000a44:	fffffbff 	.word	0xfffffbff
 8000a48:	ffff7fff 	.word	0xffff7fff

08000a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <HAL_MspInit+0x44>)
 8000a54:	699a      	ldr	r2, [r3, #24]
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <HAL_MspInit+0x44>)
 8000a58:	2101      	movs	r1, #1
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	619a      	str	r2, [r3, #24]
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <HAL_MspInit+0x44>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	2201      	movs	r2, #1
 8000a64:	4013      	ands	r3, r2
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_MspInit+0x44>)
 8000a6c:	69da      	ldr	r2, [r3, #28]
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <HAL_MspInit+0x44>)
 8000a70:	2180      	movs	r1, #128	; 0x80
 8000a72:	0549      	lsls	r1, r1, #21
 8000a74:	430a      	orrs	r2, r1
 8000a76:	61da      	str	r2, [r3, #28]
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <HAL_MspInit+0x44>)
 8000a7a:	69da      	ldr	r2, [r3, #28]
 8000a7c:	2380      	movs	r3, #128	; 0x80
 8000a7e:	055b      	lsls	r3, r3, #21
 8000a80:	4013      	ands	r3, r2
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b002      	add	sp, #8
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	40021000 	.word	0x40021000

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <NMI_Handler+0x4>

08000a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <HardFault_Handler+0x4>

08000aa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000aa4:	46c0      	nop			; (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab8:	f000 f87a 	bl	8000bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000abc:	46c0      	nop			; (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <Reset_Handler>:
 8000acc:	480d      	ldr	r0, [pc, #52]	; (8000b04 <LoopForever+0x2>)
 8000ace:	4685      	mov	sp, r0
 8000ad0:	f7ff fff7 	bl	8000ac2 <SystemInit>
 8000ad4:	480c      	ldr	r0, [pc, #48]	; (8000b08 <LoopForever+0x6>)
 8000ad6:	490d      	ldr	r1, [pc, #52]	; (8000b0c <LoopForever+0xa>)
 8000ad8:	4a0d      	ldr	r2, [pc, #52]	; (8000b10 <LoopForever+0xe>)
 8000ada:	2300      	movs	r3, #0
 8000adc:	e002      	b.n	8000ae4 <LoopCopyDataInit>

08000ade <CopyDataInit>:
 8000ade:	58d4      	ldr	r4, [r2, r3]
 8000ae0:	50c4      	str	r4, [r0, r3]
 8000ae2:	3304      	adds	r3, #4

08000ae4 <LoopCopyDataInit>:
 8000ae4:	18c4      	adds	r4, r0, r3
 8000ae6:	428c      	cmp	r4, r1
 8000ae8:	d3f9      	bcc.n	8000ade <CopyDataInit>
 8000aea:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <LoopForever+0x12>)
 8000aec:	4c0a      	ldr	r4, [pc, #40]	; (8000b18 <LoopForever+0x16>)
 8000aee:	2300      	movs	r3, #0
 8000af0:	e001      	b.n	8000af6 <LoopFillZerobss>

08000af2 <FillZerobss>:
 8000af2:	6013      	str	r3, [r2, #0]
 8000af4:	3204      	adds	r2, #4

08000af6 <LoopFillZerobss>:
 8000af6:	42a2      	cmp	r2, r4
 8000af8:	d3fb      	bcc.n	8000af2 <FillZerobss>
 8000afa:	f000 fe27 	bl	800174c <__libc_init_array>
 8000afe:	f7ff fe45 	bl	800078c <main>

08000b02 <LoopForever>:
 8000b02:	e7fe      	b.n	8000b02 <LoopForever>
 8000b04:	20008000 	.word	0x20008000
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	2000000c 	.word	0x2000000c
 8000b10:	08001874 	.word	0x08001874
 8000b14:	2000000c 	.word	0x2000000c
 8000b18:	20000030 	.word	0x20000030

08000b1c <ADC1_COMP_IRQHandler>:
 8000b1c:	e7fe      	b.n	8000b1c <ADC1_COMP_IRQHandler>
	...

08000b20 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b24:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <HAL_Init+0x24>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_Init+0x24>)
 8000b2a:	2110      	movs	r1, #16
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b30:	2003      	movs	r0, #3
 8000b32:	f000 f809 	bl	8000b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b36:	f7ff ff89 	bl	8000a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b3a:	2300      	movs	r3, #0
}
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	40022000 	.word	0x40022000

08000b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b50:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <HAL_InitTick+0x5c>)
 8000b52:	681c      	ldr	r4, [r3, #0]
 8000b54:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <HAL_InitTick+0x60>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	0019      	movs	r1, r3
 8000b5a:	23fa      	movs	r3, #250	; 0xfa
 8000b5c:	0098      	lsls	r0, r3, #2
 8000b5e:	f7ff fad1 	bl	8000104 <__udivsi3>
 8000b62:	0003      	movs	r3, r0
 8000b64:	0019      	movs	r1, r3
 8000b66:	0020      	movs	r0, r4
 8000b68:	f7ff facc 	bl	8000104 <__udivsi3>
 8000b6c:	0003      	movs	r3, r0
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f000 f905 	bl	8000d7e <HAL_SYSTICK_Config>
 8000b74:	1e03      	subs	r3, r0, #0
 8000b76:	d001      	beq.n	8000b7c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e00f      	b.n	8000b9c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2b03      	cmp	r3, #3
 8000b80:	d80b      	bhi.n	8000b9a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	2301      	movs	r3, #1
 8000b86:	425b      	negs	r3, r3
 8000b88:	2200      	movs	r2, #0
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f000 f8e2 	bl	8000d54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_InitTick+0x64>)
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b96:	2300      	movs	r3, #0
 8000b98:	e000      	b.n	8000b9c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
}
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	b003      	add	sp, #12
 8000ba2:	bd90      	pop	{r4, r7, pc}
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	20000004 	.word	0x20000004

08000bb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <HAL_IncTick+0x1c>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	001a      	movs	r2, r3
 8000bba:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <HAL_IncTick+0x20>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	18d2      	adds	r2, r2, r3
 8000bc0:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <HAL_IncTick+0x20>)
 8000bc2:	601a      	str	r2, [r3, #0]
}
 8000bc4:	46c0      	nop			; (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	2000002c 	.word	0x2000002c

08000bd4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b02      	ldr	r3, [pc, #8]	; (8000be4 <HAL_GetTick+0x10>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	0018      	movs	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	2000002c 	.word	0x2000002c

08000be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf0:	f7ff fff0 	bl	8000bd4 <HAL_GetTick>
 8000bf4:	0003      	movs	r3, r0
 8000bf6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	d005      	beq.n	8000c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c02:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <HAL_Delay+0x44>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	001a      	movs	r2, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	189b      	adds	r3, r3, r2
 8000c0c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	f7ff ffe0 	bl	8000bd4 <HAL_GetTick>
 8000c14:	0002      	movs	r2, r0
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d8f7      	bhi.n	8000c10 <HAL_Delay+0x28>
  {
  }
}
 8000c20:	46c0      	nop			; (mov r8, r8)
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	46bd      	mov	sp, r7
 8000c26:	b004      	add	sp, #16
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	20000008 	.word	0x20000008

08000c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	0002      	movs	r2, r0
 8000c38:	6039      	str	r1, [r7, #0]
 8000c3a:	1dfb      	adds	r3, r7, #7
 8000c3c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c3e:	1dfb      	adds	r3, r7, #7
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b7f      	cmp	r3, #127	; 0x7f
 8000c44:	d828      	bhi.n	8000c98 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c46:	4a2f      	ldr	r2, [pc, #188]	; (8000d04 <__NVIC_SetPriority+0xd4>)
 8000c48:	1dfb      	adds	r3, r7, #7
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b25b      	sxtb	r3, r3
 8000c4e:	089b      	lsrs	r3, r3, #2
 8000c50:	33c0      	adds	r3, #192	; 0xc0
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	589b      	ldr	r3, [r3, r2]
 8000c56:	1dfa      	adds	r2, r7, #7
 8000c58:	7812      	ldrb	r2, [r2, #0]
 8000c5a:	0011      	movs	r1, r2
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	400a      	ands	r2, r1
 8000c60:	00d2      	lsls	r2, r2, #3
 8000c62:	21ff      	movs	r1, #255	; 0xff
 8000c64:	4091      	lsls	r1, r2
 8000c66:	000a      	movs	r2, r1
 8000c68:	43d2      	mvns	r2, r2
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	019b      	lsls	r3, r3, #6
 8000c72:	22ff      	movs	r2, #255	; 0xff
 8000c74:	401a      	ands	r2, r3
 8000c76:	1dfb      	adds	r3, r7, #7
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	4003      	ands	r3, r0
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c84:	481f      	ldr	r0, [pc, #124]	; (8000d04 <__NVIC_SetPriority+0xd4>)
 8000c86:	1dfb      	adds	r3, r7, #7
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	b25b      	sxtb	r3, r3
 8000c8c:	089b      	lsrs	r3, r3, #2
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	33c0      	adds	r3, #192	; 0xc0
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c96:	e031      	b.n	8000cfc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c98:	4a1b      	ldr	r2, [pc, #108]	; (8000d08 <__NVIC_SetPriority+0xd8>)
 8000c9a:	1dfb      	adds	r3, r7, #7
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	0019      	movs	r1, r3
 8000ca0:	230f      	movs	r3, #15
 8000ca2:	400b      	ands	r3, r1
 8000ca4:	3b08      	subs	r3, #8
 8000ca6:	089b      	lsrs	r3, r3, #2
 8000ca8:	3306      	adds	r3, #6
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	18d3      	adds	r3, r2, r3
 8000cae:	3304      	adds	r3, #4
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	1dfa      	adds	r2, r7, #7
 8000cb4:	7812      	ldrb	r2, [r2, #0]
 8000cb6:	0011      	movs	r1, r2
 8000cb8:	2203      	movs	r2, #3
 8000cba:	400a      	ands	r2, r1
 8000cbc:	00d2      	lsls	r2, r2, #3
 8000cbe:	21ff      	movs	r1, #255	; 0xff
 8000cc0:	4091      	lsls	r1, r2
 8000cc2:	000a      	movs	r2, r1
 8000cc4:	43d2      	mvns	r2, r2
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	019b      	lsls	r3, r3, #6
 8000cce:	22ff      	movs	r2, #255	; 0xff
 8000cd0:	401a      	ands	r2, r3
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	2303      	movs	r3, #3
 8000cda:	4003      	ands	r3, r0
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ce0:	4809      	ldr	r0, [pc, #36]	; (8000d08 <__NVIC_SetPriority+0xd8>)
 8000ce2:	1dfb      	adds	r3, r7, #7
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	001c      	movs	r4, r3
 8000ce8:	230f      	movs	r3, #15
 8000cea:	4023      	ands	r3, r4
 8000cec:	3b08      	subs	r3, #8
 8000cee:	089b      	lsrs	r3, r3, #2
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	3306      	adds	r3, #6
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	18c3      	adds	r3, r0, r3
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	601a      	str	r2, [r3, #0]
}
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b003      	add	sp, #12
 8000d02:	bd90      	pop	{r4, r7, pc}
 8000d04:	e000e100 	.word	0xe000e100
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	1e5a      	subs	r2, r3, #1
 8000d18:	2380      	movs	r3, #128	; 0x80
 8000d1a:	045b      	lsls	r3, r3, #17
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d301      	bcc.n	8000d24 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d20:	2301      	movs	r3, #1
 8000d22:	e010      	b.n	8000d46 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d24:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <SysTick_Config+0x44>)
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	3a01      	subs	r2, #1
 8000d2a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	425b      	negs	r3, r3
 8000d30:	2103      	movs	r1, #3
 8000d32:	0018      	movs	r0, r3
 8000d34:	f7ff ff7c 	bl	8000c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <SysTick_Config+0x44>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3e:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <SysTick_Config+0x44>)
 8000d40:	2207      	movs	r2, #7
 8000d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	0018      	movs	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	b002      	add	sp, #8
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	e000e010 	.word	0xe000e010

08000d54 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60b9      	str	r1, [r7, #8]
 8000d5c:	607a      	str	r2, [r7, #4]
 8000d5e:	210f      	movs	r1, #15
 8000d60:	187b      	adds	r3, r7, r1
 8000d62:	1c02      	adds	r2, r0, #0
 8000d64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	187b      	adds	r3, r7, r1
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b25b      	sxtb	r3, r3
 8000d6e:	0011      	movs	r1, r2
 8000d70:	0018      	movs	r0, r3
 8000d72:	f7ff ff5d 	bl	8000c30 <__NVIC_SetPriority>
}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b004      	add	sp, #16
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f7ff ffbf 	bl	8000d0c <SysTick_Config>
 8000d8e:	0003      	movs	r3, r0
}
 8000d90:	0018      	movs	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b002      	add	sp, #8
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d102      	bne.n	8000dac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	f000 fb76 	bl	8001498 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2201      	movs	r2, #1
 8000db2:	4013      	ands	r3, r2
 8000db4:	d100      	bne.n	8000db8 <HAL_RCC_OscConfig+0x20>
 8000db6:	e08e      	b.n	8000ed6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000db8:	4bc5      	ldr	r3, [pc, #788]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	220c      	movs	r2, #12
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	2b04      	cmp	r3, #4
 8000dc2:	d00e      	beq.n	8000de2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dc4:	4bc2      	ldr	r3, [pc, #776]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	220c      	movs	r2, #12
 8000dca:	4013      	ands	r3, r2
 8000dcc:	2b08      	cmp	r3, #8
 8000dce:	d117      	bne.n	8000e00 <HAL_RCC_OscConfig+0x68>
 8000dd0:	4bbf      	ldr	r3, [pc, #764]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	23c0      	movs	r3, #192	; 0xc0
 8000dd6:	025b      	lsls	r3, r3, #9
 8000dd8:	401a      	ands	r2, r3
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	025b      	lsls	r3, r3, #9
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d10e      	bne.n	8000e00 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de2:	4bbb      	ldr	r3, [pc, #748]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	2380      	movs	r3, #128	; 0x80
 8000de8:	029b      	lsls	r3, r3, #10
 8000dea:	4013      	ands	r3, r2
 8000dec:	d100      	bne.n	8000df0 <HAL_RCC_OscConfig+0x58>
 8000dee:	e071      	b.n	8000ed4 <HAL_RCC_OscConfig+0x13c>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d000      	beq.n	8000dfa <HAL_RCC_OscConfig+0x62>
 8000df8:	e06c      	b.n	8000ed4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	f000 fb4c 	bl	8001498 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d107      	bne.n	8000e18 <HAL_RCC_OscConfig+0x80>
 8000e08:	4bb1      	ldr	r3, [pc, #708]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4bb0      	ldr	r3, [pc, #704]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000e0e:	2180      	movs	r1, #128	; 0x80
 8000e10:	0249      	lsls	r1, r1, #9
 8000e12:	430a      	orrs	r2, r1
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	e02f      	b.n	8000e78 <HAL_RCC_OscConfig+0xe0>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d10c      	bne.n	8000e3a <HAL_RCC_OscConfig+0xa2>
 8000e20:	4bab      	ldr	r3, [pc, #684]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4baa      	ldr	r3, [pc, #680]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000e26:	49ab      	ldr	r1, [pc, #684]	; (80010d4 <HAL_RCC_OscConfig+0x33c>)
 8000e28:	400a      	ands	r2, r1
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	4ba8      	ldr	r3, [pc, #672]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4ba7      	ldr	r3, [pc, #668]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000e32:	49a9      	ldr	r1, [pc, #676]	; (80010d8 <HAL_RCC_OscConfig+0x340>)
 8000e34:	400a      	ands	r2, r1
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	e01e      	b.n	8000e78 <HAL_RCC_OscConfig+0xe0>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	2b05      	cmp	r3, #5
 8000e40:	d10e      	bne.n	8000e60 <HAL_RCC_OscConfig+0xc8>
 8000e42:	4ba3      	ldr	r3, [pc, #652]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	4ba2      	ldr	r3, [pc, #648]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000e48:	2180      	movs	r1, #128	; 0x80
 8000e4a:	02c9      	lsls	r1, r1, #11
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	4b9f      	ldr	r3, [pc, #636]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4b9e      	ldr	r3, [pc, #632]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000e56:	2180      	movs	r1, #128	; 0x80
 8000e58:	0249      	lsls	r1, r1, #9
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	e00b      	b.n	8000e78 <HAL_RCC_OscConfig+0xe0>
 8000e60:	4b9b      	ldr	r3, [pc, #620]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b9a      	ldr	r3, [pc, #616]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000e66:	499b      	ldr	r1, [pc, #620]	; (80010d4 <HAL_RCC_OscConfig+0x33c>)
 8000e68:	400a      	ands	r2, r1
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	4b98      	ldr	r3, [pc, #608]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b97      	ldr	r3, [pc, #604]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000e72:	4999      	ldr	r1, [pc, #612]	; (80010d8 <HAL_RCC_OscConfig+0x340>)
 8000e74:	400a      	ands	r2, r1
 8000e76:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d014      	beq.n	8000eaa <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e80:	f7ff fea8 	bl	8000bd4 <HAL_GetTick>
 8000e84:	0003      	movs	r3, r0
 8000e86:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e88:	e008      	b.n	8000e9c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e8a:	f7ff fea3 	bl	8000bd4 <HAL_GetTick>
 8000e8e:	0002      	movs	r2, r0
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	2b64      	cmp	r3, #100	; 0x64
 8000e96:	d901      	bls.n	8000e9c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e2fd      	b.n	8001498 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e9c:	4b8c      	ldr	r3, [pc, #560]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	2380      	movs	r3, #128	; 0x80
 8000ea2:	029b      	lsls	r3, r3, #10
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	d0f0      	beq.n	8000e8a <HAL_RCC_OscConfig+0xf2>
 8000ea8:	e015      	b.n	8000ed6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eaa:	f7ff fe93 	bl	8000bd4 <HAL_GetTick>
 8000eae:	0003      	movs	r3, r0
 8000eb0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eb2:	e008      	b.n	8000ec6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eb4:	f7ff fe8e 	bl	8000bd4 <HAL_GetTick>
 8000eb8:	0002      	movs	r2, r0
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	2b64      	cmp	r3, #100	; 0x64
 8000ec0:	d901      	bls.n	8000ec6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e2e8      	b.n	8001498 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ec6:	4b82      	ldr	r3, [pc, #520]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	2380      	movs	r3, #128	; 0x80
 8000ecc:	029b      	lsls	r3, r3, #10
 8000ece:	4013      	ands	r3, r2
 8000ed0:	d1f0      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x11c>
 8000ed2:	e000      	b.n	8000ed6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2202      	movs	r2, #2
 8000edc:	4013      	ands	r3, r2
 8000ede:	d100      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x14a>
 8000ee0:	e06c      	b.n	8000fbc <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ee2:	4b7b      	ldr	r3, [pc, #492]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	4013      	ands	r3, r2
 8000eea:	d00e      	beq.n	8000f0a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000eec:	4b78      	ldr	r3, [pc, #480]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	220c      	movs	r2, #12
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	2b08      	cmp	r3, #8
 8000ef6:	d11f      	bne.n	8000f38 <HAL_RCC_OscConfig+0x1a0>
 8000ef8:	4b75      	ldr	r3, [pc, #468]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	23c0      	movs	r3, #192	; 0xc0
 8000efe:	025b      	lsls	r3, r3, #9
 8000f00:	401a      	ands	r2, r3
 8000f02:	2380      	movs	r3, #128	; 0x80
 8000f04:	021b      	lsls	r3, r3, #8
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d116      	bne.n	8000f38 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f0a:	4b71      	ldr	r3, [pc, #452]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2202      	movs	r2, #2
 8000f10:	4013      	ands	r3, r2
 8000f12:	d005      	beq.n	8000f20 <HAL_RCC_OscConfig+0x188>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d001      	beq.n	8000f20 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e2bb      	b.n	8001498 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f20:	4b6b      	ldr	r3, [pc, #428]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	22f8      	movs	r2, #248	; 0xf8
 8000f26:	4393      	bics	r3, r2
 8000f28:	0019      	movs	r1, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	691b      	ldr	r3, [r3, #16]
 8000f2e:	00da      	lsls	r2, r3, #3
 8000f30:	4b67      	ldr	r3, [pc, #412]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000f32:	430a      	orrs	r2, r1
 8000f34:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f36:	e041      	b.n	8000fbc <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d024      	beq.n	8000f8a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f40:	4b63      	ldr	r3, [pc, #396]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b62      	ldr	r3, [pc, #392]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000f46:	2101      	movs	r1, #1
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4c:	f7ff fe42 	bl	8000bd4 <HAL_GetTick>
 8000f50:	0003      	movs	r3, r0
 8000f52:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f54:	e008      	b.n	8000f68 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f56:	f7ff fe3d 	bl	8000bd4 <HAL_GetTick>
 8000f5a:	0002      	movs	r2, r0
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d901      	bls.n	8000f68 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000f64:	2303      	movs	r3, #3
 8000f66:	e297      	b.n	8001498 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f68:	4b59      	ldr	r3, [pc, #356]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2202      	movs	r2, #2
 8000f6e:	4013      	ands	r3, r2
 8000f70:	d0f1      	beq.n	8000f56 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f72:	4b57      	ldr	r3, [pc, #348]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	22f8      	movs	r2, #248	; 0xf8
 8000f78:	4393      	bics	r3, r2
 8000f7a:	0019      	movs	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	691b      	ldr	r3, [r3, #16]
 8000f80:	00da      	lsls	r2, r3, #3
 8000f82:	4b53      	ldr	r3, [pc, #332]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000f84:	430a      	orrs	r2, r1
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	e018      	b.n	8000fbc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f8a:	4b51      	ldr	r3, [pc, #324]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	4b50      	ldr	r3, [pc, #320]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000f90:	2101      	movs	r1, #1
 8000f92:	438a      	bics	r2, r1
 8000f94:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f96:	f7ff fe1d 	bl	8000bd4 <HAL_GetTick>
 8000f9a:	0003      	movs	r3, r0
 8000f9c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f9e:	e008      	b.n	8000fb2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fa0:	f7ff fe18 	bl	8000bd4 <HAL_GetTick>
 8000fa4:	0002      	movs	r2, r0
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d901      	bls.n	8000fb2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e272      	b.n	8001498 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fb2:	4b47      	ldr	r3, [pc, #284]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	4013      	ands	r3, r2
 8000fba:	d1f1      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2208      	movs	r2, #8
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	d036      	beq.n	8001034 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d019      	beq.n	8001002 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fce:	4b40      	ldr	r3, [pc, #256]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000fd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fd2:	4b3f      	ldr	r3, [pc, #252]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fda:	f7ff fdfb 	bl	8000bd4 <HAL_GetTick>
 8000fde:	0003      	movs	r3, r0
 8000fe0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fe2:	e008      	b.n	8000ff6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fe4:	f7ff fdf6 	bl	8000bd4 <HAL_GetTick>
 8000fe8:	0002      	movs	r2, r0
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d901      	bls.n	8000ff6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e250      	b.n	8001498 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ff6:	4b36      	ldr	r3, [pc, #216]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8000ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	d0f1      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x24c>
 8001000:	e018      	b.n	8001034 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001002:	4b33      	ldr	r3, [pc, #204]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8001004:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001006:	4b32      	ldr	r3, [pc, #200]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8001008:	2101      	movs	r1, #1
 800100a:	438a      	bics	r2, r1
 800100c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800100e:	f7ff fde1 	bl	8000bd4 <HAL_GetTick>
 8001012:	0003      	movs	r3, r0
 8001014:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001016:	e008      	b.n	800102a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001018:	f7ff fddc 	bl	8000bd4 <HAL_GetTick>
 800101c:	0002      	movs	r2, r0
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b02      	cmp	r3, #2
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e236      	b.n	8001498 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800102a:	4b29      	ldr	r3, [pc, #164]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 800102c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102e:	2202      	movs	r2, #2
 8001030:	4013      	ands	r3, r2
 8001032:	d1f1      	bne.n	8001018 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2204      	movs	r2, #4
 800103a:	4013      	ands	r3, r2
 800103c:	d100      	bne.n	8001040 <HAL_RCC_OscConfig+0x2a8>
 800103e:	e0b5      	b.n	80011ac <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001040:	201f      	movs	r0, #31
 8001042:	183b      	adds	r3, r7, r0
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001048:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 800104a:	69da      	ldr	r2, [r3, #28]
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	055b      	lsls	r3, r3, #21
 8001050:	4013      	ands	r3, r2
 8001052:	d110      	bne.n	8001076 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001054:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8001056:	69da      	ldr	r2, [r3, #28]
 8001058:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 800105a:	2180      	movs	r1, #128	; 0x80
 800105c:	0549      	lsls	r1, r1, #21
 800105e:	430a      	orrs	r2, r1
 8001060:	61da      	str	r2, [r3, #28]
 8001062:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 8001064:	69da      	ldr	r2, [r3, #28]
 8001066:	2380      	movs	r3, #128	; 0x80
 8001068:	055b      	lsls	r3, r3, #21
 800106a:	4013      	ands	r3, r2
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001070:	183b      	adds	r3, r7, r0
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001076:	4b19      	ldr	r3, [pc, #100]	; (80010dc <HAL_RCC_OscConfig+0x344>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	2380      	movs	r3, #128	; 0x80
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4013      	ands	r3, r2
 8001080:	d11a      	bne.n	80010b8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001082:	4b16      	ldr	r3, [pc, #88]	; (80010dc <HAL_RCC_OscConfig+0x344>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <HAL_RCC_OscConfig+0x344>)
 8001088:	2180      	movs	r1, #128	; 0x80
 800108a:	0049      	lsls	r1, r1, #1
 800108c:	430a      	orrs	r2, r1
 800108e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001090:	f7ff fda0 	bl	8000bd4 <HAL_GetTick>
 8001094:	0003      	movs	r3, r0
 8001096:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001098:	e008      	b.n	80010ac <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800109a:	f7ff fd9b 	bl	8000bd4 <HAL_GetTick>
 800109e:	0002      	movs	r2, r0
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b64      	cmp	r3, #100	; 0x64
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e1f5      	b.n	8001498 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <HAL_RCC_OscConfig+0x344>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	2380      	movs	r3, #128	; 0x80
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4013      	ands	r3, r2
 80010b6:	d0f0      	beq.n	800109a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d10f      	bne.n	80010e0 <HAL_RCC_OscConfig+0x348>
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 80010c2:	6a1a      	ldr	r2, [r3, #32]
 80010c4:	4b02      	ldr	r3, [pc, #8]	; (80010d0 <HAL_RCC_OscConfig+0x338>)
 80010c6:	2101      	movs	r1, #1
 80010c8:	430a      	orrs	r2, r1
 80010ca:	621a      	str	r2, [r3, #32]
 80010cc:	e036      	b.n	800113c <HAL_RCC_OscConfig+0x3a4>
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	40021000 	.word	0x40021000
 80010d4:	fffeffff 	.word	0xfffeffff
 80010d8:	fffbffff 	.word	0xfffbffff
 80010dc:	40007000 	.word	0x40007000
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d10c      	bne.n	8001102 <HAL_RCC_OscConfig+0x36a>
 80010e8:	4bca      	ldr	r3, [pc, #808]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 80010ea:	6a1a      	ldr	r2, [r3, #32]
 80010ec:	4bc9      	ldr	r3, [pc, #804]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 80010ee:	2101      	movs	r1, #1
 80010f0:	438a      	bics	r2, r1
 80010f2:	621a      	str	r2, [r3, #32]
 80010f4:	4bc7      	ldr	r3, [pc, #796]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 80010f6:	6a1a      	ldr	r2, [r3, #32]
 80010f8:	4bc6      	ldr	r3, [pc, #792]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 80010fa:	2104      	movs	r1, #4
 80010fc:	438a      	bics	r2, r1
 80010fe:	621a      	str	r2, [r3, #32]
 8001100:	e01c      	b.n	800113c <HAL_RCC_OscConfig+0x3a4>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	2b05      	cmp	r3, #5
 8001108:	d10c      	bne.n	8001124 <HAL_RCC_OscConfig+0x38c>
 800110a:	4bc2      	ldr	r3, [pc, #776]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 800110c:	6a1a      	ldr	r2, [r3, #32]
 800110e:	4bc1      	ldr	r3, [pc, #772]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 8001110:	2104      	movs	r1, #4
 8001112:	430a      	orrs	r2, r1
 8001114:	621a      	str	r2, [r3, #32]
 8001116:	4bbf      	ldr	r3, [pc, #764]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 8001118:	6a1a      	ldr	r2, [r3, #32]
 800111a:	4bbe      	ldr	r3, [pc, #760]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 800111c:	2101      	movs	r1, #1
 800111e:	430a      	orrs	r2, r1
 8001120:	621a      	str	r2, [r3, #32]
 8001122:	e00b      	b.n	800113c <HAL_RCC_OscConfig+0x3a4>
 8001124:	4bbb      	ldr	r3, [pc, #748]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 8001126:	6a1a      	ldr	r2, [r3, #32]
 8001128:	4bba      	ldr	r3, [pc, #744]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 800112a:	2101      	movs	r1, #1
 800112c:	438a      	bics	r2, r1
 800112e:	621a      	str	r2, [r3, #32]
 8001130:	4bb8      	ldr	r3, [pc, #736]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 8001132:	6a1a      	ldr	r2, [r3, #32]
 8001134:	4bb7      	ldr	r3, [pc, #732]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 8001136:	2104      	movs	r1, #4
 8001138:	438a      	bics	r2, r1
 800113a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d014      	beq.n	800116e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001144:	f7ff fd46 	bl	8000bd4 <HAL_GetTick>
 8001148:	0003      	movs	r3, r0
 800114a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800114c:	e009      	b.n	8001162 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800114e:	f7ff fd41 	bl	8000bd4 <HAL_GetTick>
 8001152:	0002      	movs	r2, r0
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	4aaf      	ldr	r2, [pc, #700]	; (8001418 <HAL_RCC_OscConfig+0x680>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e19a      	b.n	8001498 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001162:	4bac      	ldr	r3, [pc, #688]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 8001164:	6a1b      	ldr	r3, [r3, #32]
 8001166:	2202      	movs	r2, #2
 8001168:	4013      	ands	r3, r2
 800116a:	d0f0      	beq.n	800114e <HAL_RCC_OscConfig+0x3b6>
 800116c:	e013      	b.n	8001196 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800116e:	f7ff fd31 	bl	8000bd4 <HAL_GetTick>
 8001172:	0003      	movs	r3, r0
 8001174:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001176:	e009      	b.n	800118c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001178:	f7ff fd2c 	bl	8000bd4 <HAL_GetTick>
 800117c:	0002      	movs	r2, r0
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	4aa5      	ldr	r2, [pc, #660]	; (8001418 <HAL_RCC_OscConfig+0x680>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e185      	b.n	8001498 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800118c:	4ba1      	ldr	r3, [pc, #644]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	2202      	movs	r2, #2
 8001192:	4013      	ands	r3, r2
 8001194:	d1f0      	bne.n	8001178 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001196:	231f      	movs	r3, #31
 8001198:	18fb      	adds	r3, r7, r3
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d105      	bne.n	80011ac <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011a0:	4b9c      	ldr	r3, [pc, #624]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 80011a2:	69da      	ldr	r2, [r3, #28]
 80011a4:	4b9b      	ldr	r3, [pc, #620]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 80011a6:	499d      	ldr	r1, [pc, #628]	; (800141c <HAL_RCC_OscConfig+0x684>)
 80011a8:	400a      	ands	r2, r1
 80011aa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2210      	movs	r2, #16
 80011b2:	4013      	ands	r3, r2
 80011b4:	d063      	beq.n	800127e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d12a      	bne.n	8001214 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80011be:	4b95      	ldr	r3, [pc, #596]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 80011c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011c2:	4b94      	ldr	r3, [pc, #592]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 80011c4:	2104      	movs	r1, #4
 80011c6:	430a      	orrs	r2, r1
 80011c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80011ca:	4b92      	ldr	r3, [pc, #584]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 80011cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ce:	4b91      	ldr	r3, [pc, #580]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 80011d0:	2101      	movs	r1, #1
 80011d2:	430a      	orrs	r2, r1
 80011d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d6:	f7ff fcfd 	bl	8000bd4 <HAL_GetTick>
 80011da:	0003      	movs	r3, r0
 80011dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011e0:	f7ff fcf8 	bl	8000bd4 <HAL_GetTick>
 80011e4:	0002      	movs	r2, r0
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e152      	b.n	8001498 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011f2:	4b88      	ldr	r3, [pc, #544]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 80011f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011f6:	2202      	movs	r2, #2
 80011f8:	4013      	ands	r3, r2
 80011fa:	d0f1      	beq.n	80011e0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011fc:	4b85      	ldr	r3, [pc, #532]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 80011fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001200:	22f8      	movs	r2, #248	; 0xf8
 8001202:	4393      	bics	r3, r2
 8001204:	0019      	movs	r1, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	00da      	lsls	r2, r3, #3
 800120c:	4b81      	ldr	r3, [pc, #516]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 800120e:	430a      	orrs	r2, r1
 8001210:	635a      	str	r2, [r3, #52]	; 0x34
 8001212:	e034      	b.n	800127e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	3305      	adds	r3, #5
 800121a:	d111      	bne.n	8001240 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800121c:	4b7d      	ldr	r3, [pc, #500]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 800121e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001220:	4b7c      	ldr	r3, [pc, #496]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 8001222:	2104      	movs	r1, #4
 8001224:	438a      	bics	r2, r1
 8001226:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001228:	4b7a      	ldr	r3, [pc, #488]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 800122a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800122c:	22f8      	movs	r2, #248	; 0xf8
 800122e:	4393      	bics	r3, r2
 8001230:	0019      	movs	r1, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	00da      	lsls	r2, r3, #3
 8001238:	4b76      	ldr	r3, [pc, #472]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 800123a:	430a      	orrs	r2, r1
 800123c:	635a      	str	r2, [r3, #52]	; 0x34
 800123e:	e01e      	b.n	800127e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001240:	4b74      	ldr	r3, [pc, #464]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 8001242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001244:	4b73      	ldr	r3, [pc, #460]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 8001246:	2104      	movs	r1, #4
 8001248:	430a      	orrs	r2, r1
 800124a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800124c:	4b71      	ldr	r3, [pc, #452]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 800124e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001250:	4b70      	ldr	r3, [pc, #448]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 8001252:	2101      	movs	r1, #1
 8001254:	438a      	bics	r2, r1
 8001256:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001258:	f7ff fcbc 	bl	8000bd4 <HAL_GetTick>
 800125c:	0003      	movs	r3, r0
 800125e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001260:	e008      	b.n	8001274 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001262:	f7ff fcb7 	bl	8000bd4 <HAL_GetTick>
 8001266:	0002      	movs	r2, r0
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e111      	b.n	8001498 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001274:	4b67      	ldr	r3, [pc, #412]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 8001276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001278:	2202      	movs	r2, #2
 800127a:	4013      	ands	r3, r2
 800127c:	d1f1      	bne.n	8001262 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2220      	movs	r2, #32
 8001284:	4013      	ands	r3, r2
 8001286:	d05c      	beq.n	8001342 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001288:	4b62      	ldr	r3, [pc, #392]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	220c      	movs	r2, #12
 800128e:	4013      	ands	r3, r2
 8001290:	2b0c      	cmp	r3, #12
 8001292:	d00e      	beq.n	80012b2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001294:	4b5f      	ldr	r3, [pc, #380]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	220c      	movs	r2, #12
 800129a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800129c:	2b08      	cmp	r3, #8
 800129e:	d114      	bne.n	80012ca <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80012a0:	4b5c      	ldr	r3, [pc, #368]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	23c0      	movs	r3, #192	; 0xc0
 80012a6:	025b      	lsls	r3, r3, #9
 80012a8:	401a      	ands	r2, r3
 80012aa:	23c0      	movs	r3, #192	; 0xc0
 80012ac:	025b      	lsls	r3, r3, #9
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d10b      	bne.n	80012ca <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80012b2:	4b58      	ldr	r3, [pc, #352]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 80012b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	029b      	lsls	r3, r3, #10
 80012ba:	4013      	ands	r3, r2
 80012bc:	d040      	beq.n	8001340 <HAL_RCC_OscConfig+0x5a8>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d03c      	beq.n	8001340 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e0e6      	b.n	8001498 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a1b      	ldr	r3, [r3, #32]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d01b      	beq.n	800130a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80012d2:	4b50      	ldr	r3, [pc, #320]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 80012d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012d6:	4b4f      	ldr	r3, [pc, #316]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 80012d8:	2180      	movs	r1, #128	; 0x80
 80012da:	0249      	lsls	r1, r1, #9
 80012dc:	430a      	orrs	r2, r1
 80012de:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e0:	f7ff fc78 	bl	8000bd4 <HAL_GetTick>
 80012e4:	0003      	movs	r3, r0
 80012e6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012ea:	f7ff fc73 	bl	8000bd4 <HAL_GetTick>
 80012ee:	0002      	movs	r2, r0
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e0cd      	b.n	8001498 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80012fc:	4b45      	ldr	r3, [pc, #276]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 80012fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	029b      	lsls	r3, r3, #10
 8001304:	4013      	ands	r3, r2
 8001306:	d0f0      	beq.n	80012ea <HAL_RCC_OscConfig+0x552>
 8001308:	e01b      	b.n	8001342 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800130a:	4b42      	ldr	r3, [pc, #264]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 800130c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800130e:	4b41      	ldr	r3, [pc, #260]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 8001310:	4943      	ldr	r1, [pc, #268]	; (8001420 <HAL_RCC_OscConfig+0x688>)
 8001312:	400a      	ands	r2, r1
 8001314:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001316:	f7ff fc5d 	bl	8000bd4 <HAL_GetTick>
 800131a:	0003      	movs	r3, r0
 800131c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001320:	f7ff fc58 	bl	8000bd4 <HAL_GetTick>
 8001324:	0002      	movs	r2, r0
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e0b2      	b.n	8001498 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001332:	4b38      	ldr	r3, [pc, #224]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 8001334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	029b      	lsls	r3, r3, #10
 800133a:	4013      	ands	r3, r2
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0x588>
 800133e:	e000      	b.n	8001342 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001340:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001346:	2b00      	cmp	r3, #0
 8001348:	d100      	bne.n	800134c <HAL_RCC_OscConfig+0x5b4>
 800134a:	e0a4      	b.n	8001496 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800134c:	4b31      	ldr	r3, [pc, #196]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	220c      	movs	r2, #12
 8001352:	4013      	ands	r3, r2
 8001354:	2b08      	cmp	r3, #8
 8001356:	d100      	bne.n	800135a <HAL_RCC_OscConfig+0x5c2>
 8001358:	e078      	b.n	800144c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135e:	2b02      	cmp	r3, #2
 8001360:	d14c      	bne.n	80013fc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001362:	4b2c      	ldr	r3, [pc, #176]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	4b2b      	ldr	r3, [pc, #172]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 8001368:	492e      	ldr	r1, [pc, #184]	; (8001424 <HAL_RCC_OscConfig+0x68c>)
 800136a:	400a      	ands	r2, r1
 800136c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136e:	f7ff fc31 	bl	8000bd4 <HAL_GetTick>
 8001372:	0003      	movs	r3, r0
 8001374:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001378:	f7ff fc2c 	bl	8000bd4 <HAL_GetTick>
 800137c:	0002      	movs	r2, r0
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e086      	b.n	8001498 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800138a:	4b22      	ldr	r3, [pc, #136]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	2380      	movs	r3, #128	; 0x80
 8001390:	049b      	lsls	r3, r3, #18
 8001392:	4013      	ands	r3, r2
 8001394:	d1f0      	bne.n	8001378 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001396:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 8001398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139a:	220f      	movs	r2, #15
 800139c:	4393      	bics	r3, r2
 800139e:	0019      	movs	r1, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 80013a6:	430a      	orrs	r2, r1
 80013a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80013aa:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	4a1e      	ldr	r2, [pc, #120]	; (8001428 <HAL_RCC_OscConfig+0x690>)
 80013b0:	4013      	ands	r3, r2
 80013b2:	0019      	movs	r1, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013bc:	431a      	orrs	r2, r3
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 80013c0:	430a      	orrs	r2, r1
 80013c2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013c4:	4b13      	ldr	r3, [pc, #76]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 80013ca:	2180      	movs	r1, #128	; 0x80
 80013cc:	0449      	lsls	r1, r1, #17
 80013ce:	430a      	orrs	r2, r1
 80013d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d2:	f7ff fbff 	bl	8000bd4 <HAL_GetTick>
 80013d6:	0003      	movs	r3, r0
 80013d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013dc:	f7ff fbfa 	bl	8000bd4 <HAL_GetTick>
 80013e0:	0002      	movs	r2, r0
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e054      	b.n	8001498 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	2380      	movs	r3, #128	; 0x80
 80013f4:	049b      	lsls	r3, r3, #18
 80013f6:	4013      	ands	r3, r2
 80013f8:	d0f0      	beq.n	80013dc <HAL_RCC_OscConfig+0x644>
 80013fa:	e04c      	b.n	8001496 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b04      	ldr	r3, [pc, #16]	; (8001414 <HAL_RCC_OscConfig+0x67c>)
 8001402:	4908      	ldr	r1, [pc, #32]	; (8001424 <HAL_RCC_OscConfig+0x68c>)
 8001404:	400a      	ands	r2, r1
 8001406:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001408:	f7ff fbe4 	bl	8000bd4 <HAL_GetTick>
 800140c:	0003      	movs	r3, r0
 800140e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001410:	e015      	b.n	800143e <HAL_RCC_OscConfig+0x6a6>
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	40021000 	.word	0x40021000
 8001418:	00001388 	.word	0x00001388
 800141c:	efffffff 	.word	0xefffffff
 8001420:	fffeffff 	.word	0xfffeffff
 8001424:	feffffff 	.word	0xfeffffff
 8001428:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800142c:	f7ff fbd2 	bl	8000bd4 <HAL_GetTick>
 8001430:	0002      	movs	r2, r0
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e02c      	b.n	8001498 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <HAL_RCC_OscConfig+0x708>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	2380      	movs	r3, #128	; 0x80
 8001444:	049b      	lsls	r3, r3, #18
 8001446:	4013      	ands	r3, r2
 8001448:	d1f0      	bne.n	800142c <HAL_RCC_OscConfig+0x694>
 800144a:	e024      	b.n	8001496 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001450:	2b01      	cmp	r3, #1
 8001452:	d101      	bne.n	8001458 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e01f      	b.n	8001498 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <HAL_RCC_OscConfig+0x708>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <HAL_RCC_OscConfig+0x708>)
 8001460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001462:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	23c0      	movs	r3, #192	; 0xc0
 8001468:	025b      	lsls	r3, r3, #9
 800146a:	401a      	ands	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001470:	429a      	cmp	r2, r3
 8001472:	d10e      	bne.n	8001492 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	220f      	movs	r2, #15
 8001478:	401a      	ands	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800147e:	429a      	cmp	r2, r3
 8001480:	d107      	bne.n	8001492 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	23f0      	movs	r3, #240	; 0xf0
 8001486:	039b      	lsls	r3, r3, #14
 8001488:	401a      	ands	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800148e:	429a      	cmp	r2, r3
 8001490:	d001      	beq.n	8001496 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e000      	b.n	8001498 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	0018      	movs	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	b008      	add	sp, #32
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40021000 	.word	0x40021000

080014a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e0bf      	b.n	8001638 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014b8:	4b61      	ldr	r3, [pc, #388]	; (8001640 <HAL_RCC_ClockConfig+0x19c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2201      	movs	r2, #1
 80014be:	4013      	ands	r3, r2
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d911      	bls.n	80014ea <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c6:	4b5e      	ldr	r3, [pc, #376]	; (8001640 <HAL_RCC_ClockConfig+0x19c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2201      	movs	r2, #1
 80014cc:	4393      	bics	r3, r2
 80014ce:	0019      	movs	r1, r3
 80014d0:	4b5b      	ldr	r3, [pc, #364]	; (8001640 <HAL_RCC_ClockConfig+0x19c>)
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	430a      	orrs	r2, r1
 80014d6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d8:	4b59      	ldr	r3, [pc, #356]	; (8001640 <HAL_RCC_ClockConfig+0x19c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2201      	movs	r2, #1
 80014de:	4013      	ands	r3, r2
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d001      	beq.n	80014ea <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e0a6      	b.n	8001638 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2202      	movs	r2, #2
 80014f0:	4013      	ands	r3, r2
 80014f2:	d015      	beq.n	8001520 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2204      	movs	r2, #4
 80014fa:	4013      	ands	r3, r2
 80014fc:	d006      	beq.n	800150c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80014fe:	4b51      	ldr	r3, [pc, #324]	; (8001644 <HAL_RCC_ClockConfig+0x1a0>)
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	4b50      	ldr	r3, [pc, #320]	; (8001644 <HAL_RCC_ClockConfig+0x1a0>)
 8001504:	21e0      	movs	r1, #224	; 0xe0
 8001506:	00c9      	lsls	r1, r1, #3
 8001508:	430a      	orrs	r2, r1
 800150a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800150c:	4b4d      	ldr	r3, [pc, #308]	; (8001644 <HAL_RCC_ClockConfig+0x1a0>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	22f0      	movs	r2, #240	; 0xf0
 8001512:	4393      	bics	r3, r2
 8001514:	0019      	movs	r1, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	4b4a      	ldr	r3, [pc, #296]	; (8001644 <HAL_RCC_ClockConfig+0x1a0>)
 800151c:	430a      	orrs	r2, r1
 800151e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2201      	movs	r2, #1
 8001526:	4013      	ands	r3, r2
 8001528:	d04c      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d107      	bne.n	8001542 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001532:	4b44      	ldr	r3, [pc, #272]	; (8001644 <HAL_RCC_ClockConfig+0x1a0>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	2380      	movs	r3, #128	; 0x80
 8001538:	029b      	lsls	r3, r3, #10
 800153a:	4013      	ands	r3, r2
 800153c:	d120      	bne.n	8001580 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e07a      	b.n	8001638 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b02      	cmp	r3, #2
 8001548:	d107      	bne.n	800155a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154a:	4b3e      	ldr	r3, [pc, #248]	; (8001644 <HAL_RCC_ClockConfig+0x1a0>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	2380      	movs	r3, #128	; 0x80
 8001550:	049b      	lsls	r3, r3, #18
 8001552:	4013      	ands	r3, r2
 8001554:	d114      	bne.n	8001580 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e06e      	b.n	8001638 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b03      	cmp	r3, #3
 8001560:	d107      	bne.n	8001572 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001562:	4b38      	ldr	r3, [pc, #224]	; (8001644 <HAL_RCC_ClockConfig+0x1a0>)
 8001564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001566:	2380      	movs	r3, #128	; 0x80
 8001568:	029b      	lsls	r3, r3, #10
 800156a:	4013      	ands	r3, r2
 800156c:	d108      	bne.n	8001580 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e062      	b.n	8001638 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001572:	4b34      	ldr	r3, [pc, #208]	; (8001644 <HAL_RCC_ClockConfig+0x1a0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2202      	movs	r2, #2
 8001578:	4013      	ands	r3, r2
 800157a:	d101      	bne.n	8001580 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e05b      	b.n	8001638 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001580:	4b30      	ldr	r3, [pc, #192]	; (8001644 <HAL_RCC_ClockConfig+0x1a0>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2203      	movs	r2, #3
 8001586:	4393      	bics	r3, r2
 8001588:	0019      	movs	r1, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	4b2d      	ldr	r3, [pc, #180]	; (8001644 <HAL_RCC_ClockConfig+0x1a0>)
 8001590:	430a      	orrs	r2, r1
 8001592:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001594:	f7ff fb1e 	bl	8000bd4 <HAL_GetTick>
 8001598:	0003      	movs	r3, r0
 800159a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800159c:	e009      	b.n	80015b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800159e:	f7ff fb19 	bl	8000bd4 <HAL_GetTick>
 80015a2:	0002      	movs	r2, r0
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	4a27      	ldr	r2, [pc, #156]	; (8001648 <HAL_RCC_ClockConfig+0x1a4>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e042      	b.n	8001638 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015b2:	4b24      	ldr	r3, [pc, #144]	; (8001644 <HAL_RCC_ClockConfig+0x1a0>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	220c      	movs	r2, #12
 80015b8:	401a      	ands	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d1ec      	bne.n	800159e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015c4:	4b1e      	ldr	r3, [pc, #120]	; (8001640 <HAL_RCC_ClockConfig+0x19c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2201      	movs	r2, #1
 80015ca:	4013      	ands	r3, r2
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d211      	bcs.n	80015f6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d2:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <HAL_RCC_ClockConfig+0x19c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2201      	movs	r2, #1
 80015d8:	4393      	bics	r3, r2
 80015da:	0019      	movs	r1, r3
 80015dc:	4b18      	ldr	r3, [pc, #96]	; (8001640 <HAL_RCC_ClockConfig+0x19c>)
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e4:	4b16      	ldr	r3, [pc, #88]	; (8001640 <HAL_RCC_ClockConfig+0x19c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2201      	movs	r2, #1
 80015ea:	4013      	ands	r3, r2
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d001      	beq.n	80015f6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e020      	b.n	8001638 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2204      	movs	r2, #4
 80015fc:	4013      	ands	r3, r2
 80015fe:	d009      	beq.n	8001614 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001600:	4b10      	ldr	r3, [pc, #64]	; (8001644 <HAL_RCC_ClockConfig+0x1a0>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	4a11      	ldr	r2, [pc, #68]	; (800164c <HAL_RCC_ClockConfig+0x1a8>)
 8001606:	4013      	ands	r3, r2
 8001608:	0019      	movs	r1, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68da      	ldr	r2, [r3, #12]
 800160e:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <HAL_RCC_ClockConfig+0x1a0>)
 8001610:	430a      	orrs	r2, r1
 8001612:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001614:	f000 f820 	bl	8001658 <HAL_RCC_GetSysClockFreq>
 8001618:	0001      	movs	r1, r0
 800161a:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <HAL_RCC_ClockConfig+0x1a0>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	091b      	lsrs	r3, r3, #4
 8001620:	220f      	movs	r2, #15
 8001622:	4013      	ands	r3, r2
 8001624:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <HAL_RCC_ClockConfig+0x1ac>)
 8001626:	5cd3      	ldrb	r3, [r2, r3]
 8001628:	000a      	movs	r2, r1
 800162a:	40da      	lsrs	r2, r3
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <HAL_RCC_ClockConfig+0x1b0>)
 800162e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001630:	2003      	movs	r0, #3
 8001632:	f7ff fa89 	bl	8000b48 <HAL_InitTick>
  
  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	0018      	movs	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	b004      	add	sp, #16
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40022000 	.word	0x40022000
 8001644:	40021000 	.word	0x40021000
 8001648:	00001388 	.word	0x00001388
 800164c:	fffff8ff 	.word	0xfffff8ff
 8001650:	0800183c 	.word	0x0800183c
 8001654:	20000000 	.word	0x20000000

08001658 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001672:	4b2d      	ldr	r3, [pc, #180]	; (8001728 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	220c      	movs	r2, #12
 800167c:	4013      	ands	r3, r2
 800167e:	2b0c      	cmp	r3, #12
 8001680:	d046      	beq.n	8001710 <HAL_RCC_GetSysClockFreq+0xb8>
 8001682:	d848      	bhi.n	8001716 <HAL_RCC_GetSysClockFreq+0xbe>
 8001684:	2b04      	cmp	r3, #4
 8001686:	d002      	beq.n	800168e <HAL_RCC_GetSysClockFreq+0x36>
 8001688:	2b08      	cmp	r3, #8
 800168a:	d003      	beq.n	8001694 <HAL_RCC_GetSysClockFreq+0x3c>
 800168c:	e043      	b.n	8001716 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800168e:	4b27      	ldr	r3, [pc, #156]	; (800172c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001690:	613b      	str	r3, [r7, #16]
      break;
 8001692:	e043      	b.n	800171c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	0c9b      	lsrs	r3, r3, #18
 8001698:	220f      	movs	r2, #15
 800169a:	4013      	ands	r3, r2
 800169c:	4a24      	ldr	r2, [pc, #144]	; (8001730 <HAL_RCC_GetSysClockFreq+0xd8>)
 800169e:	5cd3      	ldrb	r3, [r2, r3]
 80016a0:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80016a2:	4b21      	ldr	r3, [pc, #132]	; (8001728 <HAL_RCC_GetSysClockFreq+0xd0>)
 80016a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a6:	220f      	movs	r2, #15
 80016a8:	4013      	ands	r3, r2
 80016aa:	4a22      	ldr	r2, [pc, #136]	; (8001734 <HAL_RCC_GetSysClockFreq+0xdc>)
 80016ac:	5cd3      	ldrb	r3, [r2, r3]
 80016ae:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	23c0      	movs	r3, #192	; 0xc0
 80016b4:	025b      	lsls	r3, r3, #9
 80016b6:	401a      	ands	r2, r3
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	025b      	lsls	r3, r3, #9
 80016bc:	429a      	cmp	r2, r3
 80016be:	d109      	bne.n	80016d4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	481a      	ldr	r0, [pc, #104]	; (800172c <HAL_RCC_GetSysClockFreq+0xd4>)
 80016c4:	f7fe fd1e 	bl	8000104 <__udivsi3>
 80016c8:	0003      	movs	r3, r0
 80016ca:	001a      	movs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4353      	muls	r3, r2
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	e01a      	b.n	800170a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80016d4:	68fa      	ldr	r2, [r7, #12]
 80016d6:	23c0      	movs	r3, #192	; 0xc0
 80016d8:	025b      	lsls	r3, r3, #9
 80016da:	401a      	ands	r2, r3
 80016dc:	23c0      	movs	r3, #192	; 0xc0
 80016de:	025b      	lsls	r3, r3, #9
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d109      	bne.n	80016f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	4814      	ldr	r0, [pc, #80]	; (8001738 <HAL_RCC_GetSysClockFreq+0xe0>)
 80016e8:	f7fe fd0c 	bl	8000104 <__udivsi3>
 80016ec:	0003      	movs	r3, r0
 80016ee:	001a      	movs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4353      	muls	r3, r2
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	e008      	b.n	800170a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80016f8:	68b9      	ldr	r1, [r7, #8]
 80016fa:	480c      	ldr	r0, [pc, #48]	; (800172c <HAL_RCC_GetSysClockFreq+0xd4>)
 80016fc:	f7fe fd02 	bl	8000104 <__udivsi3>
 8001700:	0003      	movs	r3, r0
 8001702:	001a      	movs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4353      	muls	r3, r2
 8001708:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	613b      	str	r3, [r7, #16]
      break;
 800170e:	e005      	b.n	800171c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001710:	4b09      	ldr	r3, [pc, #36]	; (8001738 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001712:	613b      	str	r3, [r7, #16]
      break;
 8001714:	e002      	b.n	800171c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001716:	4b05      	ldr	r3, [pc, #20]	; (800172c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001718:	613b      	str	r3, [r7, #16]
      break;
 800171a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800171c:	693b      	ldr	r3, [r7, #16]
}
 800171e:	0018      	movs	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	b006      	add	sp, #24
 8001724:	bd80      	pop	{r7, pc}
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	40021000 	.word	0x40021000
 800172c:	007a1200 	.word	0x007a1200
 8001730:	0800184c 	.word	0x0800184c
 8001734:	0800185c 	.word	0x0800185c
 8001738:	02dc6c00 	.word	0x02dc6c00

0800173c <memset>:
 800173c:	0003      	movs	r3, r0
 800173e:	1882      	adds	r2, r0, r2
 8001740:	4293      	cmp	r3, r2
 8001742:	d100      	bne.n	8001746 <memset+0xa>
 8001744:	4770      	bx	lr
 8001746:	7019      	strb	r1, [r3, #0]
 8001748:	3301      	adds	r3, #1
 800174a:	e7f9      	b.n	8001740 <memset+0x4>

0800174c <__libc_init_array>:
 800174c:	b570      	push	{r4, r5, r6, lr}
 800174e:	2600      	movs	r6, #0
 8001750:	4c0c      	ldr	r4, [pc, #48]	; (8001784 <__libc_init_array+0x38>)
 8001752:	4d0d      	ldr	r5, [pc, #52]	; (8001788 <__libc_init_array+0x3c>)
 8001754:	1b64      	subs	r4, r4, r5
 8001756:	10a4      	asrs	r4, r4, #2
 8001758:	42a6      	cmp	r6, r4
 800175a:	d109      	bne.n	8001770 <__libc_init_array+0x24>
 800175c:	2600      	movs	r6, #0
 800175e:	f000 f819 	bl	8001794 <_init>
 8001762:	4c0a      	ldr	r4, [pc, #40]	; (800178c <__libc_init_array+0x40>)
 8001764:	4d0a      	ldr	r5, [pc, #40]	; (8001790 <__libc_init_array+0x44>)
 8001766:	1b64      	subs	r4, r4, r5
 8001768:	10a4      	asrs	r4, r4, #2
 800176a:	42a6      	cmp	r6, r4
 800176c:	d105      	bne.n	800177a <__libc_init_array+0x2e>
 800176e:	bd70      	pop	{r4, r5, r6, pc}
 8001770:	00b3      	lsls	r3, r6, #2
 8001772:	58eb      	ldr	r3, [r5, r3]
 8001774:	4798      	blx	r3
 8001776:	3601      	adds	r6, #1
 8001778:	e7ee      	b.n	8001758 <__libc_init_array+0xc>
 800177a:	00b3      	lsls	r3, r6, #2
 800177c:	58eb      	ldr	r3, [r5, r3]
 800177e:	4798      	blx	r3
 8001780:	3601      	adds	r6, #1
 8001782:	e7f2      	b.n	800176a <__libc_init_array+0x1e>
 8001784:	0800186c 	.word	0x0800186c
 8001788:	0800186c 	.word	0x0800186c
 800178c:	08001870 	.word	0x08001870
 8001790:	0800186c 	.word	0x0800186c

08001794 <_init>:
 8001794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800179a:	bc08      	pop	{r3}
 800179c:	469e      	mov	lr, r3
 800179e:	4770      	bx	lr

080017a0 <_fini>:
 80017a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017a6:	bc08      	pop	{r3}
 80017a8:	469e      	mov	lr, r3
 80017aa:	4770      	bx	lr
