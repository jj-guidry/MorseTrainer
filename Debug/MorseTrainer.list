
MorseTrainer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002044  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08002100  08002100  00012100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021fc  080021fc  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080021fc  080021fc  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021fc  080021fc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021fc  080021fc  000121fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002200  08002200  00012200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  08002260  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08002260  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003036  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001040  00000000  00000000  000230fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003c8  00000000  00000000  00024140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002a8  00000000  00000000  00024508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a5e1  00000000  00000000  000247b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000624b  00000000  00000000  0003ed91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009afe5  00000000  00000000  00044fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000fc4  00000000  00000000  000dffc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000e0f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080020e8 	.word	0x080020e8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	080020e8 	.word	0x080020e8

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <init_buzzer_pwm>:
#include <stdio.h>
#include "init.h"
#include "main.h"

// tim3 used for PWM for buzzer
void init_buzzer_pwm(){
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN; // en tim3 clock
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <init_buzzer_pwm+0x64>)
 8000236:	69da      	ldr	r2, [r3, #28]
 8000238:	4b16      	ldr	r3, [pc, #88]	; (8000294 <init_buzzer_pwm+0x64>)
 800023a:	2102      	movs	r1, #2
 800023c:	430a      	orrs	r2, r1
 800023e:	61da      	str	r2, [r3, #28]
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // en GPIOC clock
 8000240:	4b14      	ldr	r3, [pc, #80]	; (8000294 <init_buzzer_pwm+0x64>)
 8000242:	695a      	ldr	r2, [r3, #20]
 8000244:	4b13      	ldr	r3, [pc, #76]	; (8000294 <init_buzzer_pwm+0x64>)
 8000246:	2180      	movs	r1, #128	; 0x80
 8000248:	0309      	lsls	r1, r1, #12
 800024a:	430a      	orrs	r2, r1
 800024c:	615a      	str	r2, [r3, #20]
	GPIOC->MODER |= GPIO_MODER_MODER6_1; // led on PC6 to AF
 800024e:	4b12      	ldr	r3, [pc, #72]	; (8000298 <init_buzzer_pwm+0x68>)
 8000250:	681a      	ldr	r2, [r3, #0]
 8000252:	4b11      	ldr	r3, [pc, #68]	; (8000298 <init_buzzer_pwm+0x68>)
 8000254:	2180      	movs	r1, #128	; 0x80
 8000256:	0189      	lsls	r1, r1, #6
 8000258:	430a      	orrs	r2, r1
 800025a:	601a      	str	r2, [r3, #0]
	TIM3->PSC = 480-1;
 800025c:	4b0f      	ldr	r3, [pc, #60]	; (800029c <init_buzzer_pwm+0x6c>)
 800025e:	22e0      	movs	r2, #224	; 0xe0
 8000260:	32ff      	adds	r2, #255	; 0xff
 8000262:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 156-1; // 1hz pwm signal
 8000264:	4b0d      	ldr	r3, [pc, #52]	; (800029c <init_buzzer_pwm+0x6c>)
 8000266:	229b      	movs	r2, #155	; 0x9b
 8000268:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1; // interrupt when CNT == CCR1
 800026a:	4b0c      	ldr	r3, [pc, #48]	; (800029c <init_buzzer_pwm+0x6c>)
 800026c:	699a      	ldr	r2, [r3, #24]
 800026e:	4b0b      	ldr	r3, [pc, #44]	; (800029c <init_buzzer_pwm+0x6c>)
 8000270:	2160      	movs	r1, #96	; 0x60
 8000272:	430a      	orrs	r2, r1
 8000274:	619a      	str	r2, [r3, #24]
	TIM3->CCR1 = 8; // pwm goes low @ cnt == 8
 8000276:	4b09      	ldr	r3, [pc, #36]	; (800029c <init_buzzer_pwm+0x6c>)
 8000278:	2208      	movs	r2, #8
 800027a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CNT = 9; // start pwm line low
 800027c:	4b07      	ldr	r3, [pc, #28]	; (800029c <init_buzzer_pwm+0x6c>)
 800027e:	2209      	movs	r2, #9
 8000280:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CCER |= TIM_CCER_CC1E; // enable channel 1
 8000282:	4b06      	ldr	r3, [pc, #24]	; (800029c <init_buzzer_pwm+0x6c>)
 8000284:	6a1a      	ldr	r2, [r3, #32]
 8000286:	4b05      	ldr	r3, [pc, #20]	; (800029c <init_buzzer_pwm+0x6c>)
 8000288:	2101      	movs	r1, #1
 800028a:	430a      	orrs	r2, r1
 800028c:	621a      	str	r2, [r3, #32]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40021000 	.word	0x40021000
 8000298:	48000800 	.word	0x48000800
 800029c:	40000400 	.word	0x40000400

080002a0 <init_timers_gpio>:



// input button and associated timers
void init_timers_gpio(){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN; // gpioa en clock for input button
 80002a4:	4b4e      	ldr	r3, [pc, #312]	; (80003e0 <init_timers_gpio+0x140>)
 80002a6:	695a      	ldr	r2, [r3, #20]
 80002a8:	4b4d      	ldr	r3, [pc, #308]	; (80003e0 <init_timers_gpio+0x140>)
 80002aa:	2180      	movs	r1, #128	; 0x80
 80002ac:	0289      	lsls	r1, r1, #10
 80002ae:	430a      	orrs	r2, r1
 80002b0:	615a      	str	r2, [r3, #20]
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // gpioc en clock for output led
 80002b2:	4b4b      	ldr	r3, [pc, #300]	; (80003e0 <init_timers_gpio+0x140>)
 80002b4:	695a      	ldr	r2, [r3, #20]
 80002b6:	4b4a      	ldr	r3, [pc, #296]	; (80003e0 <init_timers_gpio+0x140>)
 80002b8:	2180      	movs	r1, #128	; 0x80
 80002ba:	0309      	lsls	r1, r1, #12
 80002bc:	430a      	orrs	r2, r1
 80002be:	615a      	str	r2, [r3, #20]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // syscfg en clock
 80002c0:	4b47      	ldr	r3, [pc, #284]	; (80003e0 <init_timers_gpio+0x140>)
 80002c2:	699a      	ldr	r2, [r3, #24]
 80002c4:	4b46      	ldr	r3, [pc, #280]	; (80003e0 <init_timers_gpio+0x140>)
 80002c6:	2101      	movs	r1, #1
 80002c8:	430a      	orrs	r2, r1
 80002ca:	619a      	str	r2, [r3, #24]

	GPIOA->MODER &= ~(GPIO_MODER_MODER1); // pa1 for input
 80002cc:	2390      	movs	r3, #144	; 0x90
 80002ce:	05db      	lsls	r3, r3, #23
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	2390      	movs	r3, #144	; 0x90
 80002d4:	05db      	lsls	r3, r3, #23
 80002d6:	210c      	movs	r1, #12
 80002d8:	438a      	bics	r2, r1
 80002da:	601a      	str	r2, [r3, #0]
	GPIOA->PUPDR |= GPIO_PUPDR_PUPDR1_1; // pa1 pull down resistor
 80002dc:	2390      	movs	r3, #144	; 0x90
 80002de:	05db      	lsls	r3, r3, #23
 80002e0:	68da      	ldr	r2, [r3, #12]
 80002e2:	2390      	movs	r3, #144	; 0x90
 80002e4:	05db      	lsls	r3, r3, #23
 80002e6:	2108      	movs	r1, #8
 80002e8:	430a      	orrs	r2, r1
 80002ea:	60da      	str	r2, [r3, #12]

	// pc7 as output
	GPIOC->MODER |= GPIO_MODER_MODER7_0;
 80002ec:	4b3d      	ldr	r3, [pc, #244]	; (80003e4 <init_timers_gpio+0x144>)
 80002ee:	681a      	ldr	r2, [r3, #0]
 80002f0:	4b3c      	ldr	r3, [pc, #240]	; (80003e4 <init_timers_gpio+0x144>)
 80002f2:	2180      	movs	r1, #128	; 0x80
 80002f4:	01c9      	lsls	r1, r1, #7
 80002f6:	430a      	orrs	r2, r1
 80002f8:	601a      	str	r2, [r3, #0]
	GPIOC->MODER &= ~(GPIO_MODER_MODER7_1);
 80002fa:	4b3a      	ldr	r3, [pc, #232]	; (80003e4 <init_timers_gpio+0x144>)
 80002fc:	681a      	ldr	r2, [r3, #0]
 80002fe:	4b39      	ldr	r3, [pc, #228]	; (80003e4 <init_timers_gpio+0x144>)
 8000300:	4939      	ldr	r1, [pc, #228]	; (80003e8 <init_timers_gpio+0x148>)
 8000302:	400a      	ands	r2, r1
 8000304:	601a      	str	r2, [r3, #0]


	// config interrupt on pa0
	SYSCFG->EXTICR[0] &= ~(0xf<<4); // clear bottom 4 bits to set interrupt on pa1
 8000306:	4b39      	ldr	r3, [pc, #228]	; (80003ec <init_timers_gpio+0x14c>)
 8000308:	689a      	ldr	r2, [r3, #8]
 800030a:	4b38      	ldr	r3, [pc, #224]	; (80003ec <init_timers_gpio+0x14c>)
 800030c:	21f0      	movs	r1, #240	; 0xf0
 800030e:	438a      	bics	r2, r1
 8000310:	609a      	str	r2, [r3, #8]
	// call ISR for both rising and falling edge
	EXTI->RTSR |= EXTI_RTSR_RT1;
 8000312:	4b37      	ldr	r3, [pc, #220]	; (80003f0 <init_timers_gpio+0x150>)
 8000314:	689a      	ldr	r2, [r3, #8]
 8000316:	4b36      	ldr	r3, [pc, #216]	; (80003f0 <init_timers_gpio+0x150>)
 8000318:	2102      	movs	r1, #2
 800031a:	430a      	orrs	r2, r1
 800031c:	609a      	str	r2, [r3, #8]
	EXTI->FTSR |= EXTI_FTSR_FT1;
 800031e:	4b34      	ldr	r3, [pc, #208]	; (80003f0 <init_timers_gpio+0x150>)
 8000320:	68da      	ldr	r2, [r3, #12]
 8000322:	4b33      	ldr	r3, [pc, #204]	; (80003f0 <init_timers_gpio+0x150>)
 8000324:	2102      	movs	r1, #2
 8000326:	430a      	orrs	r2, r1
 8000328:	60da      	str	r2, [r3, #12]
	// unmask the interrupt on pin 1
	EXTI->IMR |= EXTI_IMR_IM1;
 800032a:	4b31      	ldr	r3, [pc, #196]	; (80003f0 <init_timers_gpio+0x150>)
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	4b30      	ldr	r3, [pc, #192]	; (80003f0 <init_timers_gpio+0x150>)
 8000330:	2102      	movs	r1, #2
 8000332:	430a      	orrs	r2, r1
 8000334:	601a      	str	r2, [r3, #0]

    NVIC->ISER[0] = 1<<EXTI0_1_IRQn;
 8000336:	4b2f      	ldr	r3, [pc, #188]	; (80003f4 <init_timers_gpio+0x154>)
 8000338:	2220      	movs	r2, #32
 800033a:	601a      	str	r2, [r3, #0]

    // setup timers
    // TIM6 counts duration of press
    RCC->APB1ENR |= RCC_APB1ENR_TIM6EN; // en clock for tim6
 800033c:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <init_timers_gpio+0x140>)
 800033e:	69da      	ldr	r2, [r3, #28]
 8000340:	4b27      	ldr	r3, [pc, #156]	; (80003e0 <init_timers_gpio+0x140>)
 8000342:	2110      	movs	r1, #16
 8000344:	430a      	orrs	r2, r1
 8000346:	61da      	str	r2, [r3, #28]
    TIM6->PSC = 48000-1;
 8000348:	4b2b      	ldr	r3, [pc, #172]	; (80003f8 <init_timers_gpio+0x158>)
 800034a:	4a2c      	ldr	r2, [pc, #176]	; (80003fc <init_timers_gpio+0x15c>)
 800034c:	629a      	str	r2, [r3, #40]	; 0x28
    TIM6->ARR = 400-1;
 800034e:	4b2a      	ldr	r3, [pc, #168]	; (80003f8 <init_timers_gpio+0x158>)
 8000350:	2290      	movs	r2, #144	; 0x90
 8000352:	32ff      	adds	r2, #255	; 0xff
 8000354:	62da      	str	r2, [r3, #44]	; 0x2c

    TIM6->EGR |= TIM_EGR_UG; // force an update to init the PSC shadow register
 8000356:	4b28      	ldr	r3, [pc, #160]	; (80003f8 <init_timers_gpio+0x158>)
 8000358:	695a      	ldr	r2, [r3, #20]
 800035a:	4b27      	ldr	r3, [pc, #156]	; (80003f8 <init_timers_gpio+0x158>)
 800035c:	2101      	movs	r1, #1
 800035e:	430a      	orrs	r2, r1
 8000360:	615a      	str	r2, [r3, #20]

    // TIM2 counts duration between presses
    // 2 interrupts: one at 3 time units (cnt == 3000) to end the character and another at 7 to add a space and pause the whole thing
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000362:	4b1f      	ldr	r3, [pc, #124]	; (80003e0 <init_timers_gpio+0x140>)
 8000364:	69da      	ldr	r2, [r3, #28]
 8000366:	4b1e      	ldr	r3, [pc, #120]	; (80003e0 <init_timers_gpio+0x140>)
 8000368:	2101      	movs	r1, #1
 800036a:	430a      	orrs	r2, r1
 800036c:	61da      	str	r2, [r3, #28]
    TIM2->PSC = 48000-1;
 800036e:	2380      	movs	r3, #128	; 0x80
 8000370:	05db      	lsls	r3, r3, #23
 8000372:	4a22      	ldr	r2, [pc, #136]	; (80003fc <init_timers_gpio+0x15c>)
 8000374:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 700-1;
 8000376:	2380      	movs	r3, #128	; 0x80
 8000378:	05db      	lsls	r3, r3, #23
 800037a:	4a21      	ldr	r2, [pc, #132]	; (8000400 <init_timers_gpio+0x160>)
 800037c:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->DIER |= TIM_DIER_UIE;
 800037e:	2380      	movs	r3, #128	; 0x80
 8000380:	05db      	lsls	r3, r3, #23
 8000382:	68da      	ldr	r2, [r3, #12]
 8000384:	2380      	movs	r3, #128	; 0x80
 8000386:	05db      	lsls	r3, r3, #23
 8000388:	2101      	movs	r1, #1
 800038a:	430a      	orrs	r2, r1
 800038c:	60da      	str	r2, [r3, #12]
    TIM2->DIER |= TIM_DIER_CC1IE;
 800038e:	2380      	movs	r3, #128	; 0x80
 8000390:	05db      	lsls	r3, r3, #23
 8000392:	68da      	ldr	r2, [r3, #12]
 8000394:	2380      	movs	r3, #128	; 0x80
 8000396:	05db      	lsls	r3, r3, #23
 8000398:	2102      	movs	r1, #2
 800039a:	430a      	orrs	r2, r1
 800039c:	60da      	str	r2, [r3, #12]
    TIM2->CCR1 = 300;
 800039e:	2380      	movs	r3, #128	; 0x80
 80003a0:	05db      	lsls	r3, r3, #23
 80003a2:	2296      	movs	r2, #150	; 0x96
 80003a4:	0052      	lsls	r2, r2, #1
 80003a6:	635a      	str	r2, [r3, #52]	; 0x34
    TIM2->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_0;
 80003a8:	2380      	movs	r3, #128	; 0x80
 80003aa:	05db      	lsls	r3, r3, #23
 80003ac:	699a      	ldr	r2, [r3, #24]
 80003ae:	2380      	movs	r3, #128	; 0x80
 80003b0:	05db      	lsls	r3, r3, #23
 80003b2:	2130      	movs	r1, #48	; 0x30
 80003b4:	430a      	orrs	r2, r1
 80003b6:	619a      	str	r2, [r3, #24]
    TIM2->CNT = 0;
 80003b8:	2380      	movs	r3, #128	; 0x80
 80003ba:	05db      	lsls	r3, r3, #23
 80003bc:	2200      	movs	r2, #0
 80003be:	625a      	str	r2, [r3, #36]	; 0x24

    TIM2->EGR |= TIM_EGR_UG; // force an update
 80003c0:	2380      	movs	r3, #128	; 0x80
 80003c2:	05db      	lsls	r3, r3, #23
 80003c4:	695a      	ldr	r2, [r3, #20]
 80003c6:	2380      	movs	r3, #128	; 0x80
 80003c8:	05db      	lsls	r3, r3, #23
 80003ca:	2101      	movs	r1, #1
 80003cc:	430a      	orrs	r2, r1
 80003ce:	615a      	str	r2, [r3, #20]

    NVIC->ISER[0] = 1<<TIM2_IRQn;
 80003d0:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <init_timers_gpio+0x154>)
 80003d2:	2280      	movs	r2, #128	; 0x80
 80003d4:	0212      	lsls	r2, r2, #8
 80003d6:	601a      	str	r2, [r3, #0]

}
 80003d8:	46c0      	nop			; (mov r8, r8)
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	40021000 	.word	0x40021000
 80003e4:	48000800 	.word	0x48000800
 80003e8:	ffff7fff 	.word	0xffff7fff
 80003ec:	40010000 	.word	0x40010000
 80003f0:	40010400 	.word	0x40010400
 80003f4:	e000e100 	.word	0xe000e100
 80003f8:	40001000 	.word	0x40001000
 80003fc:	0000bb7f 	.word	0x0000bb7f
 8000400:	000002bb 	.word	0x000002bb

08000404 <led_startup_commands>:
// pa15 = nCS
// pa5 = clk
// pa7 = d1


void led_startup_commands(){
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	HAL_Delay(1);
 8000408:	2001      	movs	r0, #1
 800040a:	f000 fc09 	bl	8000c20 <HAL_Delay>
	led_send_command(0x38);
 800040e:	2038      	movs	r0, #56	; 0x38
 8000410:	f000 f89c 	bl	800054c <led_send_command>
	led_send_command(0x08);
 8000414:	2008      	movs	r0, #8
 8000416:	f000 f899 	bl	800054c <led_send_command>
	led_send_command(0x01);
 800041a:	2001      	movs	r0, #1
 800041c:	f000 f896 	bl	800054c <led_send_command>

	HAL_Delay(2);
 8000420:	2002      	movs	r0, #2
 8000422:	f000 fbfd 	bl	8000c20 <HAL_Delay>
	led_send_command(0x06);
 8000426:	2006      	movs	r0, #6
 8000428:	f000 f890 	bl	800054c <led_send_command>
	led_send_command(0x02);
 800042c:	2002      	movs	r0, #2
 800042e:	f000 f88d 	bl	800054c <led_send_command>
	led_send_command(0x0f);
 8000432:	200f      	movs	r0, #15
 8000434:	f000 f88a 	bl	800054c <led_send_command>

}
 8000438:	46c0      	nop			; (mov r8, r8)
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
	...

08000440 <init_display>:
void init_display(){
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000444:	4b3d      	ldr	r3, [pc, #244]	; (800053c <init_display+0xfc>)
 8000446:	695a      	ldr	r2, [r3, #20]
 8000448:	4b3c      	ldr	r3, [pc, #240]	; (800053c <init_display+0xfc>)
 800044a:	2180      	movs	r1, #128	; 0x80
 800044c:	0289      	lsls	r1, r1, #10
 800044e:	430a      	orrs	r2, r1
 8000450:	615a      	str	r2, [r3, #20]

	GPIOA->MODER |= GPIO_MODER_MODER7_1; // pa7 as AF
 8000452:	2390      	movs	r3, #144	; 0x90
 8000454:	05db      	lsls	r3, r3, #23
 8000456:	681a      	ldr	r2, [r3, #0]
 8000458:	2390      	movs	r3, #144	; 0x90
 800045a:	05db      	lsls	r3, r3, #23
 800045c:	2180      	movs	r1, #128	; 0x80
 800045e:	0209      	lsls	r1, r1, #8
 8000460:	430a      	orrs	r2, r1
 8000462:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= GPIO_MODER_MODER5_1; // pa5 as AF
 8000464:	2390      	movs	r3, #144	; 0x90
 8000466:	05db      	lsls	r3, r3, #23
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	2390      	movs	r3, #144	; 0x90
 800046c:	05db      	lsls	r3, r3, #23
 800046e:	2180      	movs	r1, #128	; 0x80
 8000470:	0109      	lsls	r1, r1, #4
 8000472:	430a      	orrs	r2, r1
 8000474:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= GPIO_MODER_MODER15_1; // pa15 as AF
 8000476:	2390      	movs	r3, #144	; 0x90
 8000478:	05db      	lsls	r3, r3, #23
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	2390      	movs	r3, #144	; 0x90
 800047e:	05db      	lsls	r3, r3, #23
 8000480:	2180      	movs	r1, #128	; 0x80
 8000482:	0609      	lsls	r1, r1, #24
 8000484:	430a      	orrs	r2, r1
 8000486:	601a      	str	r2, [r3, #0]

	GPIOA->AFR[0] &= ~(0xf << 28); // pa7 as AF0 -> MOSI
 8000488:	2390      	movs	r3, #144	; 0x90
 800048a:	05db      	lsls	r3, r3, #23
 800048c:	6a1a      	ldr	r2, [r3, #32]
 800048e:	2390      	movs	r3, #144	; 0x90
 8000490:	05db      	lsls	r3, r3, #23
 8000492:	0112      	lsls	r2, r2, #4
 8000494:	0912      	lsrs	r2, r2, #4
 8000496:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(0xf << 20); // pa5 as AF0  -> CLK
 8000498:	2390      	movs	r3, #144	; 0x90
 800049a:	05db      	lsls	r3, r3, #23
 800049c:	6a1a      	ldr	r2, [r3, #32]
 800049e:	2390      	movs	r3, #144	; 0x90
 80004a0:	05db      	lsls	r3, r3, #23
 80004a2:	4927      	ldr	r1, [pc, #156]	; (8000540 <init_display+0x100>)
 80004a4:	400a      	ands	r2, r1
 80004a6:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[1] &= ~(0xf << 28); // pa15 as AF0 -> nSS
 80004a8:	2390      	movs	r3, #144	; 0x90
 80004aa:	05db      	lsls	r3, r3, #23
 80004ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004ae:	2390      	movs	r3, #144	; 0x90
 80004b0:	05db      	lsls	r3, r3, #23
 80004b2:	0112      	lsls	r2, r2, #4
 80004b4:	0912      	lsrs	r2, r2, #4
 80004b6:	625a      	str	r2, [r3, #36]	; 0x24

	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80004b8:	4b20      	ldr	r3, [pc, #128]	; (800053c <init_display+0xfc>)
 80004ba:	699a      	ldr	r2, [r3, #24]
 80004bc:	4b1f      	ldr	r3, [pc, #124]	; (800053c <init_display+0xfc>)
 80004be:	2180      	movs	r1, #128	; 0x80
 80004c0:	0149      	lsls	r1, r1, #5
 80004c2:	430a      	orrs	r2, r1
 80004c4:	619a      	str	r2, [r3, #24]
	SPI1->CR1 &= ~SPI_CR1_SPE; // turn off channel before config
 80004c6:	4b1f      	ldr	r3, [pc, #124]	; (8000544 <init_display+0x104>)
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	4b1e      	ldr	r3, [pc, #120]	; (8000544 <init_display+0x104>)
 80004cc:	2140      	movs	r1, #64	; 0x40
 80004ce:	438a      	bics	r2, r1
 80004d0:	601a      	str	r2, [r3, #0]
	while(SPI1->CR1 & SPI_CR1_SPE); // wait for it to be off
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	4b1b      	ldr	r3, [pc, #108]	; (8000544 <init_display+0x104>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	2240      	movs	r2, #64	; 0x40
 80004da:	4013      	ands	r3, r2
 80004dc:	d1fa      	bne.n	80004d4 <init_display+0x94>
	SPI1->CR1 |= SPI_CR1_BR; // set baud rate to all 1's
 80004de:	4b19      	ldr	r3, [pc, #100]	; (8000544 <init_display+0x104>)
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	4b18      	ldr	r3, [pc, #96]	; (8000544 <init_display+0x104>)
 80004e4:	2138      	movs	r1, #56	; 0x38
 80004e6:	430a      	orrs	r2, r1
 80004e8:	601a      	str	r2, [r3, #0]
	SPI1->CR2 |= SPI_CR2_DS_3; // setting the DS is really wierd, see documentation, will be 0xf after this line
 80004ea:	4b16      	ldr	r3, [pc, #88]	; (8000544 <init_display+0x104>)
 80004ec:	685a      	ldr	r2, [r3, #4]
 80004ee:	4b15      	ldr	r3, [pc, #84]	; (8000544 <init_display+0x104>)
 80004f0:	2180      	movs	r1, #128	; 0x80
 80004f2:	0109      	lsls	r1, r1, #4
 80004f4:	430a      	orrs	r2, r1
 80004f6:	605a      	str	r2, [r3, #4]
	SPI1->CR2 &= ~(SPI_CR2_DS_2 | SPI_CR2_DS_1); // clear middle 2 bits so = 0b1001
 80004f8:	4b12      	ldr	r3, [pc, #72]	; (8000544 <init_display+0x104>)
 80004fa:	685a      	ldr	r2, [r3, #4]
 80004fc:	4b11      	ldr	r3, [pc, #68]	; (8000544 <init_display+0x104>)
 80004fe:	4912      	ldr	r1, [pc, #72]	; (8000548 <init_display+0x108>)
 8000500:	400a      	ands	r2, r1
 8000502:	605a      	str	r2, [r3, #4]
	SPI1->CR2 |= SPI_CR2_SSOE;
 8000504:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <init_display+0x104>)
 8000506:	685a      	ldr	r2, [r3, #4]
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <init_display+0x104>)
 800050a:	2104      	movs	r1, #4
 800050c:	430a      	orrs	r2, r1
 800050e:	605a      	str	r2, [r3, #4]
	SPI1->CR1 |= SPI_CR1_MSTR;
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <init_display+0x104>)
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <init_display+0x104>)
 8000516:	2104      	movs	r1, #4
 8000518:	430a      	orrs	r2, r1
 800051a:	601a      	str	r2, [r3, #0]
	SPI1->CR2 |= SPI_CR2_NSSP;
 800051c:	4b09      	ldr	r3, [pc, #36]	; (8000544 <init_display+0x104>)
 800051e:	685a      	ldr	r2, [r3, #4]
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <init_display+0x104>)
 8000522:	2108      	movs	r1, #8
 8000524:	430a      	orrs	r2, r1
 8000526:	605a      	str	r2, [r3, #4]
	SPI1->CR1 |= SPI_CR1_SPE;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <init_display+0x104>)
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <init_display+0x104>)
 800052e:	2140      	movs	r1, #64	; 0x40
 8000530:	430a      	orrs	r2, r1
 8000532:	601a      	str	r2, [r3, #0]

}
 8000534:	46c0      	nop			; (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	40021000 	.word	0x40021000
 8000540:	ff0fffff 	.word	0xff0fffff
 8000544:	40013000 	.word	0x40013000
 8000548:	fffff9ff 	.word	0xfffff9ff

0800054c <led_send_command>:


void led_send_command(uint16_t cmd){
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	0002      	movs	r2, r0
 8000554:	1dbb      	adds	r3, r7, #6
 8000556:	801a      	strh	r2, [r3, #0]
	while(!(SPI1->SR & SPI_SR_TXE)); // wait tx buffer empty
 8000558:	46c0      	nop			; (mov r8, r8)
 800055a:	4b06      	ldr	r3, [pc, #24]	; (8000574 <led_send_command+0x28>)
 800055c:	689b      	ldr	r3, [r3, #8]
 800055e:	2202      	movs	r2, #2
 8000560:	4013      	ands	r3, r2
 8000562:	d0fa      	beq.n	800055a <led_send_command+0xe>
	SPI1->DR = cmd;
 8000564:	4b03      	ldr	r3, [pc, #12]	; (8000574 <led_send_command+0x28>)
 8000566:	1dba      	adds	r2, r7, #6
 8000568:	8812      	ldrh	r2, [r2, #0]
 800056a:	60da      	str	r2, [r3, #12]
}
 800056c:	46c0      	nop			; (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	b002      	add	sp, #8
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40013000 	.word	0x40013000

08000578 <EXTI0_1_IRQHandler>:

void SystemClock_Config(void);



void EXTI0_1_IRQHandler(){
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0

	// ack interrupt -> clear 1st bit of EXTI->PR
	EXTI->PR = 1<<1;
 800057e:	4b33      	ldr	r3, [pc, #204]	; (800064c <EXTI0_1_IRQHandler+0xd4>)
 8000580:	2202      	movs	r2, #2
 8000582:	615a      	str	r2, [r3, #20]

	// toggle pc7 led
	if((GPIOA->IDR >> 1) & 1){ // button pin is high (triggered by rising edge)
 8000584:	2390      	movs	r3, #144	; 0x90
 8000586:	05db      	lsls	r3, r3, #23
 8000588:	691b      	ldr	r3, [r3, #16]
 800058a:	2202      	movs	r2, #2
 800058c:	4013      	ands	r3, r2
 800058e:	d01b      	beq.n	80005c8 <EXTI0_1_IRQHandler+0x50>

		// turn on led
		GPIOC->BSRR = (1 << 7);
 8000590:	4b2f      	ldr	r3, [pc, #188]	; (8000650 <EXTI0_1_IRQHandler+0xd8>)
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	619a      	str	r2, [r3, #24]

		// turn on buzzer
		TIM3->CR1 |= TIM_CR1_CEN;
 8000596:	4b2f      	ldr	r3, [pc, #188]	; (8000654 <EXTI0_1_IRQHandler+0xdc>)
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	4b2e      	ldr	r3, [pc, #184]	; (8000654 <EXTI0_1_IRQHandler+0xdc>)
 800059c:	2101      	movs	r1, #1
 800059e:	430a      	orrs	r2, r1
 80005a0:	601a      	str	r2, [r3, #0]

		// stop the inactivity timer
		TIM2->CR1 &= ~1;
 80005a2:	2380      	movs	r3, #128	; 0x80
 80005a4:	05db      	lsls	r3, r3, #23
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	05db      	lsls	r3, r3, #23
 80005ac:	2101      	movs	r1, #1
 80005ae:	438a      	bics	r2, r1
 80005b0:	601a      	str	r2, [r3, #0]
		TIM2->CNT = 0;
 80005b2:	2380      	movs	r3, #128	; 0x80
 80005b4:	05db      	lsls	r3, r3, #23
 80005b6:	2200      	movs	r2, #0
 80005b8:	625a      	str	r2, [r3, #36]	; 0x24

		// start activity timer
		TIM6->CR1 |= 1;
 80005ba:	4b27      	ldr	r3, [pc, #156]	; (8000658 <EXTI0_1_IRQHandler+0xe0>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	4b26      	ldr	r3, [pc, #152]	; (8000658 <EXTI0_1_IRQHandler+0xe0>)
 80005c0:	2101      	movs	r1, #1
 80005c2:	430a      	orrs	r2, r1
 80005c4:	601a      	str	r2, [r3, #0]

		// start inactivity timer
		TIM2->CR1 |= TIM_CR1_CEN;

	}
}
 80005c6:	e03d      	b.n	8000644 <EXTI0_1_IRQHandler+0xcc>
		GPIOC->BSRR = (1 << 7) << 16;
 80005c8:	4b21      	ldr	r3, [pc, #132]	; (8000650 <EXTI0_1_IRQHandler+0xd8>)
 80005ca:	2280      	movs	r2, #128	; 0x80
 80005cc:	0412      	lsls	r2, r2, #16
 80005ce:	619a      	str	r2, [r3, #24]
		TIM3->CR1 &= ~TIM_CR1_CEN;
 80005d0:	4b20      	ldr	r3, [pc, #128]	; (8000654 <EXTI0_1_IRQHandler+0xdc>)
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <EXTI0_1_IRQHandler+0xdc>)
 80005d6:	2101      	movs	r1, #1
 80005d8:	438a      	bics	r2, r1
 80005da:	601a      	str	r2, [r3, #0]
		TIM3->CNT = 17; // cnt > ccr1 to make sure line is low
 80005dc:	4b1d      	ldr	r3, [pc, #116]	; (8000654 <EXTI0_1_IRQHandler+0xdc>)
 80005de:	2211      	movs	r2, #17
 80005e0:	625a      	str	r2, [r3, #36]	; 0x24
		int count = (int) TIM6->CNT;
 80005e2:	4b1d      	ldr	r3, [pc, #116]	; (8000658 <EXTI0_1_IRQHandler+0xe0>)
 80005e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005e6:	607b      	str	r3, [r7, #4]
		TIM6->CR1 &= ~1;
 80005e8:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <EXTI0_1_IRQHandler+0xe0>)
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <EXTI0_1_IRQHandler+0xe0>)
 80005ee:	2101      	movs	r1, #1
 80005f0:	438a      	bics	r2, r1
 80005f2:	601a      	str	r2, [r3, #0]
		TIM6->CNT = 0;
 80005f4:	4b18      	ldr	r3, [pc, #96]	; (8000658 <EXTI0_1_IRQHandler+0xe0>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	625a      	str	r2, [r3, #36]	; 0x24
		if(count < 115){ // press was shorter than 115ms -> dit
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b72      	cmp	r3, #114	; 0x72
 80005fe:	dc0c      	bgt.n	800061a <EXTI0_1_IRQHandler+0xa2>
			uart_send_int(count);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	0018      	movs	r0, r3
 8000604:	f000 f94e 	bl	80008a4 <uart_send_int>
			state = morse_tree[(int)state][0];
 8000608:	4b14      	ldr	r3, [pc, #80]	; (800065c <EXTI0_1_IRQHandler+0xe4>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	001a      	movs	r2, r3
 800060e:	4b14      	ldr	r3, [pc, #80]	; (8000660 <EXTI0_1_IRQHandler+0xe8>)
 8000610:	0052      	lsls	r2, r2, #1
 8000612:	5cd2      	ldrb	r2, [r2, r3]
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <EXTI0_1_IRQHandler+0xe4>)
 8000616:	701a      	strb	r2, [r3, #0]
 8000618:	e00c      	b.n	8000634 <EXTI0_1_IRQHandler+0xbc>
			uart_send_int(count);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	0018      	movs	r0, r3
 800061e:	f000 f941 	bl	80008a4 <uart_send_int>
			state = morse_tree[(int)state][1];
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <EXTI0_1_IRQHandler+0xe4>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	4a0e      	ldr	r2, [pc, #56]	; (8000660 <EXTI0_1_IRQHandler+0xe8>)
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	18d3      	adds	r3, r2, r3
 800062c:	3301      	adds	r3, #1
 800062e:	781a      	ldrb	r2, [r3, #0]
 8000630:	4b0a      	ldr	r3, [pc, #40]	; (800065c <EXTI0_1_IRQHandler+0xe4>)
 8000632:	701a      	strb	r2, [r3, #0]
		TIM2->CR1 |= TIM_CR1_CEN;
 8000634:	2380      	movs	r3, #128	; 0x80
 8000636:	05db      	lsls	r3, r3, #23
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	2380      	movs	r3, #128	; 0x80
 800063c:	05db      	lsls	r3, r3, #23
 800063e:	2101      	movs	r1, #1
 8000640:	430a      	orrs	r2, r1
 8000642:	601a      	str	r2, [r3, #0]
}
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	b002      	add	sp, #8
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40010400 	.word	0x40010400
 8000650:	48000800 	.word	0x48000800
 8000654:	40000400 	.word	0x40000400
 8000658:	40001000 	.word	0x40001000
 800065c:	20000078 	.word	0x20000078
 8000660:	0800210c 	.word	0x0800210c

08000664 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(){
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	if(!(forcedEventFlag & 1)){ // if this is the first interrupt
 8000668:	4b14      	ldr	r3, [pc, #80]	; (80006bc <TIM6_DAC_IRQHandler+0x58>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	001a      	movs	r2, r3
 8000670:	2301      	movs	r3, #1
 8000672:	4013      	ands	r3, r2
 8000674:	d10e      	bne.n	8000694 <TIM6_DAC_IRQHandler+0x30>
		forcedEventFlag |= 1; // set the 0th bit to ack init event
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <TIM6_DAC_IRQHandler+0x58>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	b2db      	uxtb	r3, r3
 800067c:	2201      	movs	r2, #1
 800067e:	4313      	orrs	r3, r2
 8000680:	b2da      	uxtb	r2, r3
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <TIM6_DAC_IRQHandler+0x58>)
 8000684:	701a      	strb	r2, [r3, #0]
		TIM6->SR &= ~TIM_SR_UIF;
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <TIM6_DAC_IRQHandler+0x5c>)
 8000688:	691a      	ldr	r2, [r3, #16]
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <TIM6_DAC_IRQHandler+0x5c>)
 800068c:	2101      	movs	r1, #1
 800068e:	438a      	bics	r2, r1
 8000690:	611a      	str	r2, [r3, #16]
		// timer and set its cnt to 399
		TIM6->SR &= ~TIM_SR_UIF;
		TIM6->CR1 &= ~TIM_CR1_CEN; // stop the timer
		TIM6->CNT = 399; // max out the timer so that a dash is interpreted
	}
}
 8000692:	e00f      	b.n	80006b4 <TIM6_DAC_IRQHandler+0x50>
		TIM6->SR &= ~TIM_SR_UIF;
 8000694:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <TIM6_DAC_IRQHandler+0x5c>)
 8000696:	691a      	ldr	r2, [r3, #16]
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <TIM6_DAC_IRQHandler+0x5c>)
 800069a:	2101      	movs	r1, #1
 800069c:	438a      	bics	r2, r1
 800069e:	611a      	str	r2, [r3, #16]
		TIM6->CR1 &= ~TIM_CR1_CEN; // stop the timer
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <TIM6_DAC_IRQHandler+0x5c>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <TIM6_DAC_IRQHandler+0x5c>)
 80006a6:	2101      	movs	r1, #1
 80006a8:	438a      	bics	r2, r1
 80006aa:	601a      	str	r2, [r3, #0]
		TIM6->CNT = 399; // max out the timer so that a dash is interpreted
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <TIM6_DAC_IRQHandler+0x5c>)
 80006ae:	2290      	movs	r2, #144	; 0x90
 80006b0:	32ff      	adds	r2, #255	; 0xff
 80006b2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	20000079 	.word	0x20000079
 80006c0:	40001000 	.word	0x40001000

080006c4 <TIM2_IRQHandler>:

void TIM2_IRQHandler(){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0

	// check if interrupt triggered from 3 inactive time units (end of curr dit/dash)
	// or from 7 inactive time units (end of word, send a space)

	// bit 1 of forcedEventFlag == 0 means this is the first interrupt (wrong clock speed)
	if(!(forcedEventFlag & 1<<1)){
 80006c8:	4b28      	ldr	r3, [pc, #160]	; (800076c <TIM2_IRQHandler+0xa8>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	001a      	movs	r2, r3
 80006d0:	2302      	movs	r3, #2
 80006d2:	4013      	ands	r3, r2
 80006d4:	d110      	bne.n	80006f8 <TIM2_IRQHandler+0x34>
		forcedEventFlag |= 1<<1; // set that bit to ack this
 80006d6:	4b25      	ldr	r3, [pc, #148]	; (800076c <TIM2_IRQHandler+0xa8>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2202      	movs	r2, #2
 80006de:	4313      	orrs	r3, r2
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b22      	ldr	r3, [pc, #136]	; (800076c <TIM2_IRQHandler+0xa8>)
 80006e4:	701a      	strb	r2, [r3, #0]
		TIM2->SR &= ~TIM_SR_UIF;
 80006e6:	2380      	movs	r3, #128	; 0x80
 80006e8:	05db      	lsls	r3, r3, #23
 80006ea:	691a      	ldr	r2, [r3, #16]
 80006ec:	2380      	movs	r3, #128	; 0x80
 80006ee:	05db      	lsls	r3, r3, #23
 80006f0:	2101      	movs	r1, #1
 80006f2:	438a      	bics	r2, r1
 80006f4:	611a      	str	r2, [r3, #16]
		return;
 80006f6:	e036      	b.n	8000766 <TIM2_IRQHandler+0xa2>
	}

	if(TIM2->SR & TIM_SR_CC1IF){
 80006f8:	2380      	movs	r3, #128	; 0x80
 80006fa:	05db      	lsls	r3, r3, #23
 80006fc:	691b      	ldr	r3, [r3, #16]
 80006fe:	2202      	movs	r2, #2
 8000700:	4013      	ands	r3, r2
 8000702:	d010      	beq.n	8000726 <TIM2_IRQHandler+0x62>
		// interrupt source: 3 inactive time units
		TIM2->SR &= ~(TIM_SR_CC1IF); // clear CC1IF bit
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	05db      	lsls	r3, r3, #23
 8000708:	691a      	ldr	r2, [r3, #16]
 800070a:	2380      	movs	r3, #128	; 0x80
 800070c:	05db      	lsls	r3, r3, #23
 800070e:	2102      	movs	r1, #2
 8000710:	438a      	bics	r2, r1
 8000712:	611a      	str	r2, [r3, #16]
		// and send the current char to serial port
		uart_send_char(node_decode[(int)state]);
 8000714:	4b16      	ldr	r3, [pc, #88]	; (8000770 <TIM2_IRQHandler+0xac>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	001a      	movs	r2, r3
 800071a:	4b16      	ldr	r3, [pc, #88]	; (8000774 <TIM2_IRQHandler+0xb0>)
 800071c:	5c9b      	ldrb	r3, [r3, r2]
 800071e:	0018      	movs	r0, r3
 8000720:	f000 f892 	bl	8000848 <uart_send_char>
 8000724:	e01c      	b.n	8000760 <TIM2_IRQHandler+0x9c>

	} else if(TIM2->SR & TIM_SR_UIF){
 8000726:	2380      	movs	r3, #128	; 0x80
 8000728:	05db      	lsls	r3, r3, #23
 800072a:	691b      	ldr	r3, [r3, #16]
 800072c:	2201      	movs	r2, #1
 800072e:	4013      	ands	r3, r2
 8000730:	d016      	beq.n	8000760 <TIM2_IRQHandler+0x9c>
		// interrupt source: 7 inactive time units
		TIM2->SR &= ~TIM_SR_UIF; // clear UIF flag
 8000732:	2380      	movs	r3, #128	; 0x80
 8000734:	05db      	lsls	r3, r3, #23
 8000736:	691a      	ldr	r2, [r3, #16]
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	05db      	lsls	r3, r3, #23
 800073c:	2101      	movs	r1, #1
 800073e:	438a      	bics	r2, r1
 8000740:	611a      	str	r2, [r3, #16]
		TIM2->CR1 &= ~TIM_CR1_CEN; // stop the timer
 8000742:	2380      	movs	r3, #128	; 0x80
 8000744:	05db      	lsls	r3, r3, #23
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	2380      	movs	r3, #128	; 0x80
 800074a:	05db      	lsls	r3, r3, #23
 800074c:	2101      	movs	r1, #1
 800074e:	438a      	bics	r2, r1
 8000750:	601a      	str	r2, [r3, #0]
		// send a space, since this means end of current word
		uart_send_char(' ');
 8000752:	2020      	movs	r0, #32
 8000754:	f000 f878 	bl	8000848 <uart_send_char>
		TIM2->CNT = 0;
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	05db      	lsls	r3, r3, #23
 800075c:	2200      	movs	r2, #0
 800075e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	// restart state
	state = START;
 8000760:	4b03      	ldr	r3, [pc, #12]	; (8000770 <TIM2_IRQHandler+0xac>)
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]

}
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	20000079 	.word	0x20000079
 8000770:	20000078 	.word	0x20000078
 8000774:	08002168 	.word	0x08002168

08000778 <main>:


int main(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  HAL_Init();
 800077c:	f000 f9ec 	bl	8000b58 <HAL_Init>
  SystemClock_Config();
 8000780:	f000 f812 	bl	80007a8 <SystemClock_Config>

  init_serial_port();
 8000784:	f000 f8a6 	bl	80008d4 <init_serial_port>

  init_timers_gpio();
 8000788:	f7ff fd8a 	bl	80002a0 <init_timers_gpio>
  init_buzzer_pwm();
 800078c:	f7ff fd50 	bl	8000230 <init_buzzer_pwm>

  init_display();
 8000790:	f7ff fe56 	bl	8000440 <init_display>
  led_startup_commands();
 8000794:	f7ff fe36 	bl	8000404 <led_startup_commands>

  uart_send_string("\n\r");
 8000798:	4b02      	ldr	r3, [pc, #8]	; (80007a4 <main+0x2c>)
 800079a:	0018      	movs	r0, r3
 800079c:	f000 f86c 	bl	8000878 <uart_send_string>
  for(;;);
 80007a0:	e7fe      	b.n	80007a0 <main+0x28>
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	08002100 	.word	0x08002100

080007a8 <SystemClock_Config>:

}

// set system clock to HSI with PLL for 48MHz clock
void SystemClock_Config(void)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b093      	sub	sp, #76	; 0x4c
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	2414      	movs	r4, #20
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	0018      	movs	r0, r3
 80007b4:	2334      	movs	r3, #52	; 0x34
 80007b6:	001a      	movs	r2, r3
 80007b8:	2100      	movs	r1, #0
 80007ba:	f001 f80f 	bl	80017dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	0018      	movs	r0, r3
 80007c2:	2310      	movs	r3, #16
 80007c4:	001a      	movs	r2, r3
 80007c6:	2100      	movs	r1, #0
 80007c8:	f001 f808 	bl	80017dc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007cc:	0021      	movs	r1, r4
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2202      	movs	r2, #2
 80007d2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2201      	movs	r2, #1
 80007d8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2210      	movs	r2, #16
 80007de:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2202      	movs	r2, #2
 80007e4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;  // Set the PLL source to HSI
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	2280      	movs	r2, #128	; 0x80
 80007ea:	0212      	lsls	r2, r2, #8
 80007ec:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;  // Multiply by 6 to get 48 MHz (8 MHz * 6 = 48 MHz)
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2280      	movs	r2, #128	; 0x80
 80007f2:	0352      	lsls	r2, r2, #13
 80007f4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;  // Set the pre-divider to 1
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2200      	movs	r2, #0
 80007fa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 fae6 	bl	8000dd0 <HAL_RCC_OscConfig>
 8000804:	1e03      	subs	r3, r0, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000808:	f000 f819 	bl	800083e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	2207      	movs	r2, #7
 8000810:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2202      	movs	r2, #2
 8000816:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2101      	movs	r1, #1
 8000828:	0018      	movs	r0, r3
 800082a:	f000 fe57 	bl	80014dc <HAL_RCC_ClockConfig>
 800082e:	1e03      	subs	r3, r0, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000832:	f000 f804 	bl	800083e <Error_Handler>
  }
}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	46bd      	mov	sp, r7
 800083a:	b013      	add	sp, #76	; 0x4c
 800083c:	bd90      	pop	{r4, r7, pc}

0800083e <Error_Handler>:




void Error_Handler(void)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000842:	b672      	cpsid	i
}
 8000844:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000846:	e7fe      	b.n	8000846 <Error_Handler+0x8>

08000848 <uart_send_char>:
#include <stdio.h>
#include "serial_port.h"
#include "main.h"


void uart_send_char(char ch){
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	0002      	movs	r2, r0
 8000850:	1dfb      	adds	r3, r7, #7
 8000852:	701a      	strb	r2, [r3, #0]
	while (!(USART5->ISR & (1 << 7)));
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	4b07      	ldr	r3, [pc, #28]	; (8000874 <uart_send_char+0x2c>)
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	2280      	movs	r2, #128	; 0x80
 800085c:	4013      	ands	r3, r2
 800085e:	d0fa      	beq.n	8000856 <uart_send_char+0xe>
	USART5->TDR = ch;
 8000860:	4a04      	ldr	r2, [pc, #16]	; (8000874 <uart_send_char+0x2c>)
 8000862:	1dfb      	adds	r3, r7, #7
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	b29b      	uxth	r3, r3
 8000868:	8513      	strh	r3, [r2, #40]	; 0x28
}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	b002      	add	sp, #8
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	40005000 	.word	0x40005000

08000878 <uart_send_string>:

void uart_send_string(const char* str) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
    while (*str) {  // Continue until the null terminator is encountered
 8000880:	e007      	b.n	8000892 <uart_send_string+0x1a>
        uart_send_char(*str);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	0018      	movs	r0, r3
 8000888:	f7ff ffde 	bl	8000848 <uart_send_char>
        str++;  // Move to the next character in the string
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3301      	adds	r3, #1
 8000890:	607b      	str	r3, [r7, #4]
    while (*str) {  // Continue until the null terminator is encountered
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d1f3      	bne.n	8000882 <uart_send_string+0xa>
    }
}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	46c0      	nop			; (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	b002      	add	sp, #8
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <uart_send_int>:

void uart_send_int(int value) {
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b087      	sub	sp, #28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
    char buffer[12];  // Buffer to hold the string representation of the integer
    snprintf(buffer, sizeof(buffer), "%d", value);  // Convert the integer to a string
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4a08      	ldr	r2, [pc, #32]	; (80008d0 <uart_send_int+0x2c>)
 80008b0:	240c      	movs	r4, #12
 80008b2:	1938      	adds	r0, r7, r4
 80008b4:	210c      	movs	r1, #12
 80008b6:	f000 ff5d 	bl	8001774 <sniprintf>
    uart_send_string(buffer);  // Send the string over UART
 80008ba:	193b      	adds	r3, r7, r4
 80008bc:	0018      	movs	r0, r3
 80008be:	f7ff ffdb 	bl	8000878 <uart_send_string>
    uart_send_char('\n');
 80008c2:	200a      	movs	r0, #10
 80008c4:	f7ff ffc0 	bl	8000848 <uart_send_char>
}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	b007      	add	sp, #28
 80008ce:	bd90      	pop	{r4, r7, pc}
 80008d0:	08002104 	.word	0x08002104

080008d4 <init_serial_port>:
    snprintf(buffer, sizeof(buffer), "%x", value);  // Convert the integer to a string
    uart_send_string(buffer);  // Send the string over UART
    uart_send_char(' ');
}

void init_serial_port(){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0

	// ------------------ serial port UART setup ----------------

	RCC->AHBENR |= RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIODEN; // enable GPIOD and GPIOC clocks
 80008d8:	4b42      	ldr	r3, [pc, #264]	; (80009e4 <init_serial_port+0x110>)
 80008da:	695a      	ldr	r2, [r3, #20]
 80008dc:	4b41      	ldr	r3, [pc, #260]	; (80009e4 <init_serial_port+0x110>)
 80008de:	21c0      	movs	r1, #192	; 0xc0
 80008e0:	0349      	lsls	r1, r1, #13
 80008e2:	430a      	orrs	r2, r1
 80008e4:	615a      	str	r2, [r3, #20]
	RCC->APB1ENR |= RCC_APB1ENR_USART5EN;
 80008e6:	4b3f      	ldr	r3, [pc, #252]	; (80009e4 <init_serial_port+0x110>)
 80008e8:	69da      	ldr	r2, [r3, #28]
 80008ea:	4b3e      	ldr	r3, [pc, #248]	; (80009e4 <init_serial_port+0x110>)
 80008ec:	2180      	movs	r1, #128	; 0x80
 80008ee:	0349      	lsls	r1, r1, #13
 80008f0:	430a      	orrs	r2, r1
 80008f2:	61da      	str	r2, [r3, #28]
	// set MODER's to alternate function
	GPIOC->MODER |= GPIO_MODER_MODER12_1;
 80008f4:	4b3c      	ldr	r3, [pc, #240]	; (80009e8 <init_serial_port+0x114>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	4b3b      	ldr	r3, [pc, #236]	; (80009e8 <init_serial_port+0x114>)
 80008fa:	2180      	movs	r1, #128	; 0x80
 80008fc:	0489      	lsls	r1, r1, #18
 80008fe:	430a      	orrs	r2, r1
 8000900:	601a      	str	r2, [r3, #0]
	GPIOC->MODER &= ~(GPIO_MODER_MODER12_0);
 8000902:	4b39      	ldr	r3, [pc, #228]	; (80009e8 <init_serial_port+0x114>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	4b38      	ldr	r3, [pc, #224]	; (80009e8 <init_serial_port+0x114>)
 8000908:	4938      	ldr	r1, [pc, #224]	; (80009ec <init_serial_port+0x118>)
 800090a:	400a      	ands	r2, r1
 800090c:	601a      	str	r2, [r3, #0]

	GPIOD->MODER |= GPIO_MODER_MODER2_1;
 800090e:	4b38      	ldr	r3, [pc, #224]	; (80009f0 <init_serial_port+0x11c>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	4b37      	ldr	r3, [pc, #220]	; (80009f0 <init_serial_port+0x11c>)
 8000914:	2120      	movs	r1, #32
 8000916:	430a      	orrs	r2, r1
 8000918:	601a      	str	r2, [r3, #0]
	GPIOD->MODER &= ~GPIO_MODER_MODER2_0;
 800091a:	4b35      	ldr	r3, [pc, #212]	; (80009f0 <init_serial_port+0x11c>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	4b34      	ldr	r3, [pc, #208]	; (80009f0 <init_serial_port+0x11c>)
 8000920:	2110      	movs	r1, #16
 8000922:	438a      	bics	r2, r1
 8000924:	601a      	str	r2, [r3, #0]

	// configure pc12 for UART5_TX (AF2)
	GPIOC->AFR[1] &= ~GPIO_AFRH_AFSEL12;
 8000926:	4b30      	ldr	r3, [pc, #192]	; (80009e8 <init_serial_port+0x114>)
 8000928:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800092a:	4b2f      	ldr	r3, [pc, #188]	; (80009e8 <init_serial_port+0x114>)
 800092c:	4931      	ldr	r1, [pc, #196]	; (80009f4 <init_serial_port+0x120>)
 800092e:	400a      	ands	r2, r1
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOC->AFR[1] |= (2 << 16);
 8000932:	4b2d      	ldr	r3, [pc, #180]	; (80009e8 <init_serial_port+0x114>)
 8000934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000936:	4b2c      	ldr	r3, [pc, #176]	; (80009e8 <init_serial_port+0x114>)
 8000938:	2180      	movs	r1, #128	; 0x80
 800093a:	0289      	lsls	r1, r1, #10
 800093c:	430a      	orrs	r2, r1
 800093e:	625a      	str	r2, [r3, #36]	; 0x24

	// configure pd2 for UART5_RX (AF2)
	GPIOD->AFR[0] &= ~GPIO_AFRL_AFSEL2;
 8000940:	4b2b      	ldr	r3, [pc, #172]	; (80009f0 <init_serial_port+0x11c>)
 8000942:	6a1a      	ldr	r2, [r3, #32]
 8000944:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <init_serial_port+0x11c>)
 8000946:	492c      	ldr	r1, [pc, #176]	; (80009f8 <init_serial_port+0x124>)
 8000948:	400a      	ands	r2, r1
 800094a:	621a      	str	r2, [r3, #32]
	GPIOD->AFR[0] |= (2 << 8);
 800094c:	4b28      	ldr	r3, [pc, #160]	; (80009f0 <init_serial_port+0x11c>)
 800094e:	6a1a      	ldr	r2, [r3, #32]
 8000950:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <init_serial_port+0x11c>)
 8000952:	2180      	movs	r1, #128	; 0x80
 8000954:	0089      	lsls	r1, r1, #2
 8000956:	430a      	orrs	r2, r1
 8000958:	621a      	str	r2, [r3, #32]

	// first, turn off the UE bit
	USART5->CR1 &= ~USART_CR1_UE;
 800095a:	4b28      	ldr	r3, [pc, #160]	; (80009fc <init_serial_port+0x128>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	4b27      	ldr	r3, [pc, #156]	; (80009fc <init_serial_port+0x128>)
 8000960:	2101      	movs	r1, #1
 8000962:	438a      	bics	r2, r1
 8000964:	601a      	str	r2, [r3, #0]

	// set word length to 8 bits
	USART5->CR1 &= ~USART_CR1_M0;
 8000966:	4b25      	ldr	r3, [pc, #148]	; (80009fc <init_serial_port+0x128>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	4b24      	ldr	r3, [pc, #144]	; (80009fc <init_serial_port+0x128>)
 800096c:	4924      	ldr	r1, [pc, #144]	; (8000a00 <init_serial_port+0x12c>)
 800096e:	400a      	ands	r2, r1
 8000970:	601a      	str	r2, [r3, #0]
	USART5->CR1 &= ~USART_CR1_M1;
 8000972:	4b22      	ldr	r3, [pc, #136]	; (80009fc <init_serial_port+0x128>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	4b21      	ldr	r3, [pc, #132]	; (80009fc <init_serial_port+0x128>)
 8000978:	4922      	ldr	r1, [pc, #136]	; (8000a04 <init_serial_port+0x130>)
 800097a:	400a      	ands	r2, r1
 800097c:	601a      	str	r2, [r3, #0]

	// set for 1 stop bit
	USART5->CR2 &= ~(USART_CR2_STOP);
 800097e:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <init_serial_port+0x128>)
 8000980:	685a      	ldr	r2, [r3, #4]
 8000982:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <init_serial_port+0x128>)
 8000984:	4920      	ldr	r1, [pc, #128]	; (8000a08 <init_serial_port+0x134>)
 8000986:	400a      	ands	r2, r1
 8000988:	605a      	str	r2, [r3, #4]

	// no parity
	USART5->CR1 &= ~(USART_CR1_PCE);
 800098a:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <init_serial_port+0x128>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <init_serial_port+0x128>)
 8000990:	491e      	ldr	r1, [pc, #120]	; (8000a0c <init_serial_port+0x138>)
 8000992:	400a      	ands	r2, r1
 8000994:	601a      	str	r2, [r3, #0]

	// 16x over-sampling
	USART5->CR1 &= ~(USART_CR1_OVER8);
 8000996:	4b19      	ldr	r3, [pc, #100]	; (80009fc <init_serial_port+0x128>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <init_serial_port+0x128>)
 800099c:	491c      	ldr	r1, [pc, #112]	; (8000a10 <init_serial_port+0x13c>)
 800099e:	400a      	ands	r2, r1
 80009a0:	601a      	str	r2, [r3, #0]

	// baud rate 115200
	USART5->BRR = 0x1a1;
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <init_serial_port+0x128>)
 80009a4:	22a2      	movs	r2, #162	; 0xa2
 80009a6:	32ff      	adds	r2, #255	; 0xff
 80009a8:	60da      	str	r2, [r3, #12]

	// enable receiver and transmitter
	USART5->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 80009aa:	4b14      	ldr	r3, [pc, #80]	; (80009fc <init_serial_port+0x128>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <init_serial_port+0x128>)
 80009b0:	210c      	movs	r1, #12
 80009b2:	430a      	orrs	r2, r1
 80009b4:	601a      	str	r2, [r3, #0]

	// enable UART
	USART5->CR1 |= USART_CR1_UE;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <init_serial_port+0x128>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <init_serial_port+0x128>)
 80009bc:	2101      	movs	r1, #1
 80009be:	430a      	orrs	r2, r1
 80009c0:	601a      	str	r2, [r3, #0]

	// wait for things to work?
	while(!(USART5->ISR & USART_ISR_REACK) || !(USART5->ISR & USART_ISR_TEACK));
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <init_serial_port+0x128>)
 80009c6:	69da      	ldr	r2, [r3, #28]
 80009c8:	2380      	movs	r3, #128	; 0x80
 80009ca:	03db      	lsls	r3, r3, #15
 80009cc:	4013      	ands	r3, r2
 80009ce:	d0f9      	beq.n	80009c4 <init_serial_port+0xf0>
 80009d0:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <init_serial_port+0x128>)
 80009d2:	69da      	ldr	r2, [r3, #28]
 80009d4:	2380      	movs	r3, #128	; 0x80
 80009d6:	039b      	lsls	r3, r3, #14
 80009d8:	4013      	ands	r3, r2
 80009da:	d0f3      	beq.n	80009c4 <init_serial_port+0xf0>

}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40021000 	.word	0x40021000
 80009e8:	48000800 	.word	0x48000800
 80009ec:	feffffff 	.word	0xfeffffff
 80009f0:	48000c00 	.word	0x48000c00
 80009f4:	fff0ffff 	.word	0xfff0ffff
 80009f8:	fffff0ff 	.word	0xfffff0ff
 80009fc:	40005000 	.word	0x40005000
 8000a00:	ffffefff 	.word	0xffffefff
 8000a04:	efffffff 	.word	0xefffffff
 8000a08:	ffffcfff 	.word	0xffffcfff
 8000a0c:	fffffbff 	.word	0xfffffbff
 8000a10:	ffff7fff 	.word	0xffff7fff

08000a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <HAL_MspInit+0x44>)
 8000a1c:	699a      	ldr	r2, [r3, #24]
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <HAL_MspInit+0x44>)
 8000a20:	2101      	movs	r1, #1
 8000a22:	430a      	orrs	r2, r1
 8000a24:	619a      	str	r2, [r3, #24]
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <HAL_MspInit+0x44>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <HAL_MspInit+0x44>)
 8000a34:	69da      	ldr	r2, [r3, #28]
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <HAL_MspInit+0x44>)
 8000a38:	2180      	movs	r1, #128	; 0x80
 8000a3a:	0549      	lsls	r1, r1, #21
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	61da      	str	r2, [r3, #28]
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <HAL_MspInit+0x44>)
 8000a42:	69da      	ldr	r2, [r3, #28]
 8000a44:	2380      	movs	r3, #128	; 0x80
 8000a46:	055b      	lsls	r3, r3, #21
 8000a48:	4013      	ands	r3, r2
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b002      	add	sp, #8
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	40021000 	.word	0x40021000

08000a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <NMI_Handler+0x4>

08000a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <HardFault_Handler+0x4>

08000a68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a80:	f000 f8b2 	bl	8000be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a84:	46c0      	nop			; (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a94:	4a14      	ldr	r2, [pc, #80]	; (8000ae8 <_sbrk+0x5c>)
 8000a96:	4b15      	ldr	r3, [pc, #84]	; (8000aec <_sbrk+0x60>)
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa0:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <_sbrk+0x64>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d102      	bne.n	8000aae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <_sbrk+0x64>)
 8000aaa:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <_sbrk+0x68>)
 8000aac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <_sbrk+0x64>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	18d3      	adds	r3, r2, r3
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d207      	bcs.n	8000acc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000abc:	f000 fe96 	bl	80017ec <__errno>
 8000ac0:	0003      	movs	r3, r0
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	425b      	negs	r3, r3
 8000aca:	e009      	b.n	8000ae0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <_sbrk+0x64>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ad2:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <_sbrk+0x64>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	18d2      	adds	r2, r2, r3
 8000ada:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <_sbrk+0x64>)
 8000adc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000ade:	68fb      	ldr	r3, [r7, #12]
}
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b006      	add	sp, #24
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20008000 	.word	0x20008000
 8000aec:	00000400 	.word	0x00000400
 8000af0:	2000007c 	.word	0x2000007c
 8000af4:	200001d0 	.word	0x200001d0

08000af8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b04:	480d      	ldr	r0, [pc, #52]	; (8000b3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b06:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b08:	f7ff fff6 	bl	8000af8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b0c:	480c      	ldr	r0, [pc, #48]	; (8000b40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b0e:	490d      	ldr	r1, [pc, #52]	; (8000b44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b10:	4a0d      	ldr	r2, [pc, #52]	; (8000b48 <LoopForever+0xe>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b24:	4c0a      	ldr	r4, [pc, #40]	; (8000b50 <LoopForever+0x16>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b32:	f000 fe61 	bl	80017f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b36:	f7ff fe1f 	bl	8000778 <main>

08000b3a <LoopForever>:

LoopForever:
    b LoopForever
 8000b3a:	e7fe      	b.n	8000b3a <LoopForever>
  ldr   r0, =_estack
 8000b3c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b48:	08002204 	.word	0x08002204
  ldr r2, =_sbss
 8000b4c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b50:	200001cc 	.word	0x200001cc

08000b54 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC1_COMP_IRQHandler>
	...

08000b58 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b5c:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <HAL_Init+0x24>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_Init+0x24>)
 8000b62:	2110      	movs	r1, #16
 8000b64:	430a      	orrs	r2, r1
 8000b66:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b68:	2003      	movs	r0, #3
 8000b6a:	f000 f809 	bl	8000b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b6e:	f7ff ff51 	bl	8000a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b72:	2300      	movs	r3, #0
}
 8000b74:	0018      	movs	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	40022000 	.word	0x40022000

08000b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b590      	push	{r4, r7, lr}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <HAL_InitTick+0x5c>)
 8000b8a:	681c      	ldr	r4, [r3, #0]
 8000b8c:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <HAL_InitTick+0x60>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	0019      	movs	r1, r3
 8000b92:	23fa      	movs	r3, #250	; 0xfa
 8000b94:	0098      	lsls	r0, r3, #2
 8000b96:	f7ff fabf 	bl	8000118 <__udivsi3>
 8000b9a:	0003      	movs	r3, r0
 8000b9c:	0019      	movs	r1, r3
 8000b9e:	0020      	movs	r0, r4
 8000ba0:	f7ff faba 	bl	8000118 <__udivsi3>
 8000ba4:	0003      	movs	r3, r0
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f000 f905 	bl	8000db6 <HAL_SYSTICK_Config>
 8000bac:	1e03      	subs	r3, r0, #0
 8000bae:	d001      	beq.n	8000bb4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e00f      	b.n	8000bd4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b03      	cmp	r3, #3
 8000bb8:	d80b      	bhi.n	8000bd2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	425b      	negs	r3, r3
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f000 f8e2 	bl	8000d8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_InitTick+0x64>)
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e000      	b.n	8000bd4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
}
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b003      	add	sp, #12
 8000bda:	bd90      	pop	{r4, r7, pc}
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000008 	.word	0x20000008
 8000be4:	20000004 	.word	0x20000004

08000be8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <HAL_IncTick+0x1c>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	001a      	movs	r2, r3
 8000bf2:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <HAL_IncTick+0x20>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	18d2      	adds	r2, r2, r3
 8000bf8:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <HAL_IncTick+0x20>)
 8000bfa:	601a      	str	r2, [r3, #0]
}
 8000bfc:	46c0      	nop			; (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	20000008 	.word	0x20000008
 8000c08:	20000080 	.word	0x20000080

08000c0c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c10:	4b02      	ldr	r3, [pc, #8]	; (8000c1c <HAL_GetTick+0x10>)
 8000c12:	681b      	ldr	r3, [r3, #0]
}
 8000c14:	0018      	movs	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	20000080 	.word	0x20000080

08000c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c28:	f7ff fff0 	bl	8000c0c <HAL_GetTick>
 8000c2c:	0003      	movs	r3, r0
 8000c2e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	3301      	adds	r3, #1
 8000c38:	d005      	beq.n	8000c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <HAL_Delay+0x44>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	001a      	movs	r2, r3
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	189b      	adds	r3, r3, r2
 8000c44:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	f7ff ffe0 	bl	8000c0c <HAL_GetTick>
 8000c4c:	0002      	movs	r2, r0
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d8f7      	bhi.n	8000c48 <HAL_Delay+0x28>
  {
  }
}
 8000c58:	46c0      	nop			; (mov r8, r8)
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b004      	add	sp, #16
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	20000008 	.word	0x20000008

08000c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	0002      	movs	r2, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c76:	1dfb      	adds	r3, r7, #7
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c7c:	d828      	bhi.n	8000cd0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c7e:	4a2f      	ldr	r2, [pc, #188]	; (8000d3c <__NVIC_SetPriority+0xd4>)
 8000c80:	1dfb      	adds	r3, r7, #7
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	b25b      	sxtb	r3, r3
 8000c86:	089b      	lsrs	r3, r3, #2
 8000c88:	33c0      	adds	r3, #192	; 0xc0
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	589b      	ldr	r3, [r3, r2]
 8000c8e:	1dfa      	adds	r2, r7, #7
 8000c90:	7812      	ldrb	r2, [r2, #0]
 8000c92:	0011      	movs	r1, r2
 8000c94:	2203      	movs	r2, #3
 8000c96:	400a      	ands	r2, r1
 8000c98:	00d2      	lsls	r2, r2, #3
 8000c9a:	21ff      	movs	r1, #255	; 0xff
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	000a      	movs	r2, r1
 8000ca0:	43d2      	mvns	r2, r2
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	019b      	lsls	r3, r3, #6
 8000caa:	22ff      	movs	r2, #255	; 0xff
 8000cac:	401a      	ands	r2, r3
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	4003      	ands	r3, r0
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cbc:	481f      	ldr	r0, [pc, #124]	; (8000d3c <__NVIC_SetPriority+0xd4>)
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	b25b      	sxtb	r3, r3
 8000cc4:	089b      	lsrs	r3, r3, #2
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	33c0      	adds	r3, #192	; 0xc0
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cce:	e031      	b.n	8000d34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cd0:	4a1b      	ldr	r2, [pc, #108]	; (8000d40 <__NVIC_SetPriority+0xd8>)
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	0019      	movs	r1, r3
 8000cd8:	230f      	movs	r3, #15
 8000cda:	400b      	ands	r3, r1
 8000cdc:	3b08      	subs	r3, #8
 8000cde:	089b      	lsrs	r3, r3, #2
 8000ce0:	3306      	adds	r3, #6
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	18d3      	adds	r3, r2, r3
 8000ce6:	3304      	adds	r3, #4
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	1dfa      	adds	r2, r7, #7
 8000cec:	7812      	ldrb	r2, [r2, #0]
 8000cee:	0011      	movs	r1, r2
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	400a      	ands	r2, r1
 8000cf4:	00d2      	lsls	r2, r2, #3
 8000cf6:	21ff      	movs	r1, #255	; 0xff
 8000cf8:	4091      	lsls	r1, r2
 8000cfa:	000a      	movs	r2, r1
 8000cfc:	43d2      	mvns	r2, r2
 8000cfe:	401a      	ands	r2, r3
 8000d00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	019b      	lsls	r3, r3, #6
 8000d06:	22ff      	movs	r2, #255	; 0xff
 8000d08:	401a      	ands	r2, r3
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	0018      	movs	r0, r3
 8000d10:	2303      	movs	r3, #3
 8000d12:	4003      	ands	r3, r0
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d18:	4809      	ldr	r0, [pc, #36]	; (8000d40 <__NVIC_SetPriority+0xd8>)
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	001c      	movs	r4, r3
 8000d20:	230f      	movs	r3, #15
 8000d22:	4023      	ands	r3, r4
 8000d24:	3b08      	subs	r3, #8
 8000d26:	089b      	lsrs	r3, r3, #2
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	3306      	adds	r3, #6
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	18c3      	adds	r3, r0, r3
 8000d30:	3304      	adds	r3, #4
 8000d32:	601a      	str	r2, [r3, #0]
}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b003      	add	sp, #12
 8000d3a:	bd90      	pop	{r4, r7, pc}
 8000d3c:	e000e100 	.word	0xe000e100
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	1e5a      	subs	r2, r3, #1
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	045b      	lsls	r3, r3, #17
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d301      	bcc.n	8000d5c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e010      	b.n	8000d7e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <SysTick_Config+0x44>)
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	3a01      	subs	r2, #1
 8000d62:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d64:	2301      	movs	r3, #1
 8000d66:	425b      	negs	r3, r3
 8000d68:	2103      	movs	r1, #3
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff ff7c 	bl	8000c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <SysTick_Config+0x44>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d76:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <SysTick_Config+0x44>)
 8000d78:	2207      	movs	r2, #7
 8000d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	0018      	movs	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b002      	add	sp, #8
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	e000e010 	.word	0xe000e010

08000d8c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
 8000d96:	210f      	movs	r1, #15
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	1c02      	adds	r2, r0, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	b25b      	sxtb	r3, r3
 8000da6:	0011      	movs	r1, r2
 8000da8:	0018      	movs	r0, r3
 8000daa:	f7ff ff5d 	bl	8000c68 <__NVIC_SetPriority>
}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	46bd      	mov	sp, r7
 8000db2:	b004      	add	sp, #16
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f7ff ffbf 	bl	8000d44 <SysTick_Config>
 8000dc6:	0003      	movs	r3, r0
}
 8000dc8:	0018      	movs	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b002      	add	sp, #8
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d102      	bne.n	8000de4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	f000 fb76 	bl	80014d0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2201      	movs	r2, #1
 8000dea:	4013      	ands	r3, r2
 8000dec:	d100      	bne.n	8000df0 <HAL_RCC_OscConfig+0x20>
 8000dee:	e08e      	b.n	8000f0e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000df0:	4bc5      	ldr	r3, [pc, #788]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	220c      	movs	r2, #12
 8000df6:	4013      	ands	r3, r2
 8000df8:	2b04      	cmp	r3, #4
 8000dfa:	d00e      	beq.n	8000e1a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dfc:	4bc2      	ldr	r3, [pc, #776]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	220c      	movs	r2, #12
 8000e02:	4013      	ands	r3, r2
 8000e04:	2b08      	cmp	r3, #8
 8000e06:	d117      	bne.n	8000e38 <HAL_RCC_OscConfig+0x68>
 8000e08:	4bbf      	ldr	r3, [pc, #764]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	23c0      	movs	r3, #192	; 0xc0
 8000e0e:	025b      	lsls	r3, r3, #9
 8000e10:	401a      	ands	r2, r3
 8000e12:	2380      	movs	r3, #128	; 0x80
 8000e14:	025b      	lsls	r3, r3, #9
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d10e      	bne.n	8000e38 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e1a:	4bbb      	ldr	r3, [pc, #748]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	2380      	movs	r3, #128	; 0x80
 8000e20:	029b      	lsls	r3, r3, #10
 8000e22:	4013      	ands	r3, r2
 8000e24:	d100      	bne.n	8000e28 <HAL_RCC_OscConfig+0x58>
 8000e26:	e071      	b.n	8000f0c <HAL_RCC_OscConfig+0x13c>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d000      	beq.n	8000e32 <HAL_RCC_OscConfig+0x62>
 8000e30:	e06c      	b.n	8000f0c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	f000 fb4c 	bl	80014d0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d107      	bne.n	8000e50 <HAL_RCC_OscConfig+0x80>
 8000e40:	4bb1      	ldr	r3, [pc, #708]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4bb0      	ldr	r3, [pc, #704]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000e46:	2180      	movs	r1, #128	; 0x80
 8000e48:	0249      	lsls	r1, r1, #9
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	e02f      	b.n	8000eb0 <HAL_RCC_OscConfig+0xe0>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d10c      	bne.n	8000e72 <HAL_RCC_OscConfig+0xa2>
 8000e58:	4bab      	ldr	r3, [pc, #684]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4baa      	ldr	r3, [pc, #680]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000e5e:	49ab      	ldr	r1, [pc, #684]	; (800110c <HAL_RCC_OscConfig+0x33c>)
 8000e60:	400a      	ands	r2, r1
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	4ba8      	ldr	r3, [pc, #672]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4ba7      	ldr	r3, [pc, #668]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000e6a:	49a9      	ldr	r1, [pc, #676]	; (8001110 <HAL_RCC_OscConfig+0x340>)
 8000e6c:	400a      	ands	r2, r1
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	e01e      	b.n	8000eb0 <HAL_RCC_OscConfig+0xe0>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	2b05      	cmp	r3, #5
 8000e78:	d10e      	bne.n	8000e98 <HAL_RCC_OscConfig+0xc8>
 8000e7a:	4ba3      	ldr	r3, [pc, #652]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	4ba2      	ldr	r3, [pc, #648]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000e80:	2180      	movs	r1, #128	; 0x80
 8000e82:	02c9      	lsls	r1, r1, #11
 8000e84:	430a      	orrs	r2, r1
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	4b9f      	ldr	r3, [pc, #636]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b9e      	ldr	r3, [pc, #632]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000e8e:	2180      	movs	r1, #128	; 0x80
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	430a      	orrs	r2, r1
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	e00b      	b.n	8000eb0 <HAL_RCC_OscConfig+0xe0>
 8000e98:	4b9b      	ldr	r3, [pc, #620]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b9a      	ldr	r3, [pc, #616]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000e9e:	499b      	ldr	r1, [pc, #620]	; (800110c <HAL_RCC_OscConfig+0x33c>)
 8000ea0:	400a      	ands	r2, r1
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	4b98      	ldr	r3, [pc, #608]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b97      	ldr	r3, [pc, #604]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000eaa:	4999      	ldr	r1, [pc, #612]	; (8001110 <HAL_RCC_OscConfig+0x340>)
 8000eac:	400a      	ands	r2, r1
 8000eae:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d014      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb8:	f7ff fea8 	bl	8000c0c <HAL_GetTick>
 8000ebc:	0003      	movs	r3, r0
 8000ebe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ec0:	e008      	b.n	8000ed4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ec2:	f7ff fea3 	bl	8000c0c <HAL_GetTick>
 8000ec6:	0002      	movs	r2, r0
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	2b64      	cmp	r3, #100	; 0x64
 8000ece:	d901      	bls.n	8000ed4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e2fd      	b.n	80014d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ed4:	4b8c      	ldr	r3, [pc, #560]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	2380      	movs	r3, #128	; 0x80
 8000eda:	029b      	lsls	r3, r3, #10
 8000edc:	4013      	ands	r3, r2
 8000ede:	d0f0      	beq.n	8000ec2 <HAL_RCC_OscConfig+0xf2>
 8000ee0:	e015      	b.n	8000f0e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee2:	f7ff fe93 	bl	8000c0c <HAL_GetTick>
 8000ee6:	0003      	movs	r3, r0
 8000ee8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eea:	e008      	b.n	8000efe <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eec:	f7ff fe8e 	bl	8000c0c <HAL_GetTick>
 8000ef0:	0002      	movs	r2, r0
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b64      	cmp	r3, #100	; 0x64
 8000ef8:	d901      	bls.n	8000efe <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e2e8      	b.n	80014d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000efe:	4b82      	ldr	r3, [pc, #520]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	2380      	movs	r3, #128	; 0x80
 8000f04:	029b      	lsls	r3, r3, #10
 8000f06:	4013      	ands	r3, r2
 8000f08:	d1f0      	bne.n	8000eec <HAL_RCC_OscConfig+0x11c>
 8000f0a:	e000      	b.n	8000f0e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f0c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2202      	movs	r2, #2
 8000f14:	4013      	ands	r3, r2
 8000f16:	d100      	bne.n	8000f1a <HAL_RCC_OscConfig+0x14a>
 8000f18:	e06c      	b.n	8000ff4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f1a:	4b7b      	ldr	r3, [pc, #492]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	220c      	movs	r2, #12
 8000f20:	4013      	ands	r3, r2
 8000f22:	d00e      	beq.n	8000f42 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f24:	4b78      	ldr	r3, [pc, #480]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	220c      	movs	r2, #12
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	2b08      	cmp	r3, #8
 8000f2e:	d11f      	bne.n	8000f70 <HAL_RCC_OscConfig+0x1a0>
 8000f30:	4b75      	ldr	r3, [pc, #468]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000f32:	685a      	ldr	r2, [r3, #4]
 8000f34:	23c0      	movs	r3, #192	; 0xc0
 8000f36:	025b      	lsls	r3, r3, #9
 8000f38:	401a      	ands	r2, r3
 8000f3a:	2380      	movs	r3, #128	; 0x80
 8000f3c:	021b      	lsls	r3, r3, #8
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d116      	bne.n	8000f70 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f42:	4b71      	ldr	r3, [pc, #452]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2202      	movs	r2, #2
 8000f48:	4013      	ands	r3, r2
 8000f4a:	d005      	beq.n	8000f58 <HAL_RCC_OscConfig+0x188>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d001      	beq.n	8000f58 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e2bb      	b.n	80014d0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f58:	4b6b      	ldr	r3, [pc, #428]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	22f8      	movs	r2, #248	; 0xf8
 8000f5e:	4393      	bics	r3, r2
 8000f60:	0019      	movs	r1, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	691b      	ldr	r3, [r3, #16]
 8000f66:	00da      	lsls	r2, r3, #3
 8000f68:	4b67      	ldr	r3, [pc, #412]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f6e:	e041      	b.n	8000ff4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d024      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f78:	4b63      	ldr	r3, [pc, #396]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b62      	ldr	r3, [pc, #392]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000f7e:	2101      	movs	r1, #1
 8000f80:	430a      	orrs	r2, r1
 8000f82:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f84:	f7ff fe42 	bl	8000c0c <HAL_GetTick>
 8000f88:	0003      	movs	r3, r0
 8000f8a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f8c:	e008      	b.n	8000fa0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f8e:	f7ff fe3d 	bl	8000c0c <HAL_GetTick>
 8000f92:	0002      	movs	r2, r0
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d901      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e297      	b.n	80014d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fa0:	4b59      	ldr	r3, [pc, #356]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	d0f1      	beq.n	8000f8e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000faa:	4b57      	ldr	r3, [pc, #348]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	22f8      	movs	r2, #248	; 0xf8
 8000fb0:	4393      	bics	r3, r2
 8000fb2:	0019      	movs	r1, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	00da      	lsls	r2, r3, #3
 8000fba:	4b53      	ldr	r3, [pc, #332]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	e018      	b.n	8000ff4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fc2:	4b51      	ldr	r3, [pc, #324]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	4b50      	ldr	r3, [pc, #320]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000fc8:	2101      	movs	r1, #1
 8000fca:	438a      	bics	r2, r1
 8000fcc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fce:	f7ff fe1d 	bl	8000c0c <HAL_GetTick>
 8000fd2:	0003      	movs	r3, r0
 8000fd4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fd6:	e008      	b.n	8000fea <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fd8:	f7ff fe18 	bl	8000c0c <HAL_GetTick>
 8000fdc:	0002      	movs	r2, r0
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d901      	bls.n	8000fea <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e272      	b.n	80014d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fea:	4b47      	ldr	r3, [pc, #284]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2202      	movs	r2, #2
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	d1f1      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2208      	movs	r2, #8
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	d036      	beq.n	800106c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d019      	beq.n	800103a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001006:	4b40      	ldr	r3, [pc, #256]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8001008:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800100a:	4b3f      	ldr	r3, [pc, #252]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 800100c:	2101      	movs	r1, #1
 800100e:	430a      	orrs	r2, r1
 8001010:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001012:	f7ff fdfb 	bl	8000c0c <HAL_GetTick>
 8001016:	0003      	movs	r3, r0
 8001018:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800101a:	e008      	b.n	800102e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800101c:	f7ff fdf6 	bl	8000c0c <HAL_GetTick>
 8001020:	0002      	movs	r2, r0
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d901      	bls.n	800102e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e250      	b.n	80014d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800102e:	4b36      	ldr	r3, [pc, #216]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8001030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001032:	2202      	movs	r2, #2
 8001034:	4013      	ands	r3, r2
 8001036:	d0f1      	beq.n	800101c <HAL_RCC_OscConfig+0x24c>
 8001038:	e018      	b.n	800106c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800103a:	4b33      	ldr	r3, [pc, #204]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 800103c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800103e:	4b32      	ldr	r3, [pc, #200]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8001040:	2101      	movs	r1, #1
 8001042:	438a      	bics	r2, r1
 8001044:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001046:	f7ff fde1 	bl	8000c0c <HAL_GetTick>
 800104a:	0003      	movs	r3, r0
 800104c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800104e:	e008      	b.n	8001062 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001050:	f7ff fddc 	bl	8000c0c <HAL_GetTick>
 8001054:	0002      	movs	r2, r0
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b02      	cmp	r3, #2
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e236      	b.n	80014d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001062:	4b29      	ldr	r3, [pc, #164]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8001064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001066:	2202      	movs	r2, #2
 8001068:	4013      	ands	r3, r2
 800106a:	d1f1      	bne.n	8001050 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2204      	movs	r2, #4
 8001072:	4013      	ands	r3, r2
 8001074:	d100      	bne.n	8001078 <HAL_RCC_OscConfig+0x2a8>
 8001076:	e0b5      	b.n	80011e4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001078:	201f      	movs	r0, #31
 800107a:	183b      	adds	r3, r7, r0
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001080:	4b21      	ldr	r3, [pc, #132]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8001082:	69da      	ldr	r2, [r3, #28]
 8001084:	2380      	movs	r3, #128	; 0x80
 8001086:	055b      	lsls	r3, r3, #21
 8001088:	4013      	ands	r3, r2
 800108a:	d110      	bne.n	80010ae <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800108c:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 800108e:	69da      	ldr	r2, [r3, #28]
 8001090:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 8001092:	2180      	movs	r1, #128	; 0x80
 8001094:	0549      	lsls	r1, r1, #21
 8001096:	430a      	orrs	r2, r1
 8001098:	61da      	str	r2, [r3, #28]
 800109a:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 800109c:	69da      	ldr	r2, [r3, #28]
 800109e:	2380      	movs	r3, #128	; 0x80
 80010a0:	055b      	lsls	r3, r3, #21
 80010a2:	4013      	ands	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80010a8:	183b      	adds	r3, r7, r0
 80010aa:	2201      	movs	r2, #1
 80010ac:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ae:	4b19      	ldr	r3, [pc, #100]	; (8001114 <HAL_RCC_OscConfig+0x344>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	2380      	movs	r3, #128	; 0x80
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	4013      	ands	r3, r2
 80010b8:	d11a      	bne.n	80010f0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010ba:	4b16      	ldr	r3, [pc, #88]	; (8001114 <HAL_RCC_OscConfig+0x344>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <HAL_RCC_OscConfig+0x344>)
 80010c0:	2180      	movs	r1, #128	; 0x80
 80010c2:	0049      	lsls	r1, r1, #1
 80010c4:	430a      	orrs	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010c8:	f7ff fda0 	bl	8000c0c <HAL_GetTick>
 80010cc:	0003      	movs	r3, r0
 80010ce:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d0:	e008      	b.n	80010e4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010d2:	f7ff fd9b 	bl	8000c0c <HAL_GetTick>
 80010d6:	0002      	movs	r2, r0
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b64      	cmp	r3, #100	; 0x64
 80010de:	d901      	bls.n	80010e4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e1f5      	b.n	80014d0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <HAL_RCC_OscConfig+0x344>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	2380      	movs	r3, #128	; 0x80
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	4013      	ands	r3, r2
 80010ee:	d0f0      	beq.n	80010d2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d10f      	bne.n	8001118 <HAL_RCC_OscConfig+0x348>
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 80010fa:	6a1a      	ldr	r2, [r3, #32]
 80010fc:	4b02      	ldr	r3, [pc, #8]	; (8001108 <HAL_RCC_OscConfig+0x338>)
 80010fe:	2101      	movs	r1, #1
 8001100:	430a      	orrs	r2, r1
 8001102:	621a      	str	r2, [r3, #32]
 8001104:	e036      	b.n	8001174 <HAL_RCC_OscConfig+0x3a4>
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	40021000 	.word	0x40021000
 800110c:	fffeffff 	.word	0xfffeffff
 8001110:	fffbffff 	.word	0xfffbffff
 8001114:	40007000 	.word	0x40007000
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d10c      	bne.n	800113a <HAL_RCC_OscConfig+0x36a>
 8001120:	4bca      	ldr	r3, [pc, #808]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 8001122:	6a1a      	ldr	r2, [r3, #32]
 8001124:	4bc9      	ldr	r3, [pc, #804]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 8001126:	2101      	movs	r1, #1
 8001128:	438a      	bics	r2, r1
 800112a:	621a      	str	r2, [r3, #32]
 800112c:	4bc7      	ldr	r3, [pc, #796]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 800112e:	6a1a      	ldr	r2, [r3, #32]
 8001130:	4bc6      	ldr	r3, [pc, #792]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 8001132:	2104      	movs	r1, #4
 8001134:	438a      	bics	r2, r1
 8001136:	621a      	str	r2, [r3, #32]
 8001138:	e01c      	b.n	8001174 <HAL_RCC_OscConfig+0x3a4>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	2b05      	cmp	r3, #5
 8001140:	d10c      	bne.n	800115c <HAL_RCC_OscConfig+0x38c>
 8001142:	4bc2      	ldr	r3, [pc, #776]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 8001144:	6a1a      	ldr	r2, [r3, #32]
 8001146:	4bc1      	ldr	r3, [pc, #772]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 8001148:	2104      	movs	r1, #4
 800114a:	430a      	orrs	r2, r1
 800114c:	621a      	str	r2, [r3, #32]
 800114e:	4bbf      	ldr	r3, [pc, #764]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 8001150:	6a1a      	ldr	r2, [r3, #32]
 8001152:	4bbe      	ldr	r3, [pc, #760]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 8001154:	2101      	movs	r1, #1
 8001156:	430a      	orrs	r2, r1
 8001158:	621a      	str	r2, [r3, #32]
 800115a:	e00b      	b.n	8001174 <HAL_RCC_OscConfig+0x3a4>
 800115c:	4bbb      	ldr	r3, [pc, #748]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 800115e:	6a1a      	ldr	r2, [r3, #32]
 8001160:	4bba      	ldr	r3, [pc, #744]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 8001162:	2101      	movs	r1, #1
 8001164:	438a      	bics	r2, r1
 8001166:	621a      	str	r2, [r3, #32]
 8001168:	4bb8      	ldr	r3, [pc, #736]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 800116a:	6a1a      	ldr	r2, [r3, #32]
 800116c:	4bb7      	ldr	r3, [pc, #732]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 800116e:	2104      	movs	r1, #4
 8001170:	438a      	bics	r2, r1
 8001172:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d014      	beq.n	80011a6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800117c:	f7ff fd46 	bl	8000c0c <HAL_GetTick>
 8001180:	0003      	movs	r3, r0
 8001182:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001184:	e009      	b.n	800119a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001186:	f7ff fd41 	bl	8000c0c <HAL_GetTick>
 800118a:	0002      	movs	r2, r0
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	4aaf      	ldr	r2, [pc, #700]	; (8001450 <HAL_RCC_OscConfig+0x680>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e19a      	b.n	80014d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800119a:	4bac      	ldr	r3, [pc, #688]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 800119c:	6a1b      	ldr	r3, [r3, #32]
 800119e:	2202      	movs	r2, #2
 80011a0:	4013      	ands	r3, r2
 80011a2:	d0f0      	beq.n	8001186 <HAL_RCC_OscConfig+0x3b6>
 80011a4:	e013      	b.n	80011ce <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a6:	f7ff fd31 	bl	8000c0c <HAL_GetTick>
 80011aa:	0003      	movs	r3, r0
 80011ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011ae:	e009      	b.n	80011c4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011b0:	f7ff fd2c 	bl	8000c0c <HAL_GetTick>
 80011b4:	0002      	movs	r2, r0
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	4aa5      	ldr	r2, [pc, #660]	; (8001450 <HAL_RCC_OscConfig+0x680>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e185      	b.n	80014d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011c4:	4ba1      	ldr	r3, [pc, #644]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 80011c6:	6a1b      	ldr	r3, [r3, #32]
 80011c8:	2202      	movs	r2, #2
 80011ca:	4013      	ands	r3, r2
 80011cc:	d1f0      	bne.n	80011b0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011ce:	231f      	movs	r3, #31
 80011d0:	18fb      	adds	r3, r7, r3
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d105      	bne.n	80011e4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011d8:	4b9c      	ldr	r3, [pc, #624]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 80011da:	69da      	ldr	r2, [r3, #28]
 80011dc:	4b9b      	ldr	r3, [pc, #620]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 80011de:	499d      	ldr	r1, [pc, #628]	; (8001454 <HAL_RCC_OscConfig+0x684>)
 80011e0:	400a      	ands	r2, r1
 80011e2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2210      	movs	r2, #16
 80011ea:	4013      	ands	r3, r2
 80011ec:	d063      	beq.n	80012b6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d12a      	bne.n	800124c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80011f6:	4b95      	ldr	r3, [pc, #596]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 80011f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011fa:	4b94      	ldr	r3, [pc, #592]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 80011fc:	2104      	movs	r1, #4
 80011fe:	430a      	orrs	r2, r1
 8001200:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001202:	4b92      	ldr	r3, [pc, #584]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 8001204:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001206:	4b91      	ldr	r3, [pc, #580]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 8001208:	2101      	movs	r1, #1
 800120a:	430a      	orrs	r2, r1
 800120c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800120e:	f7ff fcfd 	bl	8000c0c <HAL_GetTick>
 8001212:	0003      	movs	r3, r0
 8001214:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001218:	f7ff fcf8 	bl	8000c0c <HAL_GetTick>
 800121c:	0002      	movs	r2, r0
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e152      	b.n	80014d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800122a:	4b88      	ldr	r3, [pc, #544]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 800122c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800122e:	2202      	movs	r2, #2
 8001230:	4013      	ands	r3, r2
 8001232:	d0f1      	beq.n	8001218 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001234:	4b85      	ldr	r3, [pc, #532]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 8001236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001238:	22f8      	movs	r2, #248	; 0xf8
 800123a:	4393      	bics	r3, r2
 800123c:	0019      	movs	r1, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	00da      	lsls	r2, r3, #3
 8001244:	4b81      	ldr	r3, [pc, #516]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 8001246:	430a      	orrs	r2, r1
 8001248:	635a      	str	r2, [r3, #52]	; 0x34
 800124a:	e034      	b.n	80012b6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	3305      	adds	r3, #5
 8001252:	d111      	bne.n	8001278 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001254:	4b7d      	ldr	r3, [pc, #500]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 8001256:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001258:	4b7c      	ldr	r3, [pc, #496]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 800125a:	2104      	movs	r1, #4
 800125c:	438a      	bics	r2, r1
 800125e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001260:	4b7a      	ldr	r3, [pc, #488]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 8001262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001264:	22f8      	movs	r2, #248	; 0xf8
 8001266:	4393      	bics	r3, r2
 8001268:	0019      	movs	r1, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	00da      	lsls	r2, r3, #3
 8001270:	4b76      	ldr	r3, [pc, #472]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 8001272:	430a      	orrs	r2, r1
 8001274:	635a      	str	r2, [r3, #52]	; 0x34
 8001276:	e01e      	b.n	80012b6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001278:	4b74      	ldr	r3, [pc, #464]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 800127a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800127c:	4b73      	ldr	r3, [pc, #460]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 800127e:	2104      	movs	r1, #4
 8001280:	430a      	orrs	r2, r1
 8001282:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001284:	4b71      	ldr	r3, [pc, #452]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 8001286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001288:	4b70      	ldr	r3, [pc, #448]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 800128a:	2101      	movs	r1, #1
 800128c:	438a      	bics	r2, r1
 800128e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001290:	f7ff fcbc 	bl	8000c0c <HAL_GetTick>
 8001294:	0003      	movs	r3, r0
 8001296:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001298:	e008      	b.n	80012ac <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800129a:	f7ff fcb7 	bl	8000c0c <HAL_GetTick>
 800129e:	0002      	movs	r2, r0
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e111      	b.n	80014d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80012ac:	4b67      	ldr	r3, [pc, #412]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 80012ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b0:	2202      	movs	r2, #2
 80012b2:	4013      	ands	r3, r2
 80012b4:	d1f1      	bne.n	800129a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2220      	movs	r2, #32
 80012bc:	4013      	ands	r3, r2
 80012be:	d05c      	beq.n	800137a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80012c0:	4b62      	ldr	r3, [pc, #392]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	220c      	movs	r2, #12
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b0c      	cmp	r3, #12
 80012ca:	d00e      	beq.n	80012ea <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80012cc:	4b5f      	ldr	r3, [pc, #380]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	220c      	movs	r2, #12
 80012d2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80012d4:	2b08      	cmp	r3, #8
 80012d6:	d114      	bne.n	8001302 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80012d8:	4b5c      	ldr	r3, [pc, #368]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	23c0      	movs	r3, #192	; 0xc0
 80012de:	025b      	lsls	r3, r3, #9
 80012e0:	401a      	ands	r2, r3
 80012e2:	23c0      	movs	r3, #192	; 0xc0
 80012e4:	025b      	lsls	r3, r3, #9
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d10b      	bne.n	8001302 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80012ea:	4b58      	ldr	r3, [pc, #352]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 80012ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012ee:	2380      	movs	r3, #128	; 0x80
 80012f0:	029b      	lsls	r3, r3, #10
 80012f2:	4013      	ands	r3, r2
 80012f4:	d040      	beq.n	8001378 <HAL_RCC_OscConfig+0x5a8>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a1b      	ldr	r3, [r3, #32]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d03c      	beq.n	8001378 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e0e6      	b.n	80014d0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a1b      	ldr	r3, [r3, #32]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d01b      	beq.n	8001342 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800130a:	4b50      	ldr	r3, [pc, #320]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 800130c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800130e:	4b4f      	ldr	r3, [pc, #316]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 8001310:	2180      	movs	r1, #128	; 0x80
 8001312:	0249      	lsls	r1, r1, #9
 8001314:	430a      	orrs	r2, r1
 8001316:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fc78 	bl	8000c0c <HAL_GetTick>
 800131c:	0003      	movs	r3, r0
 800131e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001322:	f7ff fc73 	bl	8000c0c <HAL_GetTick>
 8001326:	0002      	movs	r2, r0
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e0cd      	b.n	80014d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001334:	4b45      	ldr	r3, [pc, #276]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 8001336:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	029b      	lsls	r3, r3, #10
 800133c:	4013      	ands	r3, r2
 800133e:	d0f0      	beq.n	8001322 <HAL_RCC_OscConfig+0x552>
 8001340:	e01b      	b.n	800137a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001342:	4b42      	ldr	r3, [pc, #264]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 8001344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001346:	4b41      	ldr	r3, [pc, #260]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 8001348:	4943      	ldr	r1, [pc, #268]	; (8001458 <HAL_RCC_OscConfig+0x688>)
 800134a:	400a      	ands	r2, r1
 800134c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134e:	f7ff fc5d 	bl	8000c0c <HAL_GetTick>
 8001352:	0003      	movs	r3, r0
 8001354:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001358:	f7ff fc58 	bl	8000c0c <HAL_GetTick>
 800135c:	0002      	movs	r2, r0
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e0b2      	b.n	80014d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800136a:	4b38      	ldr	r3, [pc, #224]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 800136c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800136e:	2380      	movs	r3, #128	; 0x80
 8001370:	029b      	lsls	r3, r3, #10
 8001372:	4013      	ands	r3, r2
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0x588>
 8001376:	e000      	b.n	800137a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001378:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137e:	2b00      	cmp	r3, #0
 8001380:	d100      	bne.n	8001384 <HAL_RCC_OscConfig+0x5b4>
 8001382:	e0a4      	b.n	80014ce <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001384:	4b31      	ldr	r3, [pc, #196]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	220c      	movs	r2, #12
 800138a:	4013      	ands	r3, r2
 800138c:	2b08      	cmp	r3, #8
 800138e:	d100      	bne.n	8001392 <HAL_RCC_OscConfig+0x5c2>
 8001390:	e078      	b.n	8001484 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001396:	2b02      	cmp	r3, #2
 8001398:	d14c      	bne.n	8001434 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800139a:	4b2c      	ldr	r3, [pc, #176]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	4b2b      	ldr	r3, [pc, #172]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 80013a0:	492e      	ldr	r1, [pc, #184]	; (800145c <HAL_RCC_OscConfig+0x68c>)
 80013a2:	400a      	ands	r2, r1
 80013a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a6:	f7ff fc31 	bl	8000c0c <HAL_GetTick>
 80013aa:	0003      	movs	r3, r0
 80013ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013b0:	f7ff fc2c 	bl	8000c0c <HAL_GetTick>
 80013b4:	0002      	movs	r2, r0
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e086      	b.n	80014d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c2:	4b22      	ldr	r3, [pc, #136]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	2380      	movs	r3, #128	; 0x80
 80013c8:	049b      	lsls	r3, r3, #18
 80013ca:	4013      	ands	r3, r2
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013ce:	4b1f      	ldr	r3, [pc, #124]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 80013d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d2:	220f      	movs	r2, #15
 80013d4:	4393      	bics	r3, r2
 80013d6:	0019      	movs	r1, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013dc:	4b1b      	ldr	r3, [pc, #108]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 80013de:	430a      	orrs	r2, r1
 80013e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80013e2:	4b1a      	ldr	r3, [pc, #104]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	4a1e      	ldr	r2, [pc, #120]	; (8001460 <HAL_RCC_OscConfig+0x690>)
 80013e8:	4013      	ands	r3, r2
 80013ea:	0019      	movs	r1, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f4:	431a      	orrs	r2, r3
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 80013f8:	430a      	orrs	r2, r1
 80013fa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013fc:	4b13      	ldr	r3, [pc, #76]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 8001402:	2180      	movs	r1, #128	; 0x80
 8001404:	0449      	lsls	r1, r1, #17
 8001406:	430a      	orrs	r2, r1
 8001408:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140a:	f7ff fbff 	bl	8000c0c <HAL_GetTick>
 800140e:	0003      	movs	r3, r0
 8001410:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001414:	f7ff fbfa 	bl	8000c0c <HAL_GetTick>
 8001418:	0002      	movs	r2, r0
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e054      	b.n	80014d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	049b      	lsls	r3, r3, #18
 800142e:	4013      	ands	r3, r2
 8001430:	d0f0      	beq.n	8001414 <HAL_RCC_OscConfig+0x644>
 8001432:	e04c      	b.n	80014ce <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <HAL_RCC_OscConfig+0x67c>)
 800143a:	4908      	ldr	r1, [pc, #32]	; (800145c <HAL_RCC_OscConfig+0x68c>)
 800143c:	400a      	ands	r2, r1
 800143e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001440:	f7ff fbe4 	bl	8000c0c <HAL_GetTick>
 8001444:	0003      	movs	r3, r0
 8001446:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001448:	e015      	b.n	8001476 <HAL_RCC_OscConfig+0x6a6>
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	40021000 	.word	0x40021000
 8001450:	00001388 	.word	0x00001388
 8001454:	efffffff 	.word	0xefffffff
 8001458:	fffeffff 	.word	0xfffeffff
 800145c:	feffffff 	.word	0xfeffffff
 8001460:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001464:	f7ff fbd2 	bl	8000c0c <HAL_GetTick>
 8001468:	0002      	movs	r2, r0
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e02c      	b.n	80014d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001476:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <HAL_RCC_OscConfig+0x708>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	2380      	movs	r3, #128	; 0x80
 800147c:	049b      	lsls	r3, r3, #18
 800147e:	4013      	ands	r3, r2
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x694>
 8001482:	e024      	b.n	80014ce <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001488:	2b01      	cmp	r3, #1
 800148a:	d101      	bne.n	8001490 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e01f      	b.n	80014d0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <HAL_RCC_OscConfig+0x708>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <HAL_RCC_OscConfig+0x708>)
 8001498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	23c0      	movs	r3, #192	; 0xc0
 80014a0:	025b      	lsls	r3, r3, #9
 80014a2:	401a      	ands	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d10e      	bne.n	80014ca <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	220f      	movs	r2, #15
 80014b0:	401a      	ands	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d107      	bne.n	80014ca <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	23f0      	movs	r3, #240	; 0xf0
 80014be:	039b      	lsls	r3, r3, #14
 80014c0:	401a      	ands	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d001      	beq.n	80014ce <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e000      	b.n	80014d0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	0018      	movs	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	b008      	add	sp, #32
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40021000 	.word	0x40021000

080014dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e0bf      	b.n	8001670 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014f0:	4b61      	ldr	r3, [pc, #388]	; (8001678 <HAL_RCC_ClockConfig+0x19c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2201      	movs	r2, #1
 80014f6:	4013      	ands	r3, r2
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d911      	bls.n	8001522 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fe:	4b5e      	ldr	r3, [pc, #376]	; (8001678 <HAL_RCC_ClockConfig+0x19c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2201      	movs	r2, #1
 8001504:	4393      	bics	r3, r2
 8001506:	0019      	movs	r1, r3
 8001508:	4b5b      	ldr	r3, [pc, #364]	; (8001678 <HAL_RCC_ClockConfig+0x19c>)
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001510:	4b59      	ldr	r3, [pc, #356]	; (8001678 <HAL_RCC_ClockConfig+0x19c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2201      	movs	r2, #1
 8001516:	4013      	ands	r3, r2
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	429a      	cmp	r2, r3
 800151c:	d001      	beq.n	8001522 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e0a6      	b.n	8001670 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2202      	movs	r2, #2
 8001528:	4013      	ands	r3, r2
 800152a:	d015      	beq.n	8001558 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2204      	movs	r2, #4
 8001532:	4013      	ands	r3, r2
 8001534:	d006      	beq.n	8001544 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001536:	4b51      	ldr	r3, [pc, #324]	; (800167c <HAL_RCC_ClockConfig+0x1a0>)
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	4b50      	ldr	r3, [pc, #320]	; (800167c <HAL_RCC_ClockConfig+0x1a0>)
 800153c:	21e0      	movs	r1, #224	; 0xe0
 800153e:	00c9      	lsls	r1, r1, #3
 8001540:	430a      	orrs	r2, r1
 8001542:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001544:	4b4d      	ldr	r3, [pc, #308]	; (800167c <HAL_RCC_ClockConfig+0x1a0>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	22f0      	movs	r2, #240	; 0xf0
 800154a:	4393      	bics	r3, r2
 800154c:	0019      	movs	r1, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	4b4a      	ldr	r3, [pc, #296]	; (800167c <HAL_RCC_ClockConfig+0x1a0>)
 8001554:	430a      	orrs	r2, r1
 8001556:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2201      	movs	r2, #1
 800155e:	4013      	ands	r3, r2
 8001560:	d04c      	beq.n	80015fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d107      	bne.n	800157a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156a:	4b44      	ldr	r3, [pc, #272]	; (800167c <HAL_RCC_ClockConfig+0x1a0>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	029b      	lsls	r3, r3, #10
 8001572:	4013      	ands	r3, r2
 8001574:	d120      	bne.n	80015b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e07a      	b.n	8001670 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d107      	bne.n	8001592 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001582:	4b3e      	ldr	r3, [pc, #248]	; (800167c <HAL_RCC_ClockConfig+0x1a0>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	2380      	movs	r3, #128	; 0x80
 8001588:	049b      	lsls	r3, r3, #18
 800158a:	4013      	ands	r3, r2
 800158c:	d114      	bne.n	80015b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e06e      	b.n	8001670 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b03      	cmp	r3, #3
 8001598:	d107      	bne.n	80015aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800159a:	4b38      	ldr	r3, [pc, #224]	; (800167c <HAL_RCC_ClockConfig+0x1a0>)
 800159c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	029b      	lsls	r3, r3, #10
 80015a2:	4013      	ands	r3, r2
 80015a4:	d108      	bne.n	80015b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e062      	b.n	8001670 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015aa:	4b34      	ldr	r3, [pc, #208]	; (800167c <HAL_RCC_ClockConfig+0x1a0>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2202      	movs	r2, #2
 80015b0:	4013      	ands	r3, r2
 80015b2:	d101      	bne.n	80015b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e05b      	b.n	8001670 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015b8:	4b30      	ldr	r3, [pc, #192]	; (800167c <HAL_RCC_ClockConfig+0x1a0>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2203      	movs	r2, #3
 80015be:	4393      	bics	r3, r2
 80015c0:	0019      	movs	r1, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	4b2d      	ldr	r3, [pc, #180]	; (800167c <HAL_RCC_ClockConfig+0x1a0>)
 80015c8:	430a      	orrs	r2, r1
 80015ca:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015cc:	f7ff fb1e 	bl	8000c0c <HAL_GetTick>
 80015d0:	0003      	movs	r3, r0
 80015d2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015d4:	e009      	b.n	80015ea <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d6:	f7ff fb19 	bl	8000c0c <HAL_GetTick>
 80015da:	0002      	movs	r2, r0
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	4a27      	ldr	r2, [pc, #156]	; (8001680 <HAL_RCC_ClockConfig+0x1a4>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e042      	b.n	8001670 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ea:	4b24      	ldr	r3, [pc, #144]	; (800167c <HAL_RCC_ClockConfig+0x1a0>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	220c      	movs	r2, #12
 80015f0:	401a      	ands	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d1ec      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015fc:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <HAL_RCC_ClockConfig+0x19c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2201      	movs	r2, #1
 8001602:	4013      	ands	r3, r2
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	429a      	cmp	r2, r3
 8001608:	d211      	bcs.n	800162e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160a:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <HAL_RCC_ClockConfig+0x19c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2201      	movs	r2, #1
 8001610:	4393      	bics	r3, r2
 8001612:	0019      	movs	r1, r3
 8001614:	4b18      	ldr	r3, [pc, #96]	; (8001678 <HAL_RCC_ClockConfig+0x19c>)
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	430a      	orrs	r2, r1
 800161a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800161c:	4b16      	ldr	r3, [pc, #88]	; (8001678 <HAL_RCC_ClockConfig+0x19c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2201      	movs	r2, #1
 8001622:	4013      	ands	r3, r2
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d001      	beq.n	800162e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e020      	b.n	8001670 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2204      	movs	r2, #4
 8001634:	4013      	ands	r3, r2
 8001636:	d009      	beq.n	800164c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001638:	4b10      	ldr	r3, [pc, #64]	; (800167c <HAL_RCC_ClockConfig+0x1a0>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	4a11      	ldr	r2, [pc, #68]	; (8001684 <HAL_RCC_ClockConfig+0x1a8>)
 800163e:	4013      	ands	r3, r2
 8001640:	0019      	movs	r1, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68da      	ldr	r2, [r3, #12]
 8001646:	4b0d      	ldr	r3, [pc, #52]	; (800167c <HAL_RCC_ClockConfig+0x1a0>)
 8001648:	430a      	orrs	r2, r1
 800164a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800164c:	f000 f820 	bl	8001690 <HAL_RCC_GetSysClockFreq>
 8001650:	0001      	movs	r1, r0
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <HAL_RCC_ClockConfig+0x1a0>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	091b      	lsrs	r3, r3, #4
 8001658:	220f      	movs	r2, #15
 800165a:	4013      	ands	r3, r2
 800165c:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <HAL_RCC_ClockConfig+0x1ac>)
 800165e:	5cd3      	ldrb	r3, [r2, r3]
 8001660:	000a      	movs	r2, r1
 8001662:	40da      	lsrs	r2, r3
 8001664:	4b09      	ldr	r3, [pc, #36]	; (800168c <HAL_RCC_ClockConfig+0x1b0>)
 8001666:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001668:	2003      	movs	r0, #3
 800166a:	f7ff fa89 	bl	8000b80 <HAL_InitTick>
  
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	0018      	movs	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	b004      	add	sp, #16
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40022000 	.word	0x40022000
 800167c:	40021000 	.word	0x40021000
 8001680:	00001388 	.word	0x00001388
 8001684:	fffff8ff 	.word	0xfffff8ff
 8001688:	08002198 	.word	0x08002198
 800168c:	20000000 	.word	0x20000000

08001690 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	2300      	movs	r3, #0
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80016aa:	4b2d      	ldr	r3, [pc, #180]	; (8001760 <HAL_RCC_GetSysClockFreq+0xd0>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	220c      	movs	r2, #12
 80016b4:	4013      	ands	r3, r2
 80016b6:	2b0c      	cmp	r3, #12
 80016b8:	d046      	beq.n	8001748 <HAL_RCC_GetSysClockFreq+0xb8>
 80016ba:	d848      	bhi.n	800174e <HAL_RCC_GetSysClockFreq+0xbe>
 80016bc:	2b04      	cmp	r3, #4
 80016be:	d002      	beq.n	80016c6 <HAL_RCC_GetSysClockFreq+0x36>
 80016c0:	2b08      	cmp	r3, #8
 80016c2:	d003      	beq.n	80016cc <HAL_RCC_GetSysClockFreq+0x3c>
 80016c4:	e043      	b.n	800174e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016c6:	4b27      	ldr	r3, [pc, #156]	; (8001764 <HAL_RCC_GetSysClockFreq+0xd4>)
 80016c8:	613b      	str	r3, [r7, #16]
      break;
 80016ca:	e043      	b.n	8001754 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	0c9b      	lsrs	r3, r3, #18
 80016d0:	220f      	movs	r2, #15
 80016d2:	4013      	ands	r3, r2
 80016d4:	4a24      	ldr	r2, [pc, #144]	; (8001768 <HAL_RCC_GetSysClockFreq+0xd8>)
 80016d6:	5cd3      	ldrb	r3, [r2, r3]
 80016d8:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80016da:	4b21      	ldr	r3, [pc, #132]	; (8001760 <HAL_RCC_GetSysClockFreq+0xd0>)
 80016dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016de:	220f      	movs	r2, #15
 80016e0:	4013      	ands	r3, r2
 80016e2:	4a22      	ldr	r2, [pc, #136]	; (800176c <HAL_RCC_GetSysClockFreq+0xdc>)
 80016e4:	5cd3      	ldrb	r3, [r2, r3]
 80016e6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	23c0      	movs	r3, #192	; 0xc0
 80016ec:	025b      	lsls	r3, r3, #9
 80016ee:	401a      	ands	r2, r3
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	025b      	lsls	r3, r3, #9
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d109      	bne.n	800170c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80016f8:	68b9      	ldr	r1, [r7, #8]
 80016fa:	481a      	ldr	r0, [pc, #104]	; (8001764 <HAL_RCC_GetSysClockFreq+0xd4>)
 80016fc:	f7fe fd0c 	bl	8000118 <__udivsi3>
 8001700:	0003      	movs	r3, r0
 8001702:	001a      	movs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4353      	muls	r3, r2
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	e01a      	b.n	8001742 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	23c0      	movs	r3, #192	; 0xc0
 8001710:	025b      	lsls	r3, r3, #9
 8001712:	401a      	ands	r2, r3
 8001714:	23c0      	movs	r3, #192	; 0xc0
 8001716:	025b      	lsls	r3, r3, #9
 8001718:	429a      	cmp	r2, r3
 800171a:	d109      	bne.n	8001730 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800171c:	68b9      	ldr	r1, [r7, #8]
 800171e:	4814      	ldr	r0, [pc, #80]	; (8001770 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001720:	f7fe fcfa 	bl	8000118 <__udivsi3>
 8001724:	0003      	movs	r3, r0
 8001726:	001a      	movs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4353      	muls	r3, r2
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	e008      	b.n	8001742 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001730:	68b9      	ldr	r1, [r7, #8]
 8001732:	480c      	ldr	r0, [pc, #48]	; (8001764 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001734:	f7fe fcf0 	bl	8000118 <__udivsi3>
 8001738:	0003      	movs	r3, r0
 800173a:	001a      	movs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4353      	muls	r3, r2
 8001740:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	613b      	str	r3, [r7, #16]
      break;
 8001746:	e005      	b.n	8001754 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001748:	4b09      	ldr	r3, [pc, #36]	; (8001770 <HAL_RCC_GetSysClockFreq+0xe0>)
 800174a:	613b      	str	r3, [r7, #16]
      break;
 800174c:	e002      	b.n	8001754 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800174e:	4b05      	ldr	r3, [pc, #20]	; (8001764 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001750:	613b      	str	r3, [r7, #16]
      break;
 8001752:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001754:	693b      	ldr	r3, [r7, #16]
}
 8001756:	0018      	movs	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	b006      	add	sp, #24
 800175c:	bd80      	pop	{r7, pc}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	40021000 	.word	0x40021000
 8001764:	007a1200 	.word	0x007a1200
 8001768:	080021a8 	.word	0x080021a8
 800176c:	080021b8 	.word	0x080021b8
 8001770:	02dc6c00 	.word	0x02dc6c00

08001774 <sniprintf>:
 8001774:	b40c      	push	{r2, r3}
 8001776:	b530      	push	{r4, r5, lr}
 8001778:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <sniprintf+0x64>)
 800177a:	000c      	movs	r4, r1
 800177c:	681d      	ldr	r5, [r3, #0]
 800177e:	b09d      	sub	sp, #116	; 0x74
 8001780:	2900      	cmp	r1, #0
 8001782:	da08      	bge.n	8001796 <sniprintf+0x22>
 8001784:	238b      	movs	r3, #139	; 0x8b
 8001786:	2001      	movs	r0, #1
 8001788:	602b      	str	r3, [r5, #0]
 800178a:	4240      	negs	r0, r0
 800178c:	b01d      	add	sp, #116	; 0x74
 800178e:	bc30      	pop	{r4, r5}
 8001790:	bc08      	pop	{r3}
 8001792:	b002      	add	sp, #8
 8001794:	4718      	bx	r3
 8001796:	2382      	movs	r3, #130	; 0x82
 8001798:	466a      	mov	r2, sp
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	8293      	strh	r3, [r2, #20]
 800179e:	2300      	movs	r3, #0
 80017a0:	9002      	str	r0, [sp, #8]
 80017a2:	9006      	str	r0, [sp, #24]
 80017a4:	4299      	cmp	r1, r3
 80017a6:	d000      	beq.n	80017aa <sniprintf+0x36>
 80017a8:	1e4b      	subs	r3, r1, #1
 80017aa:	9304      	str	r3, [sp, #16]
 80017ac:	9307      	str	r3, [sp, #28]
 80017ae:	2301      	movs	r3, #1
 80017b0:	466a      	mov	r2, sp
 80017b2:	425b      	negs	r3, r3
 80017b4:	82d3      	strh	r3, [r2, #22]
 80017b6:	0028      	movs	r0, r5
 80017b8:	ab21      	add	r3, sp, #132	; 0x84
 80017ba:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80017bc:	a902      	add	r1, sp, #8
 80017be:	9301      	str	r3, [sp, #4]
 80017c0:	f000 f9a0 	bl	8001b04 <_svfiprintf_r>
 80017c4:	1c43      	adds	r3, r0, #1
 80017c6:	da01      	bge.n	80017cc <sniprintf+0x58>
 80017c8:	238b      	movs	r3, #139	; 0x8b
 80017ca:	602b      	str	r3, [r5, #0]
 80017cc:	2c00      	cmp	r4, #0
 80017ce:	d0dd      	beq.n	800178c <sniprintf+0x18>
 80017d0:	2200      	movs	r2, #0
 80017d2:	9b02      	ldr	r3, [sp, #8]
 80017d4:	701a      	strb	r2, [r3, #0]
 80017d6:	e7d9      	b.n	800178c <sniprintf+0x18>
 80017d8:	20000058 	.word	0x20000058

080017dc <memset>:
 80017dc:	0003      	movs	r3, r0
 80017de:	1882      	adds	r2, r0, r2
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d100      	bne.n	80017e6 <memset+0xa>
 80017e4:	4770      	bx	lr
 80017e6:	7019      	strb	r1, [r3, #0]
 80017e8:	3301      	adds	r3, #1
 80017ea:	e7f9      	b.n	80017e0 <memset+0x4>

080017ec <__errno>:
 80017ec:	4b01      	ldr	r3, [pc, #4]	; (80017f4 <__errno+0x8>)
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	4770      	bx	lr
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	20000058 	.word	0x20000058

080017f8 <__libc_init_array>:
 80017f8:	b570      	push	{r4, r5, r6, lr}
 80017fa:	2600      	movs	r6, #0
 80017fc:	4c0c      	ldr	r4, [pc, #48]	; (8001830 <__libc_init_array+0x38>)
 80017fe:	4d0d      	ldr	r5, [pc, #52]	; (8001834 <__libc_init_array+0x3c>)
 8001800:	1b64      	subs	r4, r4, r5
 8001802:	10a4      	asrs	r4, r4, #2
 8001804:	42a6      	cmp	r6, r4
 8001806:	d109      	bne.n	800181c <__libc_init_array+0x24>
 8001808:	2600      	movs	r6, #0
 800180a:	f000 fc6d 	bl	80020e8 <_init>
 800180e:	4c0a      	ldr	r4, [pc, #40]	; (8001838 <__libc_init_array+0x40>)
 8001810:	4d0a      	ldr	r5, [pc, #40]	; (800183c <__libc_init_array+0x44>)
 8001812:	1b64      	subs	r4, r4, r5
 8001814:	10a4      	asrs	r4, r4, #2
 8001816:	42a6      	cmp	r6, r4
 8001818:	d105      	bne.n	8001826 <__libc_init_array+0x2e>
 800181a:	bd70      	pop	{r4, r5, r6, pc}
 800181c:	00b3      	lsls	r3, r6, #2
 800181e:	58eb      	ldr	r3, [r5, r3]
 8001820:	4798      	blx	r3
 8001822:	3601      	adds	r6, #1
 8001824:	e7ee      	b.n	8001804 <__libc_init_array+0xc>
 8001826:	00b3      	lsls	r3, r6, #2
 8001828:	58eb      	ldr	r3, [r5, r3]
 800182a:	4798      	blx	r3
 800182c:	3601      	adds	r6, #1
 800182e:	e7f2      	b.n	8001816 <__libc_init_array+0x1e>
 8001830:	080021fc 	.word	0x080021fc
 8001834:	080021fc 	.word	0x080021fc
 8001838:	08002200 	.word	0x08002200
 800183c:	080021fc 	.word	0x080021fc

08001840 <__retarget_lock_acquire_recursive>:
 8001840:	4770      	bx	lr

08001842 <__retarget_lock_release_recursive>:
 8001842:	4770      	bx	lr

08001844 <_free_r>:
 8001844:	b570      	push	{r4, r5, r6, lr}
 8001846:	0005      	movs	r5, r0
 8001848:	2900      	cmp	r1, #0
 800184a:	d010      	beq.n	800186e <_free_r+0x2a>
 800184c:	1f0c      	subs	r4, r1, #4
 800184e:	6823      	ldr	r3, [r4, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	da00      	bge.n	8001856 <_free_r+0x12>
 8001854:	18e4      	adds	r4, r4, r3
 8001856:	0028      	movs	r0, r5
 8001858:	f000 f8e2 	bl	8001a20 <__malloc_lock>
 800185c:	4a1d      	ldr	r2, [pc, #116]	; (80018d4 <_free_r+0x90>)
 800185e:	6813      	ldr	r3, [r2, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d105      	bne.n	8001870 <_free_r+0x2c>
 8001864:	6063      	str	r3, [r4, #4]
 8001866:	6014      	str	r4, [r2, #0]
 8001868:	0028      	movs	r0, r5
 800186a:	f000 f8e1 	bl	8001a30 <__malloc_unlock>
 800186e:	bd70      	pop	{r4, r5, r6, pc}
 8001870:	42a3      	cmp	r3, r4
 8001872:	d908      	bls.n	8001886 <_free_r+0x42>
 8001874:	6820      	ldr	r0, [r4, #0]
 8001876:	1821      	adds	r1, r4, r0
 8001878:	428b      	cmp	r3, r1
 800187a:	d1f3      	bne.n	8001864 <_free_r+0x20>
 800187c:	6819      	ldr	r1, [r3, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	1809      	adds	r1, r1, r0
 8001882:	6021      	str	r1, [r4, #0]
 8001884:	e7ee      	b.n	8001864 <_free_r+0x20>
 8001886:	001a      	movs	r2, r3
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <_free_r+0x4e>
 800188e:	42a3      	cmp	r3, r4
 8001890:	d9f9      	bls.n	8001886 <_free_r+0x42>
 8001892:	6811      	ldr	r1, [r2, #0]
 8001894:	1850      	adds	r0, r2, r1
 8001896:	42a0      	cmp	r0, r4
 8001898:	d10b      	bne.n	80018b2 <_free_r+0x6e>
 800189a:	6820      	ldr	r0, [r4, #0]
 800189c:	1809      	adds	r1, r1, r0
 800189e:	1850      	adds	r0, r2, r1
 80018a0:	6011      	str	r1, [r2, #0]
 80018a2:	4283      	cmp	r3, r0
 80018a4:	d1e0      	bne.n	8001868 <_free_r+0x24>
 80018a6:	6818      	ldr	r0, [r3, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	1841      	adds	r1, r0, r1
 80018ac:	6011      	str	r1, [r2, #0]
 80018ae:	6053      	str	r3, [r2, #4]
 80018b0:	e7da      	b.n	8001868 <_free_r+0x24>
 80018b2:	42a0      	cmp	r0, r4
 80018b4:	d902      	bls.n	80018bc <_free_r+0x78>
 80018b6:	230c      	movs	r3, #12
 80018b8:	602b      	str	r3, [r5, #0]
 80018ba:	e7d5      	b.n	8001868 <_free_r+0x24>
 80018bc:	6820      	ldr	r0, [r4, #0]
 80018be:	1821      	adds	r1, r4, r0
 80018c0:	428b      	cmp	r3, r1
 80018c2:	d103      	bne.n	80018cc <_free_r+0x88>
 80018c4:	6819      	ldr	r1, [r3, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	1809      	adds	r1, r1, r0
 80018ca:	6021      	str	r1, [r4, #0]
 80018cc:	6063      	str	r3, [r4, #4]
 80018ce:	6054      	str	r4, [r2, #4]
 80018d0:	e7ca      	b.n	8001868 <_free_r+0x24>
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	200001c4 	.word	0x200001c4

080018d8 <sbrk_aligned>:
 80018d8:	b570      	push	{r4, r5, r6, lr}
 80018da:	4e0f      	ldr	r6, [pc, #60]	; (8001918 <sbrk_aligned+0x40>)
 80018dc:	000d      	movs	r5, r1
 80018de:	6831      	ldr	r1, [r6, #0]
 80018e0:	0004      	movs	r4, r0
 80018e2:	2900      	cmp	r1, #0
 80018e4:	d102      	bne.n	80018ec <sbrk_aligned+0x14>
 80018e6:	f000 fba1 	bl	800202c <_sbrk_r>
 80018ea:	6030      	str	r0, [r6, #0]
 80018ec:	0029      	movs	r1, r5
 80018ee:	0020      	movs	r0, r4
 80018f0:	f000 fb9c 	bl	800202c <_sbrk_r>
 80018f4:	1c43      	adds	r3, r0, #1
 80018f6:	d00a      	beq.n	800190e <sbrk_aligned+0x36>
 80018f8:	2303      	movs	r3, #3
 80018fa:	1cc5      	adds	r5, r0, #3
 80018fc:	439d      	bics	r5, r3
 80018fe:	42a8      	cmp	r0, r5
 8001900:	d007      	beq.n	8001912 <sbrk_aligned+0x3a>
 8001902:	1a29      	subs	r1, r5, r0
 8001904:	0020      	movs	r0, r4
 8001906:	f000 fb91 	bl	800202c <_sbrk_r>
 800190a:	3001      	adds	r0, #1
 800190c:	d101      	bne.n	8001912 <sbrk_aligned+0x3a>
 800190e:	2501      	movs	r5, #1
 8001910:	426d      	negs	r5, r5
 8001912:	0028      	movs	r0, r5
 8001914:	bd70      	pop	{r4, r5, r6, pc}
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	200001c8 	.word	0x200001c8

0800191c <_malloc_r>:
 800191c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800191e:	2203      	movs	r2, #3
 8001920:	1ccb      	adds	r3, r1, #3
 8001922:	4393      	bics	r3, r2
 8001924:	3308      	adds	r3, #8
 8001926:	0006      	movs	r6, r0
 8001928:	001f      	movs	r7, r3
 800192a:	2b0c      	cmp	r3, #12
 800192c:	d238      	bcs.n	80019a0 <_malloc_r+0x84>
 800192e:	270c      	movs	r7, #12
 8001930:	42b9      	cmp	r1, r7
 8001932:	d837      	bhi.n	80019a4 <_malloc_r+0x88>
 8001934:	0030      	movs	r0, r6
 8001936:	f000 f873 	bl	8001a20 <__malloc_lock>
 800193a:	4b38      	ldr	r3, [pc, #224]	; (8001a1c <_malloc_r+0x100>)
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	001c      	movs	r4, r3
 8001942:	2c00      	cmp	r4, #0
 8001944:	d133      	bne.n	80019ae <_malloc_r+0x92>
 8001946:	0039      	movs	r1, r7
 8001948:	0030      	movs	r0, r6
 800194a:	f7ff ffc5 	bl	80018d8 <sbrk_aligned>
 800194e:	0004      	movs	r4, r0
 8001950:	1c43      	adds	r3, r0, #1
 8001952:	d15e      	bne.n	8001a12 <_malloc_r+0xf6>
 8001954:	9b00      	ldr	r3, [sp, #0]
 8001956:	681c      	ldr	r4, [r3, #0]
 8001958:	0025      	movs	r5, r4
 800195a:	2d00      	cmp	r5, #0
 800195c:	d14e      	bne.n	80019fc <_malloc_r+0xe0>
 800195e:	2c00      	cmp	r4, #0
 8001960:	d051      	beq.n	8001a06 <_malloc_r+0xea>
 8001962:	6823      	ldr	r3, [r4, #0]
 8001964:	0029      	movs	r1, r5
 8001966:	18e3      	adds	r3, r4, r3
 8001968:	0030      	movs	r0, r6
 800196a:	9301      	str	r3, [sp, #4]
 800196c:	f000 fb5e 	bl	800202c <_sbrk_r>
 8001970:	9b01      	ldr	r3, [sp, #4]
 8001972:	4283      	cmp	r3, r0
 8001974:	d147      	bne.n	8001a06 <_malloc_r+0xea>
 8001976:	6823      	ldr	r3, [r4, #0]
 8001978:	0030      	movs	r0, r6
 800197a:	1aff      	subs	r7, r7, r3
 800197c:	0039      	movs	r1, r7
 800197e:	f7ff ffab 	bl	80018d8 <sbrk_aligned>
 8001982:	3001      	adds	r0, #1
 8001984:	d03f      	beq.n	8001a06 <_malloc_r+0xea>
 8001986:	6823      	ldr	r3, [r4, #0]
 8001988:	19db      	adds	r3, r3, r7
 800198a:	6023      	str	r3, [r4, #0]
 800198c:	9b00      	ldr	r3, [sp, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d040      	beq.n	8001a16 <_malloc_r+0xfa>
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	42a2      	cmp	r2, r4
 8001998:	d133      	bne.n	8001a02 <_malloc_r+0xe6>
 800199a:	2200      	movs	r2, #0
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	e014      	b.n	80019ca <_malloc_r+0xae>
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	dac5      	bge.n	8001930 <_malloc_r+0x14>
 80019a4:	230c      	movs	r3, #12
 80019a6:	2500      	movs	r5, #0
 80019a8:	6033      	str	r3, [r6, #0]
 80019aa:	0028      	movs	r0, r5
 80019ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80019ae:	6821      	ldr	r1, [r4, #0]
 80019b0:	1bc9      	subs	r1, r1, r7
 80019b2:	d420      	bmi.n	80019f6 <_malloc_r+0xda>
 80019b4:	290b      	cmp	r1, #11
 80019b6:	d918      	bls.n	80019ea <_malloc_r+0xce>
 80019b8:	19e2      	adds	r2, r4, r7
 80019ba:	6027      	str	r7, [r4, #0]
 80019bc:	42a3      	cmp	r3, r4
 80019be:	d112      	bne.n	80019e6 <_malloc_r+0xca>
 80019c0:	9b00      	ldr	r3, [sp, #0]
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	6863      	ldr	r3, [r4, #4]
 80019c6:	6011      	str	r1, [r2, #0]
 80019c8:	6053      	str	r3, [r2, #4]
 80019ca:	0030      	movs	r0, r6
 80019cc:	0025      	movs	r5, r4
 80019ce:	f000 f82f 	bl	8001a30 <__malloc_unlock>
 80019d2:	2207      	movs	r2, #7
 80019d4:	350b      	adds	r5, #11
 80019d6:	1d23      	adds	r3, r4, #4
 80019d8:	4395      	bics	r5, r2
 80019da:	1aea      	subs	r2, r5, r3
 80019dc:	429d      	cmp	r5, r3
 80019de:	d0e4      	beq.n	80019aa <_malloc_r+0x8e>
 80019e0:	1b5b      	subs	r3, r3, r5
 80019e2:	50a3      	str	r3, [r4, r2]
 80019e4:	e7e1      	b.n	80019aa <_malloc_r+0x8e>
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	e7ec      	b.n	80019c4 <_malloc_r+0xa8>
 80019ea:	6862      	ldr	r2, [r4, #4]
 80019ec:	42a3      	cmp	r3, r4
 80019ee:	d1d5      	bne.n	800199c <_malloc_r+0x80>
 80019f0:	9b00      	ldr	r3, [sp, #0]
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	e7e9      	b.n	80019ca <_malloc_r+0xae>
 80019f6:	0023      	movs	r3, r4
 80019f8:	6864      	ldr	r4, [r4, #4]
 80019fa:	e7a2      	b.n	8001942 <_malloc_r+0x26>
 80019fc:	002c      	movs	r4, r5
 80019fe:	686d      	ldr	r5, [r5, #4]
 8001a00:	e7ab      	b.n	800195a <_malloc_r+0x3e>
 8001a02:	0013      	movs	r3, r2
 8001a04:	e7c4      	b.n	8001990 <_malloc_r+0x74>
 8001a06:	230c      	movs	r3, #12
 8001a08:	0030      	movs	r0, r6
 8001a0a:	6033      	str	r3, [r6, #0]
 8001a0c:	f000 f810 	bl	8001a30 <__malloc_unlock>
 8001a10:	e7cb      	b.n	80019aa <_malloc_r+0x8e>
 8001a12:	6027      	str	r7, [r4, #0]
 8001a14:	e7d9      	b.n	80019ca <_malloc_r+0xae>
 8001a16:	605b      	str	r3, [r3, #4]
 8001a18:	deff      	udf	#255	; 0xff
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	200001c4 	.word	0x200001c4

08001a20 <__malloc_lock>:
 8001a20:	b510      	push	{r4, lr}
 8001a22:	4802      	ldr	r0, [pc, #8]	; (8001a2c <__malloc_lock+0xc>)
 8001a24:	f7ff ff0c 	bl	8001840 <__retarget_lock_acquire_recursive>
 8001a28:	bd10      	pop	{r4, pc}
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	200001c0 	.word	0x200001c0

08001a30 <__malloc_unlock>:
 8001a30:	b510      	push	{r4, lr}
 8001a32:	4802      	ldr	r0, [pc, #8]	; (8001a3c <__malloc_unlock+0xc>)
 8001a34:	f7ff ff05 	bl	8001842 <__retarget_lock_release_recursive>
 8001a38:	bd10      	pop	{r4, pc}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	200001c0 	.word	0x200001c0

08001a40 <__ssputs_r>:
 8001a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a42:	b085      	sub	sp, #20
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	9203      	str	r2, [sp, #12]
 8001a48:	688e      	ldr	r6, [r1, #8]
 8001a4a:	9a01      	ldr	r2, [sp, #4]
 8001a4c:	0007      	movs	r7, r0
 8001a4e:	000c      	movs	r4, r1
 8001a50:	680b      	ldr	r3, [r1, #0]
 8001a52:	4296      	cmp	r6, r2
 8001a54:	d831      	bhi.n	8001aba <__ssputs_r+0x7a>
 8001a56:	898a      	ldrh	r2, [r1, #12]
 8001a58:	2190      	movs	r1, #144	; 0x90
 8001a5a:	00c9      	lsls	r1, r1, #3
 8001a5c:	420a      	tst	r2, r1
 8001a5e:	d029      	beq.n	8001ab4 <__ssputs_r+0x74>
 8001a60:	2003      	movs	r0, #3
 8001a62:	6921      	ldr	r1, [r4, #16]
 8001a64:	1a5b      	subs	r3, r3, r1
 8001a66:	9302      	str	r3, [sp, #8]
 8001a68:	6963      	ldr	r3, [r4, #20]
 8001a6a:	4343      	muls	r3, r0
 8001a6c:	0fdd      	lsrs	r5, r3, #31
 8001a6e:	18ed      	adds	r5, r5, r3
 8001a70:	9b01      	ldr	r3, [sp, #4]
 8001a72:	9802      	ldr	r0, [sp, #8]
 8001a74:	3301      	adds	r3, #1
 8001a76:	181b      	adds	r3, r3, r0
 8001a78:	106d      	asrs	r5, r5, #1
 8001a7a:	42ab      	cmp	r3, r5
 8001a7c:	d900      	bls.n	8001a80 <__ssputs_r+0x40>
 8001a7e:	001d      	movs	r5, r3
 8001a80:	0552      	lsls	r2, r2, #21
 8001a82:	d529      	bpl.n	8001ad8 <__ssputs_r+0x98>
 8001a84:	0029      	movs	r1, r5
 8001a86:	0038      	movs	r0, r7
 8001a88:	f7ff ff48 	bl	800191c <_malloc_r>
 8001a8c:	1e06      	subs	r6, r0, #0
 8001a8e:	d02d      	beq.n	8001aec <__ssputs_r+0xac>
 8001a90:	9a02      	ldr	r2, [sp, #8]
 8001a92:	6921      	ldr	r1, [r4, #16]
 8001a94:	f000 fae7 	bl	8002066 <memcpy>
 8001a98:	89a2      	ldrh	r2, [r4, #12]
 8001a9a:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <__ssputs_r+0xc0>)
 8001a9c:	401a      	ands	r2, r3
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	81a3      	strh	r3, [r4, #12]
 8001aa4:	9b02      	ldr	r3, [sp, #8]
 8001aa6:	6126      	str	r6, [r4, #16]
 8001aa8:	18f6      	adds	r6, r6, r3
 8001aaa:	6026      	str	r6, [r4, #0]
 8001aac:	6165      	str	r5, [r4, #20]
 8001aae:	9e01      	ldr	r6, [sp, #4]
 8001ab0:	1aed      	subs	r5, r5, r3
 8001ab2:	60a5      	str	r5, [r4, #8]
 8001ab4:	9b01      	ldr	r3, [sp, #4]
 8001ab6:	429e      	cmp	r6, r3
 8001ab8:	d900      	bls.n	8001abc <__ssputs_r+0x7c>
 8001aba:	9e01      	ldr	r6, [sp, #4]
 8001abc:	0032      	movs	r2, r6
 8001abe:	9903      	ldr	r1, [sp, #12]
 8001ac0:	6820      	ldr	r0, [r4, #0]
 8001ac2:	f000 fa9f 	bl	8002004 <memmove>
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	68a3      	ldr	r3, [r4, #8]
 8001aca:	1b9b      	subs	r3, r3, r6
 8001acc:	60a3      	str	r3, [r4, #8]
 8001ace:	6823      	ldr	r3, [r4, #0]
 8001ad0:	199b      	adds	r3, r3, r6
 8001ad2:	6023      	str	r3, [r4, #0]
 8001ad4:	b005      	add	sp, #20
 8001ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ad8:	002a      	movs	r2, r5
 8001ada:	0038      	movs	r0, r7
 8001adc:	f000 facc 	bl	8002078 <_realloc_r>
 8001ae0:	1e06      	subs	r6, r0, #0
 8001ae2:	d1df      	bne.n	8001aa4 <__ssputs_r+0x64>
 8001ae4:	0038      	movs	r0, r7
 8001ae6:	6921      	ldr	r1, [r4, #16]
 8001ae8:	f7ff feac 	bl	8001844 <_free_r>
 8001aec:	230c      	movs	r3, #12
 8001aee:	2001      	movs	r0, #1
 8001af0:	603b      	str	r3, [r7, #0]
 8001af2:	89a2      	ldrh	r2, [r4, #12]
 8001af4:	3334      	adds	r3, #52	; 0x34
 8001af6:	4313      	orrs	r3, r2
 8001af8:	81a3      	strh	r3, [r4, #12]
 8001afa:	4240      	negs	r0, r0
 8001afc:	e7ea      	b.n	8001ad4 <__ssputs_r+0x94>
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	fffffb7f 	.word	0xfffffb7f

08001b04 <_svfiprintf_r>:
 8001b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b06:	b0a1      	sub	sp, #132	; 0x84
 8001b08:	9003      	str	r0, [sp, #12]
 8001b0a:	001d      	movs	r5, r3
 8001b0c:	898b      	ldrh	r3, [r1, #12]
 8001b0e:	000f      	movs	r7, r1
 8001b10:	0016      	movs	r6, r2
 8001b12:	061b      	lsls	r3, r3, #24
 8001b14:	d511      	bpl.n	8001b3a <_svfiprintf_r+0x36>
 8001b16:	690b      	ldr	r3, [r1, #16]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d10e      	bne.n	8001b3a <_svfiprintf_r+0x36>
 8001b1c:	2140      	movs	r1, #64	; 0x40
 8001b1e:	f7ff fefd 	bl	800191c <_malloc_r>
 8001b22:	6038      	str	r0, [r7, #0]
 8001b24:	6138      	str	r0, [r7, #16]
 8001b26:	2800      	cmp	r0, #0
 8001b28:	d105      	bne.n	8001b36 <_svfiprintf_r+0x32>
 8001b2a:	230c      	movs	r3, #12
 8001b2c:	9a03      	ldr	r2, [sp, #12]
 8001b2e:	3801      	subs	r0, #1
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	b021      	add	sp, #132	; 0x84
 8001b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b36:	2340      	movs	r3, #64	; 0x40
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	ac08      	add	r4, sp, #32
 8001b3e:	6163      	str	r3, [r4, #20]
 8001b40:	3320      	adds	r3, #32
 8001b42:	7663      	strb	r3, [r4, #25]
 8001b44:	3310      	adds	r3, #16
 8001b46:	76a3      	strb	r3, [r4, #26]
 8001b48:	9507      	str	r5, [sp, #28]
 8001b4a:	0035      	movs	r5, r6
 8001b4c:	782b      	ldrb	r3, [r5, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <_svfiprintf_r+0x52>
 8001b52:	2b25      	cmp	r3, #37	; 0x25
 8001b54:	d148      	bne.n	8001be8 <_svfiprintf_r+0xe4>
 8001b56:	1bab      	subs	r3, r5, r6
 8001b58:	9305      	str	r3, [sp, #20]
 8001b5a:	42b5      	cmp	r5, r6
 8001b5c:	d00b      	beq.n	8001b76 <_svfiprintf_r+0x72>
 8001b5e:	0032      	movs	r2, r6
 8001b60:	0039      	movs	r1, r7
 8001b62:	9803      	ldr	r0, [sp, #12]
 8001b64:	f7ff ff6c 	bl	8001a40 <__ssputs_r>
 8001b68:	3001      	adds	r0, #1
 8001b6a:	d100      	bne.n	8001b6e <_svfiprintf_r+0x6a>
 8001b6c:	e0af      	b.n	8001cce <_svfiprintf_r+0x1ca>
 8001b6e:	6963      	ldr	r3, [r4, #20]
 8001b70:	9a05      	ldr	r2, [sp, #20]
 8001b72:	189b      	adds	r3, r3, r2
 8001b74:	6163      	str	r3, [r4, #20]
 8001b76:	782b      	ldrb	r3, [r5, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d100      	bne.n	8001b7e <_svfiprintf_r+0x7a>
 8001b7c:	e0a7      	b.n	8001cce <_svfiprintf_r+0x1ca>
 8001b7e:	2201      	movs	r2, #1
 8001b80:	2300      	movs	r3, #0
 8001b82:	4252      	negs	r2, r2
 8001b84:	6062      	str	r2, [r4, #4]
 8001b86:	a904      	add	r1, sp, #16
 8001b88:	3254      	adds	r2, #84	; 0x54
 8001b8a:	1852      	adds	r2, r2, r1
 8001b8c:	1c6e      	adds	r6, r5, #1
 8001b8e:	6023      	str	r3, [r4, #0]
 8001b90:	60e3      	str	r3, [r4, #12]
 8001b92:	60a3      	str	r3, [r4, #8]
 8001b94:	7013      	strb	r3, [r2, #0]
 8001b96:	65a3      	str	r3, [r4, #88]	; 0x58
 8001b98:	4b55      	ldr	r3, [pc, #340]	; (8001cf0 <_svfiprintf_r+0x1ec>)
 8001b9a:	2205      	movs	r2, #5
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	7831      	ldrb	r1, [r6, #0]
 8001ba0:	9305      	str	r3, [sp, #20]
 8001ba2:	f000 fa55 	bl	8002050 <memchr>
 8001ba6:	1c75      	adds	r5, r6, #1
 8001ba8:	2800      	cmp	r0, #0
 8001baa:	d11f      	bne.n	8001bec <_svfiprintf_r+0xe8>
 8001bac:	6822      	ldr	r2, [r4, #0]
 8001bae:	06d3      	lsls	r3, r2, #27
 8001bb0:	d504      	bpl.n	8001bbc <_svfiprintf_r+0xb8>
 8001bb2:	2353      	movs	r3, #83	; 0x53
 8001bb4:	a904      	add	r1, sp, #16
 8001bb6:	185b      	adds	r3, r3, r1
 8001bb8:	2120      	movs	r1, #32
 8001bba:	7019      	strb	r1, [r3, #0]
 8001bbc:	0713      	lsls	r3, r2, #28
 8001bbe:	d504      	bpl.n	8001bca <_svfiprintf_r+0xc6>
 8001bc0:	2353      	movs	r3, #83	; 0x53
 8001bc2:	a904      	add	r1, sp, #16
 8001bc4:	185b      	adds	r3, r3, r1
 8001bc6:	212b      	movs	r1, #43	; 0x2b
 8001bc8:	7019      	strb	r1, [r3, #0]
 8001bca:	7833      	ldrb	r3, [r6, #0]
 8001bcc:	2b2a      	cmp	r3, #42	; 0x2a
 8001bce:	d016      	beq.n	8001bfe <_svfiprintf_r+0xfa>
 8001bd0:	0035      	movs	r5, r6
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	200a      	movs	r0, #10
 8001bd6:	68e3      	ldr	r3, [r4, #12]
 8001bd8:	782a      	ldrb	r2, [r5, #0]
 8001bda:	1c6e      	adds	r6, r5, #1
 8001bdc:	3a30      	subs	r2, #48	; 0x30
 8001bde:	2a09      	cmp	r2, #9
 8001be0:	d94e      	bls.n	8001c80 <_svfiprintf_r+0x17c>
 8001be2:	2900      	cmp	r1, #0
 8001be4:	d111      	bne.n	8001c0a <_svfiprintf_r+0x106>
 8001be6:	e017      	b.n	8001c18 <_svfiprintf_r+0x114>
 8001be8:	3501      	adds	r5, #1
 8001bea:	e7af      	b.n	8001b4c <_svfiprintf_r+0x48>
 8001bec:	9b05      	ldr	r3, [sp, #20]
 8001bee:	6822      	ldr	r2, [r4, #0]
 8001bf0:	1ac0      	subs	r0, r0, r3
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	4083      	lsls	r3, r0
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	002e      	movs	r6, r5
 8001bfa:	6023      	str	r3, [r4, #0]
 8001bfc:	e7cc      	b.n	8001b98 <_svfiprintf_r+0x94>
 8001bfe:	9b07      	ldr	r3, [sp, #28]
 8001c00:	1d19      	adds	r1, r3, #4
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	9107      	str	r1, [sp, #28]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	db01      	blt.n	8001c0e <_svfiprintf_r+0x10a>
 8001c0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8001c0c:	e004      	b.n	8001c18 <_svfiprintf_r+0x114>
 8001c0e:	425b      	negs	r3, r3
 8001c10:	60e3      	str	r3, [r4, #12]
 8001c12:	2302      	movs	r3, #2
 8001c14:	4313      	orrs	r3, r2
 8001c16:	6023      	str	r3, [r4, #0]
 8001c18:	782b      	ldrb	r3, [r5, #0]
 8001c1a:	2b2e      	cmp	r3, #46	; 0x2e
 8001c1c:	d10a      	bne.n	8001c34 <_svfiprintf_r+0x130>
 8001c1e:	786b      	ldrb	r3, [r5, #1]
 8001c20:	2b2a      	cmp	r3, #42	; 0x2a
 8001c22:	d135      	bne.n	8001c90 <_svfiprintf_r+0x18c>
 8001c24:	9b07      	ldr	r3, [sp, #28]
 8001c26:	3502      	adds	r5, #2
 8001c28:	1d1a      	adds	r2, r3, #4
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	9207      	str	r2, [sp, #28]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	db2b      	blt.n	8001c8a <_svfiprintf_r+0x186>
 8001c32:	9309      	str	r3, [sp, #36]	; 0x24
 8001c34:	4e2f      	ldr	r6, [pc, #188]	; (8001cf4 <_svfiprintf_r+0x1f0>)
 8001c36:	2203      	movs	r2, #3
 8001c38:	0030      	movs	r0, r6
 8001c3a:	7829      	ldrb	r1, [r5, #0]
 8001c3c:	f000 fa08 	bl	8002050 <memchr>
 8001c40:	2800      	cmp	r0, #0
 8001c42:	d006      	beq.n	8001c52 <_svfiprintf_r+0x14e>
 8001c44:	2340      	movs	r3, #64	; 0x40
 8001c46:	1b80      	subs	r0, r0, r6
 8001c48:	4083      	lsls	r3, r0
 8001c4a:	6822      	ldr	r2, [r4, #0]
 8001c4c:	3501      	adds	r5, #1
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	6023      	str	r3, [r4, #0]
 8001c52:	7829      	ldrb	r1, [r5, #0]
 8001c54:	2206      	movs	r2, #6
 8001c56:	4828      	ldr	r0, [pc, #160]	; (8001cf8 <_svfiprintf_r+0x1f4>)
 8001c58:	1c6e      	adds	r6, r5, #1
 8001c5a:	7621      	strb	r1, [r4, #24]
 8001c5c:	f000 f9f8 	bl	8002050 <memchr>
 8001c60:	2800      	cmp	r0, #0
 8001c62:	d03c      	beq.n	8001cde <_svfiprintf_r+0x1da>
 8001c64:	4b25      	ldr	r3, [pc, #148]	; (8001cfc <_svfiprintf_r+0x1f8>)
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d125      	bne.n	8001cb6 <_svfiprintf_r+0x1b2>
 8001c6a:	2207      	movs	r2, #7
 8001c6c:	9b07      	ldr	r3, [sp, #28]
 8001c6e:	3307      	adds	r3, #7
 8001c70:	4393      	bics	r3, r2
 8001c72:	3308      	adds	r3, #8
 8001c74:	9307      	str	r3, [sp, #28]
 8001c76:	6963      	ldr	r3, [r4, #20]
 8001c78:	9a04      	ldr	r2, [sp, #16]
 8001c7a:	189b      	adds	r3, r3, r2
 8001c7c:	6163      	str	r3, [r4, #20]
 8001c7e:	e764      	b.n	8001b4a <_svfiprintf_r+0x46>
 8001c80:	4343      	muls	r3, r0
 8001c82:	0035      	movs	r5, r6
 8001c84:	2101      	movs	r1, #1
 8001c86:	189b      	adds	r3, r3, r2
 8001c88:	e7a6      	b.n	8001bd8 <_svfiprintf_r+0xd4>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	425b      	negs	r3, r3
 8001c8e:	e7d0      	b.n	8001c32 <_svfiprintf_r+0x12e>
 8001c90:	2300      	movs	r3, #0
 8001c92:	200a      	movs	r0, #10
 8001c94:	001a      	movs	r2, r3
 8001c96:	3501      	adds	r5, #1
 8001c98:	6063      	str	r3, [r4, #4]
 8001c9a:	7829      	ldrb	r1, [r5, #0]
 8001c9c:	1c6e      	adds	r6, r5, #1
 8001c9e:	3930      	subs	r1, #48	; 0x30
 8001ca0:	2909      	cmp	r1, #9
 8001ca2:	d903      	bls.n	8001cac <_svfiprintf_r+0x1a8>
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0c5      	beq.n	8001c34 <_svfiprintf_r+0x130>
 8001ca8:	9209      	str	r2, [sp, #36]	; 0x24
 8001caa:	e7c3      	b.n	8001c34 <_svfiprintf_r+0x130>
 8001cac:	4342      	muls	r2, r0
 8001cae:	0035      	movs	r5, r6
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	1852      	adds	r2, r2, r1
 8001cb4:	e7f1      	b.n	8001c9a <_svfiprintf_r+0x196>
 8001cb6:	aa07      	add	r2, sp, #28
 8001cb8:	9200      	str	r2, [sp, #0]
 8001cba:	0021      	movs	r1, r4
 8001cbc:	003a      	movs	r2, r7
 8001cbe:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <_svfiprintf_r+0x1fc>)
 8001cc0:	9803      	ldr	r0, [sp, #12]
 8001cc2:	e000      	b.n	8001cc6 <_svfiprintf_r+0x1c2>
 8001cc4:	bf00      	nop
 8001cc6:	9004      	str	r0, [sp, #16]
 8001cc8:	9b04      	ldr	r3, [sp, #16]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	d1d3      	bne.n	8001c76 <_svfiprintf_r+0x172>
 8001cce:	89bb      	ldrh	r3, [r7, #12]
 8001cd0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001cd2:	065b      	lsls	r3, r3, #25
 8001cd4:	d400      	bmi.n	8001cd8 <_svfiprintf_r+0x1d4>
 8001cd6:	e72c      	b.n	8001b32 <_svfiprintf_r+0x2e>
 8001cd8:	2001      	movs	r0, #1
 8001cda:	4240      	negs	r0, r0
 8001cdc:	e729      	b.n	8001b32 <_svfiprintf_r+0x2e>
 8001cde:	aa07      	add	r2, sp, #28
 8001ce0:	9200      	str	r2, [sp, #0]
 8001ce2:	0021      	movs	r1, r4
 8001ce4:	003a      	movs	r2, r7
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <_svfiprintf_r+0x1fc>)
 8001ce8:	9803      	ldr	r0, [sp, #12]
 8001cea:	f000 f87b 	bl	8001de4 <_printf_i>
 8001cee:	e7ea      	b.n	8001cc6 <_svfiprintf_r+0x1c2>
 8001cf0:	080021c8 	.word	0x080021c8
 8001cf4:	080021ce 	.word	0x080021ce
 8001cf8:	080021d2 	.word	0x080021d2
 8001cfc:	00000000 	.word	0x00000000
 8001d00:	08001a41 	.word	0x08001a41

08001d04 <_printf_common>:
 8001d04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d06:	0016      	movs	r6, r2
 8001d08:	9301      	str	r3, [sp, #4]
 8001d0a:	688a      	ldr	r2, [r1, #8]
 8001d0c:	690b      	ldr	r3, [r1, #16]
 8001d0e:	000c      	movs	r4, r1
 8001d10:	9000      	str	r0, [sp, #0]
 8001d12:	4293      	cmp	r3, r2
 8001d14:	da00      	bge.n	8001d18 <_printf_common+0x14>
 8001d16:	0013      	movs	r3, r2
 8001d18:	0022      	movs	r2, r4
 8001d1a:	6033      	str	r3, [r6, #0]
 8001d1c:	3243      	adds	r2, #67	; 0x43
 8001d1e:	7812      	ldrb	r2, [r2, #0]
 8001d20:	2a00      	cmp	r2, #0
 8001d22:	d001      	beq.n	8001d28 <_printf_common+0x24>
 8001d24:	3301      	adds	r3, #1
 8001d26:	6033      	str	r3, [r6, #0]
 8001d28:	6823      	ldr	r3, [r4, #0]
 8001d2a:	069b      	lsls	r3, r3, #26
 8001d2c:	d502      	bpl.n	8001d34 <_printf_common+0x30>
 8001d2e:	6833      	ldr	r3, [r6, #0]
 8001d30:	3302      	adds	r3, #2
 8001d32:	6033      	str	r3, [r6, #0]
 8001d34:	6822      	ldr	r2, [r4, #0]
 8001d36:	2306      	movs	r3, #6
 8001d38:	0015      	movs	r5, r2
 8001d3a:	401d      	ands	r5, r3
 8001d3c:	421a      	tst	r2, r3
 8001d3e:	d027      	beq.n	8001d90 <_printf_common+0x8c>
 8001d40:	0023      	movs	r3, r4
 8001d42:	3343      	adds	r3, #67	; 0x43
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	1e5a      	subs	r2, r3, #1
 8001d48:	4193      	sbcs	r3, r2
 8001d4a:	6822      	ldr	r2, [r4, #0]
 8001d4c:	0692      	lsls	r2, r2, #26
 8001d4e:	d430      	bmi.n	8001db2 <_printf_common+0xae>
 8001d50:	0022      	movs	r2, r4
 8001d52:	9901      	ldr	r1, [sp, #4]
 8001d54:	9800      	ldr	r0, [sp, #0]
 8001d56:	9d08      	ldr	r5, [sp, #32]
 8001d58:	3243      	adds	r2, #67	; 0x43
 8001d5a:	47a8      	blx	r5
 8001d5c:	3001      	adds	r0, #1
 8001d5e:	d025      	beq.n	8001dac <_printf_common+0xa8>
 8001d60:	2206      	movs	r2, #6
 8001d62:	6823      	ldr	r3, [r4, #0]
 8001d64:	2500      	movs	r5, #0
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d105      	bne.n	8001d78 <_printf_common+0x74>
 8001d6c:	6833      	ldr	r3, [r6, #0]
 8001d6e:	68e5      	ldr	r5, [r4, #12]
 8001d70:	1aed      	subs	r5, r5, r3
 8001d72:	43eb      	mvns	r3, r5
 8001d74:	17db      	asrs	r3, r3, #31
 8001d76:	401d      	ands	r5, r3
 8001d78:	68a3      	ldr	r3, [r4, #8]
 8001d7a:	6922      	ldr	r2, [r4, #16]
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	dd01      	ble.n	8001d84 <_printf_common+0x80>
 8001d80:	1a9b      	subs	r3, r3, r2
 8001d82:	18ed      	adds	r5, r5, r3
 8001d84:	2600      	movs	r6, #0
 8001d86:	42b5      	cmp	r5, r6
 8001d88:	d120      	bne.n	8001dcc <_printf_common+0xc8>
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	e010      	b.n	8001db0 <_printf_common+0xac>
 8001d8e:	3501      	adds	r5, #1
 8001d90:	68e3      	ldr	r3, [r4, #12]
 8001d92:	6832      	ldr	r2, [r6, #0]
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	42ab      	cmp	r3, r5
 8001d98:	ddd2      	ble.n	8001d40 <_printf_common+0x3c>
 8001d9a:	0022      	movs	r2, r4
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	9901      	ldr	r1, [sp, #4]
 8001da0:	9800      	ldr	r0, [sp, #0]
 8001da2:	9f08      	ldr	r7, [sp, #32]
 8001da4:	3219      	adds	r2, #25
 8001da6:	47b8      	blx	r7
 8001da8:	3001      	adds	r0, #1
 8001daa:	d1f0      	bne.n	8001d8e <_printf_common+0x8a>
 8001dac:	2001      	movs	r0, #1
 8001dae:	4240      	negs	r0, r0
 8001db0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001db2:	2030      	movs	r0, #48	; 0x30
 8001db4:	18e1      	adds	r1, r4, r3
 8001db6:	3143      	adds	r1, #67	; 0x43
 8001db8:	7008      	strb	r0, [r1, #0]
 8001dba:	0021      	movs	r1, r4
 8001dbc:	1c5a      	adds	r2, r3, #1
 8001dbe:	3145      	adds	r1, #69	; 0x45
 8001dc0:	7809      	ldrb	r1, [r1, #0]
 8001dc2:	18a2      	adds	r2, r4, r2
 8001dc4:	3243      	adds	r2, #67	; 0x43
 8001dc6:	3302      	adds	r3, #2
 8001dc8:	7011      	strb	r1, [r2, #0]
 8001dca:	e7c1      	b.n	8001d50 <_printf_common+0x4c>
 8001dcc:	0022      	movs	r2, r4
 8001dce:	2301      	movs	r3, #1
 8001dd0:	9901      	ldr	r1, [sp, #4]
 8001dd2:	9800      	ldr	r0, [sp, #0]
 8001dd4:	9f08      	ldr	r7, [sp, #32]
 8001dd6:	321a      	adds	r2, #26
 8001dd8:	47b8      	blx	r7
 8001dda:	3001      	adds	r0, #1
 8001ddc:	d0e6      	beq.n	8001dac <_printf_common+0xa8>
 8001dde:	3601      	adds	r6, #1
 8001de0:	e7d1      	b.n	8001d86 <_printf_common+0x82>
	...

08001de4 <_printf_i>:
 8001de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001de6:	b08b      	sub	sp, #44	; 0x2c
 8001de8:	9206      	str	r2, [sp, #24]
 8001dea:	000a      	movs	r2, r1
 8001dec:	3243      	adds	r2, #67	; 0x43
 8001dee:	9307      	str	r3, [sp, #28]
 8001df0:	9005      	str	r0, [sp, #20]
 8001df2:	9204      	str	r2, [sp, #16]
 8001df4:	7e0a      	ldrb	r2, [r1, #24]
 8001df6:	000c      	movs	r4, r1
 8001df8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001dfa:	2a78      	cmp	r2, #120	; 0x78
 8001dfc:	d809      	bhi.n	8001e12 <_printf_i+0x2e>
 8001dfe:	2a62      	cmp	r2, #98	; 0x62
 8001e00:	d80b      	bhi.n	8001e1a <_printf_i+0x36>
 8001e02:	2a00      	cmp	r2, #0
 8001e04:	d100      	bne.n	8001e08 <_printf_i+0x24>
 8001e06:	e0be      	b.n	8001f86 <_printf_i+0x1a2>
 8001e08:	497c      	ldr	r1, [pc, #496]	; (8001ffc <_printf_i+0x218>)
 8001e0a:	9103      	str	r1, [sp, #12]
 8001e0c:	2a58      	cmp	r2, #88	; 0x58
 8001e0e:	d100      	bne.n	8001e12 <_printf_i+0x2e>
 8001e10:	e093      	b.n	8001f3a <_printf_i+0x156>
 8001e12:	0026      	movs	r6, r4
 8001e14:	3642      	adds	r6, #66	; 0x42
 8001e16:	7032      	strb	r2, [r6, #0]
 8001e18:	e022      	b.n	8001e60 <_printf_i+0x7c>
 8001e1a:	0010      	movs	r0, r2
 8001e1c:	3863      	subs	r0, #99	; 0x63
 8001e1e:	2815      	cmp	r0, #21
 8001e20:	d8f7      	bhi.n	8001e12 <_printf_i+0x2e>
 8001e22:	f7fe f96f 	bl	8000104 <__gnu_thumb1_case_shi>
 8001e26:	0016      	.short	0x0016
 8001e28:	fff6001f 	.word	0xfff6001f
 8001e2c:	fff6fff6 	.word	0xfff6fff6
 8001e30:	001ffff6 	.word	0x001ffff6
 8001e34:	fff6fff6 	.word	0xfff6fff6
 8001e38:	fff6fff6 	.word	0xfff6fff6
 8001e3c:	003600a3 	.word	0x003600a3
 8001e40:	fff60083 	.word	0xfff60083
 8001e44:	00b4fff6 	.word	0x00b4fff6
 8001e48:	0036fff6 	.word	0x0036fff6
 8001e4c:	fff6fff6 	.word	0xfff6fff6
 8001e50:	0087      	.short	0x0087
 8001e52:	0026      	movs	r6, r4
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	3642      	adds	r6, #66	; 0x42
 8001e58:	1d11      	adds	r1, r2, #4
 8001e5a:	6019      	str	r1, [r3, #0]
 8001e5c:	6813      	ldr	r3, [r2, #0]
 8001e5e:	7033      	strb	r3, [r6, #0]
 8001e60:	2301      	movs	r3, #1
 8001e62:	e0a2      	b.n	8001faa <_printf_i+0x1c6>
 8001e64:	6818      	ldr	r0, [r3, #0]
 8001e66:	6809      	ldr	r1, [r1, #0]
 8001e68:	1d02      	adds	r2, r0, #4
 8001e6a:	060d      	lsls	r5, r1, #24
 8001e6c:	d50b      	bpl.n	8001e86 <_printf_i+0xa2>
 8001e6e:	6805      	ldr	r5, [r0, #0]
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	2d00      	cmp	r5, #0
 8001e74:	da03      	bge.n	8001e7e <_printf_i+0x9a>
 8001e76:	232d      	movs	r3, #45	; 0x2d
 8001e78:	9a04      	ldr	r2, [sp, #16]
 8001e7a:	426d      	negs	r5, r5
 8001e7c:	7013      	strb	r3, [r2, #0]
 8001e7e:	4b5f      	ldr	r3, [pc, #380]	; (8001ffc <_printf_i+0x218>)
 8001e80:	270a      	movs	r7, #10
 8001e82:	9303      	str	r3, [sp, #12]
 8001e84:	e01b      	b.n	8001ebe <_printf_i+0xda>
 8001e86:	6805      	ldr	r5, [r0, #0]
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	0649      	lsls	r1, r1, #25
 8001e8c:	d5f1      	bpl.n	8001e72 <_printf_i+0x8e>
 8001e8e:	b22d      	sxth	r5, r5
 8001e90:	e7ef      	b.n	8001e72 <_printf_i+0x8e>
 8001e92:	680d      	ldr	r5, [r1, #0]
 8001e94:	6819      	ldr	r1, [r3, #0]
 8001e96:	1d08      	adds	r0, r1, #4
 8001e98:	6018      	str	r0, [r3, #0]
 8001e9a:	062e      	lsls	r6, r5, #24
 8001e9c:	d501      	bpl.n	8001ea2 <_printf_i+0xbe>
 8001e9e:	680d      	ldr	r5, [r1, #0]
 8001ea0:	e003      	b.n	8001eaa <_printf_i+0xc6>
 8001ea2:	066d      	lsls	r5, r5, #25
 8001ea4:	d5fb      	bpl.n	8001e9e <_printf_i+0xba>
 8001ea6:	680d      	ldr	r5, [r1, #0]
 8001ea8:	b2ad      	uxth	r5, r5
 8001eaa:	4b54      	ldr	r3, [pc, #336]	; (8001ffc <_printf_i+0x218>)
 8001eac:	2708      	movs	r7, #8
 8001eae:	9303      	str	r3, [sp, #12]
 8001eb0:	2a6f      	cmp	r2, #111	; 0x6f
 8001eb2:	d000      	beq.n	8001eb6 <_printf_i+0xd2>
 8001eb4:	3702      	adds	r7, #2
 8001eb6:	0023      	movs	r3, r4
 8001eb8:	2200      	movs	r2, #0
 8001eba:	3343      	adds	r3, #67	; 0x43
 8001ebc:	701a      	strb	r2, [r3, #0]
 8001ebe:	6863      	ldr	r3, [r4, #4]
 8001ec0:	60a3      	str	r3, [r4, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	db03      	blt.n	8001ece <_printf_i+0xea>
 8001ec6:	2104      	movs	r1, #4
 8001ec8:	6822      	ldr	r2, [r4, #0]
 8001eca:	438a      	bics	r2, r1
 8001ecc:	6022      	str	r2, [r4, #0]
 8001ece:	2d00      	cmp	r5, #0
 8001ed0:	d102      	bne.n	8001ed8 <_printf_i+0xf4>
 8001ed2:	9e04      	ldr	r6, [sp, #16]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00c      	beq.n	8001ef2 <_printf_i+0x10e>
 8001ed8:	9e04      	ldr	r6, [sp, #16]
 8001eda:	0028      	movs	r0, r5
 8001edc:	0039      	movs	r1, r7
 8001ede:	f7fe f9a1 	bl	8000224 <__aeabi_uidivmod>
 8001ee2:	9b03      	ldr	r3, [sp, #12]
 8001ee4:	3e01      	subs	r6, #1
 8001ee6:	5c5b      	ldrb	r3, [r3, r1]
 8001ee8:	7033      	strb	r3, [r6, #0]
 8001eea:	002b      	movs	r3, r5
 8001eec:	0005      	movs	r5, r0
 8001eee:	429f      	cmp	r7, r3
 8001ef0:	d9f3      	bls.n	8001eda <_printf_i+0xf6>
 8001ef2:	2f08      	cmp	r7, #8
 8001ef4:	d109      	bne.n	8001f0a <_printf_i+0x126>
 8001ef6:	6823      	ldr	r3, [r4, #0]
 8001ef8:	07db      	lsls	r3, r3, #31
 8001efa:	d506      	bpl.n	8001f0a <_printf_i+0x126>
 8001efc:	6862      	ldr	r2, [r4, #4]
 8001efe:	6923      	ldr	r3, [r4, #16]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	dc02      	bgt.n	8001f0a <_printf_i+0x126>
 8001f04:	2330      	movs	r3, #48	; 0x30
 8001f06:	3e01      	subs	r6, #1
 8001f08:	7033      	strb	r3, [r6, #0]
 8001f0a:	9b04      	ldr	r3, [sp, #16]
 8001f0c:	1b9b      	subs	r3, r3, r6
 8001f0e:	6123      	str	r3, [r4, #16]
 8001f10:	9b07      	ldr	r3, [sp, #28]
 8001f12:	0021      	movs	r1, r4
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	9805      	ldr	r0, [sp, #20]
 8001f18:	9b06      	ldr	r3, [sp, #24]
 8001f1a:	aa09      	add	r2, sp, #36	; 0x24
 8001f1c:	f7ff fef2 	bl	8001d04 <_printf_common>
 8001f20:	3001      	adds	r0, #1
 8001f22:	d147      	bne.n	8001fb4 <_printf_i+0x1d0>
 8001f24:	2001      	movs	r0, #1
 8001f26:	4240      	negs	r0, r0
 8001f28:	b00b      	add	sp, #44	; 0x2c
 8001f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	6809      	ldr	r1, [r1, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	6022      	str	r2, [r4, #0]
 8001f34:	2278      	movs	r2, #120	; 0x78
 8001f36:	4932      	ldr	r1, [pc, #200]	; (8002000 <_printf_i+0x21c>)
 8001f38:	9103      	str	r1, [sp, #12]
 8001f3a:	0021      	movs	r1, r4
 8001f3c:	3145      	adds	r1, #69	; 0x45
 8001f3e:	700a      	strb	r2, [r1, #0]
 8001f40:	6819      	ldr	r1, [r3, #0]
 8001f42:	6822      	ldr	r2, [r4, #0]
 8001f44:	c920      	ldmia	r1!, {r5}
 8001f46:	0610      	lsls	r0, r2, #24
 8001f48:	d402      	bmi.n	8001f50 <_printf_i+0x16c>
 8001f4a:	0650      	lsls	r0, r2, #25
 8001f4c:	d500      	bpl.n	8001f50 <_printf_i+0x16c>
 8001f4e:	b2ad      	uxth	r5, r5
 8001f50:	6019      	str	r1, [r3, #0]
 8001f52:	07d3      	lsls	r3, r2, #31
 8001f54:	d502      	bpl.n	8001f5c <_printf_i+0x178>
 8001f56:	2320      	movs	r3, #32
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	6023      	str	r3, [r4, #0]
 8001f5c:	2710      	movs	r7, #16
 8001f5e:	2d00      	cmp	r5, #0
 8001f60:	d1a9      	bne.n	8001eb6 <_printf_i+0xd2>
 8001f62:	2220      	movs	r2, #32
 8001f64:	6823      	ldr	r3, [r4, #0]
 8001f66:	4393      	bics	r3, r2
 8001f68:	6023      	str	r3, [r4, #0]
 8001f6a:	e7a4      	b.n	8001eb6 <_printf_i+0xd2>
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	680d      	ldr	r5, [r1, #0]
 8001f70:	1d10      	adds	r0, r2, #4
 8001f72:	6949      	ldr	r1, [r1, #20]
 8001f74:	6018      	str	r0, [r3, #0]
 8001f76:	6813      	ldr	r3, [r2, #0]
 8001f78:	062e      	lsls	r6, r5, #24
 8001f7a:	d501      	bpl.n	8001f80 <_printf_i+0x19c>
 8001f7c:	6019      	str	r1, [r3, #0]
 8001f7e:	e002      	b.n	8001f86 <_printf_i+0x1a2>
 8001f80:	066d      	lsls	r5, r5, #25
 8001f82:	d5fb      	bpl.n	8001f7c <_printf_i+0x198>
 8001f84:	8019      	strh	r1, [r3, #0]
 8001f86:	2300      	movs	r3, #0
 8001f88:	9e04      	ldr	r6, [sp, #16]
 8001f8a:	6123      	str	r3, [r4, #16]
 8001f8c:	e7c0      	b.n	8001f10 <_printf_i+0x12c>
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	1d11      	adds	r1, r2, #4
 8001f92:	6019      	str	r1, [r3, #0]
 8001f94:	6816      	ldr	r6, [r2, #0]
 8001f96:	2100      	movs	r1, #0
 8001f98:	0030      	movs	r0, r6
 8001f9a:	6862      	ldr	r2, [r4, #4]
 8001f9c:	f000 f858 	bl	8002050 <memchr>
 8001fa0:	2800      	cmp	r0, #0
 8001fa2:	d001      	beq.n	8001fa8 <_printf_i+0x1c4>
 8001fa4:	1b80      	subs	r0, r0, r6
 8001fa6:	6060      	str	r0, [r4, #4]
 8001fa8:	6863      	ldr	r3, [r4, #4]
 8001faa:	6123      	str	r3, [r4, #16]
 8001fac:	2300      	movs	r3, #0
 8001fae:	9a04      	ldr	r2, [sp, #16]
 8001fb0:	7013      	strb	r3, [r2, #0]
 8001fb2:	e7ad      	b.n	8001f10 <_printf_i+0x12c>
 8001fb4:	0032      	movs	r2, r6
 8001fb6:	6923      	ldr	r3, [r4, #16]
 8001fb8:	9906      	ldr	r1, [sp, #24]
 8001fba:	9805      	ldr	r0, [sp, #20]
 8001fbc:	9d07      	ldr	r5, [sp, #28]
 8001fbe:	47a8      	blx	r5
 8001fc0:	3001      	adds	r0, #1
 8001fc2:	d0af      	beq.n	8001f24 <_printf_i+0x140>
 8001fc4:	6823      	ldr	r3, [r4, #0]
 8001fc6:	079b      	lsls	r3, r3, #30
 8001fc8:	d415      	bmi.n	8001ff6 <_printf_i+0x212>
 8001fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001fcc:	68e0      	ldr	r0, [r4, #12]
 8001fce:	4298      	cmp	r0, r3
 8001fd0:	daaa      	bge.n	8001f28 <_printf_i+0x144>
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	e7a8      	b.n	8001f28 <_printf_i+0x144>
 8001fd6:	0022      	movs	r2, r4
 8001fd8:	2301      	movs	r3, #1
 8001fda:	9906      	ldr	r1, [sp, #24]
 8001fdc:	9805      	ldr	r0, [sp, #20]
 8001fde:	9e07      	ldr	r6, [sp, #28]
 8001fe0:	3219      	adds	r2, #25
 8001fe2:	47b0      	blx	r6
 8001fe4:	3001      	adds	r0, #1
 8001fe6:	d09d      	beq.n	8001f24 <_printf_i+0x140>
 8001fe8:	3501      	adds	r5, #1
 8001fea:	68e3      	ldr	r3, [r4, #12]
 8001fec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001fee:	1a9b      	subs	r3, r3, r2
 8001ff0:	42ab      	cmp	r3, r5
 8001ff2:	dcf0      	bgt.n	8001fd6 <_printf_i+0x1f2>
 8001ff4:	e7e9      	b.n	8001fca <_printf_i+0x1e6>
 8001ff6:	2500      	movs	r5, #0
 8001ff8:	e7f7      	b.n	8001fea <_printf_i+0x206>
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	080021d9 	.word	0x080021d9
 8002000:	080021ea 	.word	0x080021ea

08002004 <memmove>:
 8002004:	b510      	push	{r4, lr}
 8002006:	4288      	cmp	r0, r1
 8002008:	d902      	bls.n	8002010 <memmove+0xc>
 800200a:	188b      	adds	r3, r1, r2
 800200c:	4298      	cmp	r0, r3
 800200e:	d303      	bcc.n	8002018 <memmove+0x14>
 8002010:	2300      	movs	r3, #0
 8002012:	e007      	b.n	8002024 <memmove+0x20>
 8002014:	5c8b      	ldrb	r3, [r1, r2]
 8002016:	5483      	strb	r3, [r0, r2]
 8002018:	3a01      	subs	r2, #1
 800201a:	d2fb      	bcs.n	8002014 <memmove+0x10>
 800201c:	bd10      	pop	{r4, pc}
 800201e:	5ccc      	ldrb	r4, [r1, r3]
 8002020:	54c4      	strb	r4, [r0, r3]
 8002022:	3301      	adds	r3, #1
 8002024:	429a      	cmp	r2, r3
 8002026:	d1fa      	bne.n	800201e <memmove+0x1a>
 8002028:	e7f8      	b.n	800201c <memmove+0x18>
	...

0800202c <_sbrk_r>:
 800202c:	2300      	movs	r3, #0
 800202e:	b570      	push	{r4, r5, r6, lr}
 8002030:	4d06      	ldr	r5, [pc, #24]	; (800204c <_sbrk_r+0x20>)
 8002032:	0004      	movs	r4, r0
 8002034:	0008      	movs	r0, r1
 8002036:	602b      	str	r3, [r5, #0]
 8002038:	f7fe fd28 	bl	8000a8c <_sbrk>
 800203c:	1c43      	adds	r3, r0, #1
 800203e:	d103      	bne.n	8002048 <_sbrk_r+0x1c>
 8002040:	682b      	ldr	r3, [r5, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d000      	beq.n	8002048 <_sbrk_r+0x1c>
 8002046:	6023      	str	r3, [r4, #0]
 8002048:	bd70      	pop	{r4, r5, r6, pc}
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	200001bc 	.word	0x200001bc

08002050 <memchr>:
 8002050:	b2c9      	uxtb	r1, r1
 8002052:	1882      	adds	r2, r0, r2
 8002054:	4290      	cmp	r0, r2
 8002056:	d101      	bne.n	800205c <memchr+0xc>
 8002058:	2000      	movs	r0, #0
 800205a:	4770      	bx	lr
 800205c:	7803      	ldrb	r3, [r0, #0]
 800205e:	428b      	cmp	r3, r1
 8002060:	d0fb      	beq.n	800205a <memchr+0xa>
 8002062:	3001      	adds	r0, #1
 8002064:	e7f6      	b.n	8002054 <memchr+0x4>

08002066 <memcpy>:
 8002066:	2300      	movs	r3, #0
 8002068:	b510      	push	{r4, lr}
 800206a:	429a      	cmp	r2, r3
 800206c:	d100      	bne.n	8002070 <memcpy+0xa>
 800206e:	bd10      	pop	{r4, pc}
 8002070:	5ccc      	ldrb	r4, [r1, r3]
 8002072:	54c4      	strb	r4, [r0, r3]
 8002074:	3301      	adds	r3, #1
 8002076:	e7f8      	b.n	800206a <memcpy+0x4>

08002078 <_realloc_r>:
 8002078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800207a:	0007      	movs	r7, r0
 800207c:	000e      	movs	r6, r1
 800207e:	0014      	movs	r4, r2
 8002080:	2900      	cmp	r1, #0
 8002082:	d105      	bne.n	8002090 <_realloc_r+0x18>
 8002084:	0011      	movs	r1, r2
 8002086:	f7ff fc49 	bl	800191c <_malloc_r>
 800208a:	0005      	movs	r5, r0
 800208c:	0028      	movs	r0, r5
 800208e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002090:	2a00      	cmp	r2, #0
 8002092:	d103      	bne.n	800209c <_realloc_r+0x24>
 8002094:	f7ff fbd6 	bl	8001844 <_free_r>
 8002098:	0025      	movs	r5, r4
 800209a:	e7f7      	b.n	800208c <_realloc_r+0x14>
 800209c:	f000 f81b 	bl	80020d6 <_malloc_usable_size_r>
 80020a0:	9001      	str	r0, [sp, #4]
 80020a2:	4284      	cmp	r4, r0
 80020a4:	d803      	bhi.n	80020ae <_realloc_r+0x36>
 80020a6:	0035      	movs	r5, r6
 80020a8:	0843      	lsrs	r3, r0, #1
 80020aa:	42a3      	cmp	r3, r4
 80020ac:	d3ee      	bcc.n	800208c <_realloc_r+0x14>
 80020ae:	0021      	movs	r1, r4
 80020b0:	0038      	movs	r0, r7
 80020b2:	f7ff fc33 	bl	800191c <_malloc_r>
 80020b6:	1e05      	subs	r5, r0, #0
 80020b8:	d0e8      	beq.n	800208c <_realloc_r+0x14>
 80020ba:	9b01      	ldr	r3, [sp, #4]
 80020bc:	0022      	movs	r2, r4
 80020be:	429c      	cmp	r4, r3
 80020c0:	d900      	bls.n	80020c4 <_realloc_r+0x4c>
 80020c2:	001a      	movs	r2, r3
 80020c4:	0031      	movs	r1, r6
 80020c6:	0028      	movs	r0, r5
 80020c8:	f7ff ffcd 	bl	8002066 <memcpy>
 80020cc:	0031      	movs	r1, r6
 80020ce:	0038      	movs	r0, r7
 80020d0:	f7ff fbb8 	bl	8001844 <_free_r>
 80020d4:	e7da      	b.n	800208c <_realloc_r+0x14>

080020d6 <_malloc_usable_size_r>:
 80020d6:	1f0b      	subs	r3, r1, #4
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	1f18      	subs	r0, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	da01      	bge.n	80020e4 <_malloc_usable_size_r+0xe>
 80020e0:	580b      	ldr	r3, [r1, r0]
 80020e2:	18c0      	adds	r0, r0, r3
 80020e4:	4770      	bx	lr
	...

080020e8 <_init>:
 80020e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ee:	bc08      	pop	{r3}
 80020f0:	469e      	mov	lr, r3
 80020f2:	4770      	bx	lr

080020f4 <_fini>:
 80020f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020fa:	bc08      	pop	{r3}
 80020fc:	469e      	mov	lr, r3
 80020fe:	4770      	bx	lr
